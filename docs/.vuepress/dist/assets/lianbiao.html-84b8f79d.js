import{_ as t,r as o,o as c,c as l,a as n,b as s,e as p,d as e}from"./app-0b7f733a.js";const i={},r=n("h1",{id:"链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),s(" 链表")],-1),u=n("h2",{id:"基础知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础知识","aria-hidden":"true"},"#"),s(" 基础知识")],-1),k={href:"https://github.com/RainyNight9/dataStructure-algorithm/tree/master/04.%E9%93%BE%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>链表是一种由一群结点组成顺序的数据结构。在最简单的情况下，每个结点由一个数据和一个指向在顺序中下一个结点的指针（即连接）而组成。</p><pre><code>1、链表中的每个节点至少包含两部分：数据域 和 指针域
2、链表中的每个节点，通过指针域的值，形成线性结构
3、查找节点O(n），插入节点O(1)，删除节点O(1)
4、不适合快速的定位数据，适合动态的插入和删除数据的应用场景
</code></pre><p>实现链表的方式：包括地址、下标(相对地址)、引用。</p><pre><code>1、传统方法(节点+指针) 
2、使用数组模拟
    指针域和数据域分离
    利用数组存放下标进行索引
</code></pre><p>链表不适合快速的定位数据，适合动态的插入和删除的应用场景。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><pre><code>1、操作系统内的动态内存分配

2、LRU 缓存淘汰算法
    LRU = Least Recently Used(近期最少使用)
    vue 的 keep-alive 的实现就是 LRU 缓存淘汰算法
</code></pre><p>缓存是一种高速的数据结构。缓存其实就是低速设备有效的数据管理手段，缓存是⾼速设备之于低速设备的⼀种称呼。</p><p>设备间存在速度差异，可以通过将使用较多的数据存放在高速区域，而将使用较少的内容存放在相对低速的区域的方式，来对系统进行优化。</p><h2 id="经典算法" tabindex="-1"><a class="header-anchor" href="#经典算法" aria-hidden="true">#</a> 经典算法</h2>`,10),v={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>思路一：哈希表</p><pre><code>使用哈希表(额外的存储区)存储已经遍历过的节点
</code></pre><p>思路二：快慢指针</p><pre><code>使用快慢指针，快指针一次向前2个节点 慢指针一次向前1个节点
    有环的链表中，快指针和慢指针最终一定会在环中相遇
    无环的链表中，快指针会率先访问到链表尾，从而终结检测过程
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> head<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> q <span class="token operator">!==</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>思路一：哈希表</p><p>思路二：快慢指针</p><pre><code>快指针走的路程是慢指针的2倍
考虑快慢指针第一次相遇的情况(设此时慢指针走的路程为x)
    指定一个指针p放置在链表头部(p每次向前1个节点) 
    再走一个路程为x的长度
        慢指针到达了2x的位置
        指针p到达了x的位置
        慢指针和p相遇了
            往前回放一下，在环的入口开始，慢指针和p已经相遇了
            慢指针和p重叠走了一段距离
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> head<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">!==</span> l <span class="token operator">&amp;&amp;</span> q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">===</span><span class="token keyword">null</span> <span class="token operator">||</span> q<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    l <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    q <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    l <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 或者</span>
<span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> head<span class="token punctuation">,</span> q <span class="token operator">=</span> head
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>next<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">do</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l <span class="token operator">&amp;&amp;</span> q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> q<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    l <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> q
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),w={href:"https://leetcode.cn/problems/happy-number/",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>思路一：快慢指针</p><p>转化为判断链表是否有环的问题</p><pre><code>1、创建一个慢指针，一次走一步，再创建一个快指针，一次走两步。
2、当快慢指针相遇，代表形参环路，该数不是快乐数。
3、若指针移动过程中，找到了 11，则当前数是一个快乐数。
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isHappy</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> n<span class="token punctuation">,</span> q <span class="token operator">=</span> n
    <span class="token keyword">do</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        q <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l <span class="token operator">&amp;&amp;</span> q<span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token keyword">return</span> q <span class="token operator">===</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getNext</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>思路一：迭代反转</p><pre><code>可以使用虚拟头节点来进行头插法
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">(</span>cur <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路二：递归</p><pre><code>一次拆掉一个节点并递归处理剩余的子链表
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>思路一：递归</p><pre><code>使用虚拟头结点(dummy head)
    通常用于链表的首地址有可能改变的情况
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> count  <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> res
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode<span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next
    next<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),N={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/",target:"_blank",rel:"noopener noreferrer"},q=e(`<p>思路一：递归（困难）</p><pre><code>先判断是否有K个元素，然后对这K个节点进行反转，最后拆装一下首尾部分
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> ret<span class="token punctuation">,</span> cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">,</span> cnt <span class="token operator">=</span> n
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">return</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> tail <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next
    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),L={href:"https://leetcode.cn/problems/rotate-list/",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>思路一：迭代</p><pre><code>把整个链表首尾相接，向后走K位后将环拆开
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n<span class="token operator">++</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    k <span class="token operator">%=</span> n
    k <span class="token operator">=</span> n <span class="token operator">-</span> k
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    head <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> head
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),E={href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"},K=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类似第 6 题解法，是K = 2的简单情形</span>
<span class="token keyword">function</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> ret<span class="token punctuation">,</span> cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">reverseN</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">,</span> cnt <span class="token operator">=</span> n
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">return</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> tail <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next
    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 递归，两两互换</span>
<span class="token keyword">function</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> newHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>newHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> newHead
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),R={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},B=e(`<p>思路一：快慢指针</p><pre><code>找到前一个节点，删除后调整指针
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> l <span class="token operator">=</span> ret<span class="token punctuation">,</span> q <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">,</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    l<span class="token punctuation">.</span>next <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),H={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> p <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">===</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"},V=e(`<p>思路一：快慢指针</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> l <span class="token operator">=</span> ret<span class="token punctuation">,</span> q
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            q <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
            <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>val <span class="token operator">===</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
            l<span class="token punctuation">.</span>next <span class="token operator">=</span> q
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未完结，敬请期待！</p>`,3);function O(P,S){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,u,n("p",null,[s("相关的一些知识点及代码可见："),n("a",k,[s("链表"),p(a)])]),d,n("p",null,[s("1、"),n("a",v,[s("141. 环形链表"),p(a)])]),m,n("p",null,[s("2、"),n("a",b,[s("142. 环形链表 II"),p(a)])]),y,n("p",null,[s("3、"),n("a",w,[s("202. 快乐数"),p(a)])]),h,n("p",null,[s("4、"),n("a",x,[s("206. 反转链表"),p(a)])]),f,n("p",null,[s("5、"),n("a",_,[s("92. 反转链表 II"),p(a)])]),g,n("p",null,[s("6、"),n("strong",null,[n("a",N,[s("25. K 个一组翻转链表"),p(a)])])]),q,n("p",null,[s("7、"),n("a",L,[s("61. 旋转链表"),p(a)])]),I,n("p",null,[s("8、"),n("a",E,[s("24. 两两交换链表中的节点"),p(a)])]),K,n("p",null,[s("9、"),n("a",R,[s("19. 删除链表的倒数第 N 个结点"),p(a)])]),B,n("p",null,[s("10、"),n("a",H,[s("83. 删除排序链表中的重复元素"),p(a)])]),C,n("p",null,[s("11、"),n("a",U,[s("82. 删除排序链表中的重复元素 II"),p(a)])]),V])}const D=t(i,[["render",O],["__file","lianbiao.html.vue"]]);export{D as default};
