import{_ as s,o as a,c as t,e as p}from"./app-f5876168.js";const e={};function o(l,n){return a(),t("div",null,n[0]||(n[0]=[p(`<h1 id="移动端适配" tabindex="-1"><a class="header-anchor" href="#移动端适配" aria-hidden="true">#</a> 移动端适配</h1><h2 id="适配方案汇总" tabindex="-1"><a class="header-anchor" href="#适配方案汇总" aria-hidden="true">#</a> 适配方案汇总</h2><ol><li><code>媒体查询百分比设置（不推荐）</code></li><li><code>rem 单位 + 动态 html 的 font-size（过渡方案）</code></li><li><code>viewport，vw 单位适配（推荐）</code></li><li><code>flex 的弹性布局</code></li></ol><h2 id="_1-媒体查询百分比设置-不推荐" tabindex="-1"><a class="header-anchor" href="#_1-媒体查询百分比设置-不推荐" aria-hidden="true">#</a> 1. 媒体查询百分比设置（不推荐）</h2><p>早期的移动端适配方案，已经被淘汰了！</p><p><strong>思路：通过媒体查询来设置不同尺寸屏幕下 html 的 font-size</strong></p><p><strong>缺点：</strong></p><ul><li>不同属性的百分比值，相对的可能是不同参照物，所以百分比往往很难统一</li><li>需要针对不同的屏幕编写大量的媒体查询</li><li>如果动态改变尺寸，不会实时更新，只是一个个区间</li></ul><h2 id="_2-rem-动态设置-font-size-不推荐" tabindex="-1"><a class="header-anchor" href="#_2-rem-动态设置-font-size-不推荐" aria-hidden="true">#</a> 2. rem + 动态设置 font-size（不推荐）</h2><p>rem 单位是相对于 html 元素的 font-size 来设置的，通过在不同屏幕尺寸下，动态的修改 html 元素的 font-size 以此来达到适配效果</p><p>在开发中，我们只需要考虑两个问题：</p><ul><li>针对不同的屏幕，设置 html 不同的 font-size</li><li>将原来设置的尺寸，转化成 rem 单位</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取所有的 html 元素</span>
  <span class="token keyword">const</span> htmlEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement
  <span class="token comment">// 375 -&gt; 16px</span>
  <span class="token comment">// 320px -&gt; 12px</span>
  <span class="token comment">// 我们需要动态更改字体大小，因此需要获取网页的宽度</span>
  <span class="token comment">// 拿到客户端宽度</span>
  <span class="token keyword">const</span> htmlWidth <span class="token operator">=</span> htmlEl<span class="token punctuation">.</span>clientWidth
  <span class="token comment">// 将宽度分成10份</span>
  <span class="token keyword">const</span> htmlFontSize <span class="token operator">=</span> htmlWidth <span class="token operator">/</span> <span class="token number">10</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;htmlFontSize&#39;</span><span class="token punctuation">,</span> htmlFontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将值给到html的font-size</span>
  htmlEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> htmlFontSize <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 给 window 添加监听事件</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> setRemUnit<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="px-与-rem-的单位换算" tabindex="-1"><a class="header-anchor" href="#px-与-rem-的单位换算" aria-hidden="true">#</a> px 与 rem 的单位换算</h3><p><strong>手动换算：</strong></p><ul><li>根元素 html 的文字大小 = 视口宽度/分成的份数(一般为10份，方便计算)</li><li>rem 值 = 元素的 px 值 / 根元素 html 的文字大小</li><li>比如有一个在375px屏幕上，100px宽度和高度的盒子</li><li>我们需要将100px转成对应的rem值</li><li>100/37.5=2.6667，其他也是相同的方法计算即可</li></ul><p><strong>less/scss函数：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token parameter">@px</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> 1rem <span class="token operator">*</span> <span class="token punctuation">(</span>@px <span class="token operator">/</span> <span class="token number">37.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span>box <span class="token punctuation">{</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">.</span><span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">.</span><span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> orange<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

p <span class="token punctuation">{</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>postcss-pxtorem：</strong></p><ul><li>目前在前端的工程化开发中，我们可以借助于webpack的工具来完成自动的转化</li><li><code>npm install postcss-pxtorem</code></li></ul><p><strong>VSCode插件：</strong></p><ul><li><code>px to rem &amp; rpx &amp; vw (cssrem)</code> 插件</li></ul><h3 id="lib-flexible-不推荐" tabindex="-1"><a class="header-anchor" href="#lib-flexible-不推荐" aria-hidden="true">#</a> lib-flexible（不推荐）</h3><p>lib-flexible 是淘宝团队出品的一个移动端自适应解决方案，通过动态计算 viewport 设置 font-size 实现不同屏幕宽度下的 UI 自适应缩放。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">flexible</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> document</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement
  <span class="token keyword">var</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span>

  <span class="token comment">// adjust body font size</span>
  <span class="token keyword">function</span> <span class="token function">setBodyFontSize</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">*</span> dpr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> setBodyFontSize<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// set 1rem = viewWidth / 10</span>
  <span class="token keyword">function</span> <span class="token function">setRemUnit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> rem <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">10</span>
    docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// reset rem unit on page resize</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> setRemUnit<span class="token punctuation">)</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pageshow&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// detect 0.5px supports</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dpr <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> fakeBody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> testElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
    testElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">&#39;.5px solid transparent&#39;</span>
    fakeBody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>testElement<span class="token punctuation">)</span>
    docEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>testElement<span class="token punctuation">.</span>offsetHeight <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      docEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hairlines&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    docEl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设备像素比 dpr：</strong></p><ul><li><code>dpr（device pixel ratio）表示设备像素比</code>，设备像素/设备独立像素，代表设备独立像素到设备像素的转换关系，在JS中可以通过 window.devicePixelRatio 获取</li><li>计算公式为：<code>DPR = 物理像素/逻辑像素</code></li><li>当设备像素比为 <code>1:1</code> 时，使用 1（1×1）个设备像素显示 1 个CSS像素；</li><li>当设备像素比为 <code>2:1</code> 时，使用 4（2×2）个设备像素显示 1 个CSS像素；</li><li>当设备像素比为 <code>3:1</code> 时，使用 9（3×3）个设备像素显示 1 个CSS像素。</li></ul><h2 id="_3-viewport-vw-单位适配-推荐" tabindex="-1"><a class="header-anchor" href="#_3-viewport-vw-单位适配-推荐" aria-hidden="true">#</a> 3. viewport，vw 单位适配（推荐）</h2><ul><li><code>100vw</code> 相当于整个视口的宽度 innerWidth</li><li><code>1vw</code> 相当于视口宽度的 <code>1%</code></li><li>将 px 转换为 vw 即可完成适配</li></ul><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p><strong>width=device-width</strong>：</p><ul><li>这意味着页面的宽度应该等于设备的屏幕宽度。这是响应式设计的基础，因为它确保了页面内容会根据设备的屏幕大小进行适当调整。</li></ul></li><li><p><strong>initial-scale=1</strong>：</p><ul><li>当页面首次加载时，缩放级别应设为1，既不放大也不缩小。</li></ul></li><li><p><strong>maximum-scale=1 和 minimum-scale=1</strong>：</p><ul><li>这限制了用户可以缩放页面的最大和最小级别。在这里，它们都被设置为1，意味着用户不能放大或缩小页面。</li></ul></li><li><p><strong>user-scalable=no</strong>：</p><ul><li>这表示用户不能通过手势（如双指捏合或放大）来缩放页面。这与 <code>maximum-scale=1</code> 和 <code>minimum-scale=1</code> 的效果相似，但更直接地禁止了缩放功能。</li></ul></li></ol><p><strong>vw 相比于 rem 的优势：</strong></p><ul><li>不需要去计算 html 的 font-size 大小，也不需要去给 html 设置 font-size</li><li>不会因为设置 html 的 font-size 大小，而必须再给 body 设置一个 font-size 防止继承</li><li>因为不依赖 font-size 的尺寸，所以不用担心某些原因的 html 的 font-size 尺寸被篡改，导致页面尺寸混乱</li><li>vw 更加语义话，1vw 相当于 1/100 viewport 的大小</li><li>rem 事实上作为一种过渡的方案，它利用的也是 vw 的思想</li></ul><h3 id="px-与-vw-的单位转换" tabindex="-1"><a class="header-anchor" href="#px-与-vw-的单位转换" aria-hidden="true">#</a> px 与 vw 的单位转换：</h3><p><strong>手动换算：</strong></p><ul><li>比如屏幕尺寸为 375px，元素大小为 150px，我们需要将 150px 转换成对应的 vw 值：150 / 3.75= 40</li></ul><p><strong>less/scss 函数：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@vwUnit<span class="token operator">:</span> <span class="token number">3.75</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token function">pxToVw</span><span class="token punctuation">(</span><span class="token parameter">@px</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token punctuation">(</span>@px <span class="token operator">/</span> @vw<span class="token punctuation">)</span> <span class="token operator">*</span> 1vw
<span class="token punctuation">}</span>
<span class="token punctuation">.</span>box <span class="token punctuation">{</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">.</span><span class="token function">pxToVw</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">.</span><span class="token function">pxToVw</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>postcss-px-to-viewport-8-plugin：</strong></p><ul><li>和 rem 一样，在前端的工程化开发中，我们可以借助于 webpack 的工具来完成自动的转化</li><li><code>npm install postcss-px-to-viewport-8-plugin</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;postcss-px-to-viewport-8-plugin&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">unitToConvert</span><span class="token operator">:</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 需要转换的单位，默认为&quot;px&quot;</span>
            <span class="token literal-property property">viewportWidth</span><span class="token operator">:</span> <span class="token number">375</span><span class="token punctuation">,</span> <span class="token comment">// 设计稿的视口宽度</span>
            <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 忽略某些文件夹下的文件或特定文件</span>
            <span class="token literal-property property">unitPrecision</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 单位转换后保留的精度</span>
            <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 能转化为vw的属性列表</span>
            <span class="token literal-property property">viewportUnit</span><span class="token operator">:</span> <span class="token string">&#39;vw&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 希望使用的视口单位</span>
            <span class="token literal-property property">fontViewportUnit</span><span class="token operator">:</span> <span class="token string">&#39;vw&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 字体使用的视口单位</span>
            <span class="token literal-property property">selectorBlackList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要忽略的CSS选择器，不会转为视口单位，使用原有的px等单位。</span>
            <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 设置最小的转换数值，如果为1的话，只有大于1的值会被转换</span>
            <span class="token literal-property property">mediaQuery</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 媒体查询里的单位是否需要转换单位</span>
            <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//  是否直接更换属性值，而不添加备用属性</span>
            <span class="token literal-property property">landscape</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span>
            <span class="token literal-property property">landscapeUnit</span><span class="token operator">:</span> <span class="token string">&#39;vw&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 横屏时使用的单位</span>
            <span class="token literal-property property">landscapeWidth</span><span class="token operator">:</span> <span class="token number">1125</span> <span class="token comment">// 横屏时使用的视口宽度</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vs Code 插件：</strong></p><ul><li><code>px to vw &amp; rem (cssrem)</code> 插件</li></ul><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><h3 id="_1px-问题" tabindex="-1"><a class="header-anchor" href="#_1px-问题" aria-hidden="true">#</a> 1px 问题</h3><p><strong>由于屏幕的物理像素与CSS像素（逻辑像素）之间的比例问题，导致设计师预期的1物理像素边框在屏幕上显示得过粗或过细的问题</strong>。</p><p>这个问题的根源在于，早期没有逻辑像素的概念时，1px 的 CSS 像素直接对应 1 物理像素。但随着响应式设计和 Retina 屏幕的出现，为了适配不同设备，引入了逻辑像素比（Device Pixel Ratio, DPR），使得 1px 的 CSS 像素对应的物理像素由 DPR 决定。</p><p><strong>解决方案：</strong></p><ol><li><strong>使用媒体查询调整</strong>：针对不同 DPR 的设备编写不同的样式规则，确保 1px 边框在不同设备上具有相同的视觉效果。这种方法的缺点是需要写多套 CSS 代码，维护成本较高。（不推荐）</li><li><strong>使用<code>transform: scale(0.5)</code></strong> ：通过缩放元素大小的方式来保证 1px 边框的精细度。但这种方法可能会影响布局和定位。</li><li><strong>使用伪类和阴影</strong>：利用伪元素和 box-shadow 属性来模拟边框，可以实现较细的边框效果，但会增加代码复杂度和性能消耗。</li><li><strong>使用 SVG 或图标字体</strong>：SVG 和图标字体可以保证在不同设备上的清晰度和一致性，但可能会导致文件大小增加。</li><li><strong>使用 postcss 插件自动处理</strong>：自动化工具可以根据设备的 DPR 自动生成对应宽度的边框，简化了开发流程。</li><li><strong>使用 flexible 方案</strong>：例如使用 lib-flexible 等库，根据屏幕的实际像素密度动态调整 CSS 像素和物理像素之间的映射关系。</li></ol>`,49)]))}const c=s(e,[["render",o],["__file","yidongduanshipei.html.vue"]]);export{c as default};
