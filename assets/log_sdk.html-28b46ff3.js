import{_ as a,o as s,c as t,e}from"./app-f5876168.js";const o={};function p(i,n){return s(),t("div",null,n[0]||(n[0]=[e(`<h1 id="日志埋点-sdk" tabindex="-1"><a class="header-anchor" href="#日志埋点-sdk" aria-hidden="true">#</a> 日志埋点 SDK</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><ul><li>其他部门的方案不合适、特殊参数上传、耗时埋点等</li><li>流量监测（按时间空间维度分析，留存分析，转化分析）</li><li>构建行为路径， 获取用户的整条行为链路，实现用户分群、人群洞察、行为细查等，构建用户画像</li><li>通过对埋点数据的处理、分析、建模，判断产品的效果和未来走向</li><li>热力分析，帮助判断访客热衷的区域，评估网页设计是否合理等</li></ul><h2 id="内容总结" tabindex="-1"><a class="header-anchor" href="#内容总结" aria-hidden="true">#</a> 内容总结</h2><ul><li>pv【PageView】上报（包括history上报、hash上报）、 hashChange</li><li>uv【UserView】上报（客户端 IP 字段、userId）</li><li>dom 事件上报、click、data-xxx、keydown</li><li>js 报错上报（包括常规错误上报、Promise报错上报）</li></ul><h3 id="难点" tabindex="-1"><a class="header-anchor" href="#难点" aria-hidden="true">#</a> 难点</h3><p><strong>保证在文档卸载期间发送数据一直是一个困难</strong> 一个理论上的统计代码——在卸载事件处理器中尝试通过一个同步的 XMLHttpRequest 向服务器发送数据，导致了页面卸载被延迟。</p><p>使用 <code>sendBeacon()</code> 方法会使用户代理在有机会时异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能，这意味着：</p><ul><li>数据发送是可靠的</li><li>数据异步传输</li><li>不影响下一导航的载入</li></ul><p><strong>发送数据的时机</strong> 网站通常希望在用户完成页面浏览后向服务器发送分析或诊断数据，最可靠的方法是在 <code>visibilitychange</code> 事件发生时发送数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;visibilitychange&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">logData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&quot;hidden&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    navigator<span class="token punctuation">.</span><span class="token function">sendBeacon</span><span class="token punctuation">(</span><span class="token string">&quot;/log&quot;</span><span class="token punctuation">,</span> analyticsData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量上报和延迟上报</strong></p><ul><li>从数量维度上，将单条上报聚合成多条上报，大大减少了数量的请求</li><li>从时间维度上，先本地化存储数据，将上报请求延后，优先处理业务逻辑请求，在程序空闲时进行上报</li><li>一般采用组合方式，根据数据量，选择 Image 或者 Beacon 的方式，</li><li>若检测不支持 Beacon, 在大数据量时回退到传统的 XHR 请求</li></ul><h3 id="成果" tabindex="-1"><a class="header-anchor" href="#成果" aria-hidden="true">#</a> 成果</h3><ul><li>成果 10个 项目接入</li></ul><h2 id="具体细节" tabindex="-1"><a class="header-anchor" href="#具体细节" aria-hidden="true">#</a> 具体细节</h2><h3 id="pv" tabindex="-1"><a class="header-anchor" href="#pv" aria-hidden="true">#</a> PV</h3><p><code>History API</code> 可以让我们更精细地控制<code>页面的导航和状态</code></p><ul><li><code>history.pushState(state, title, url)</code> 向浏览器的会话历史栈增加了一个条目、异步、</li><li><code>history.replaceState(stateObj, title[, url])</code> 修改当前历史记录实体</li><li><code>popstate</code> 事件只会在浏览器某些行为下触发，比如点击后退按钮（或者在 JS 中调用 history.back() 方法）</li></ul><h3 id="dom-事件上报" tabindex="-1"><a class="header-anchor" href="#dom-事件上报" aria-hidden="true">#</a> dom 事件上报</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">domReport</span><span class="token punctuation">(</span>targetKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     mouseEventList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         <span class="token comment">// console.log(e.target);</span>
         <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;target-key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;监听到带有target-key属性元素的dom事件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reportTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
             event<span class="token operator">:</span> ev<span class="token punctuation">,</span>
             targetKey<span class="token punctuation">,</span>
           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;未监听到带有target-key属性元素的dom事件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// let activeElement = document.activeElement;</span>
         <span class="token comment">// if (activeElement?.getAttribute(&quot;target-key&quot;)) {</span>
         <span class="token comment">//   console.log(&quot;监听到dom事件&quot;);</span>
         <span class="token comment">// }</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误上报" tabindex="-1"><a class="header-anchor" href="#错误上报" aria-hidden="true">#</a> 错误上报</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 常规报错上报</span>
   <span class="token keyword">private</span> <span class="token function">errorEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token string">&quot;常规报错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reportTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
         event<span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
         targetKey<span class="token operator">:</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>
         message<span class="token operator">:</span> event<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

<span class="token comment">// Promise报错上报</span>
   <span class="token keyword">private</span> <span class="token function">promiseReject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;unhandledrejection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       event<span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token string">&quot;promise报错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reportTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
           event<span class="token operator">:</span> <span class="token string">&quot;unhandledrejection&quot;</span><span class="token punctuation">,</span>
           targetKey<span class="token operator">:</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>
           reason<span class="token operator">:</span> error<span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

<span class="token comment">// vue 报错上报</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    navigator<span class="token punctuation">.</span><span class="token function">sendBeacon</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">error</span><span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;vue运行异常&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志上报" tabindex="-1"><a class="header-anchor" href="#日志上报" aria-hidden="true">#</a> 日志上报</h3><ul><li>gif（跨域、远离dom，不阻塞、体积小，节约流量）1×1 透明像素的 GIF</li><li><code>navigator.sendBeacon(url, data)</code> 用于将数据以非阻塞（后台）方式发送到服务器、即使页面卸载（关闭）也会发送请求 <ul><li>当用户代理成功把数据加入传输队列时，<code>sendBeacon()</code>  方法将会返回 <code>true</code>，否则返回 <code>false</code></li><li>相较于 <code>img</code> 标签，使用 <code>navigator.sendBeacon</code> 会更规范，数据传输上可传输资源类型会更多。</li><li><code>sendBeacon</code> 是异步的，不会影响当前页到下一个页面的跳转速度，且不受同域限制。</li><li>这个方法还是异步发出请求，但是请求与当前页面脱离关联，作为浏览器的任务，因此可以保证会把数据发出去，不拖延卸载流程。</li></ul></li></ul><h3 id="性能日志计算公式" tabindex="-1"><a class="header-anchor" href="#性能日志计算公式" aria-hidden="true">#</a> 性能日志计算公式</h3><ul><li><p>PV：是用 SDK 采集的性能日志（Performace-OL）进行计算</p></li><li><p>UV：使用客户端采集的性能日志（Performace-OL）中的<code>客户端 IP 字段</code>，进行去重计算</p></li><li><p><code>first-paint（首屏有效绘制时间）</code>：直接获取的 window.performance.getEntries().first-paint</p></li></ul><p><strong>以下字段均来自于 performance.timing 下：</strong></p><ul><li><p><code>ttfb（发起文档请求到首字节返回的时间）</code>: responseStart - requestStart</p><ul><li>responseStart：当浏览器从服务器，缓存或本地资源接收到响应的第一个字节后， 立即返回时间戳</li><li>requestStart：开始请求文档时间</li></ul></li><li><p><code>FirstByte（从 DNS 解析到首字节返回的时间）</code> : responseStart - domainLookupStart</p><ul><li>responseStart：当浏览器从服务器，缓存或本地资源接收到响应的第一个字节后，responseStart 立即返回时间戳</li><li>domainLookupStart：DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</li></ul></li><li><p><code>DNS（DNS 解析时间）</code>：domainLookupEnd - domainLookupStart</p><ul><li>domainLookupEnd：DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</li><li>domainLookupStart：DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</li></ul></li><li><p><code>TCP（TCP 链接建立时间）</code>：connectEnd - connectStart</p><ul><li>connectStart 和 connectEnd：分别代表TCP建立连接和连接成功的时间节点。如果浏览器没有进行TCP连接（比如使用持久化连接 webscoket、使用缓存或本地资源），则两者都等于 domainLookupEnd</li><li>domainLookupEnd：在浏览器完成资源的域名查找所需时间，如果有缓存则表示缓存查找时间</li></ul></li><li><p><code>SSL（建立 ssl 链接所需要的时间）</code>：connectEnd - secureConnectionStart</p><ul><li>connectEnd：TCP 连接成功的时间节点</li><li>secureConnectionStart： HTTPS 连接开始的时间，如果不是安全连接，则值为 0</li></ul></li><li><p><code>TTL(可交互时间)</code>：domInteractive - fetchStart</p><ul><li>domInteractive：完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</li><li>fetchStart：表示浏览器即将开始获取资源之前的时间戳。</li></ul></li><li><p><code>Ready(基本 DOM 加载完毕的时间)</code>: domContentLoadedEventEnd - fetchStart</p><ul><li>domContentLoadedEventEnd：DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕），文档的DOMContentLoaded 事件的结束时间</li><li>fetchStart：表示浏览器即将开始获取资源之前的时间戳。</li></ul></li><li><p><code>Load(所有资源加载完毕的时间)</code>: loadEventStart - fetchStart</p><ul><li>loadEventStart：DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕），文档的DOMContentLoaded 事件的结束时间</li><li>fetchStart：表示浏览器即将开始获取资源之前的时间戳。</li></ul></li></ul><p><strong>其他一些指标：</strong></p><ul><li><code>LCP（Largest Contentful Paint）：最大内容绘制</code>，用于记录视窗内最大的元素绘制的时间。</li><li><code>FID（First Input Delay）</code>：首次输入延迟，FID指的是用户首次与产品进行交互时，我们产品可以在多长时间给出反馈。</li><li><code>CLS（Cumulative Layout Shift）</code>：累计位移偏移，记录了页面上非预期的位移波动。</li><li><code>TBT（Total Blocking Time）</code>：阻塞总时间，记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。</li></ul><p>通过谷歌官方库 <code>web-vitals</code> 可以获取到这些指标</p><h2 id="埋点功能的意义" tabindex="-1"><a class="header-anchor" href="#埋点功能的意义" aria-hidden="true">#</a> 埋点功能的意义</h2><ul><li><code>数据采集</code>：埋点是数据采集领域（尤其是用户行为数据采集领域）的术语，它针对特定用户行为或事件进行捕获、处理和发送的相关技术及其实施过程。通过埋点，可以收集到用户在应用中的所有行为数据，例如页面浏览、按钮点击、表单提交等。</li><li><code>数据分析</code>：采集的数据可以帮助业务人员分析网站或者App的使用情况、用户行为习惯等，是后续建立用户画像、用户行为路径等数据产品的基础。通过数据分析，企业可以更好地了解用户需求，优化产品和服务。</li><li><code>改进决策</code>：通过对埋点数据的分析，企业可以了解用户的真实需求和行为习惯，从而做出更符合市场和用户需求的决策，提高产品和服务的质量和竞争力。</li><li><code>优化运营</code>：通过埋点数据，企业可以了解用户的兴趣和行为，从而更好地定位目标用户群体，优化运营策略，提高运营效率和收益。</li><li><code>预测趋势</code>：通过对埋点数据的分析，企业可以预测市场和用户的未来趋势，从而提前做好准备，把握市场机遇，赢得竞争优势。</li></ul><h2 id="sdk-打包" tabindex="-1"><a class="header-anchor" href="#sdk-打包" aria-hidden="true">#</a> SDK 打包</h2><h3 id="主流模块" tabindex="-1"><a class="header-anchor" href="#主流模块" aria-hidden="true">#</a> 主流模块</h3><ul><li><code>CommonJS</code>规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD和CMD解决方案</li><li><code>AMD</code>规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li><code>CMD</code>规范整合了CommonJS和AMD规范的特点， CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM打包，模块的加载逻辑偏重</li><li><code>UMD</code>是AMD和CommonJS两者的结合，这个模式中加入了当前存在哪种规范的判断，所以能够“通用”，它兼容了AMD和CommonJS，同时还支持老式的“全局”变量规范</li><li><code>ESM</code> ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</li></ul><h3 id="rollup-和-webpack-的区别" tabindex="-1"><a class="header-anchor" href="#rollup-和-webpack-的区别" aria-hidden="true">#</a> rollup 和 webpack 的区别</h3><ul><li>webpack 由于年代相对久远，在 commonjs 后且 esMoudles 之前,所以通过 webpack 通过自己来实现 commonjs 等语法，rollup 则可以通过配置打包成想要的语法，比如 esm</li><li>所以说 rollup 很适合打包成 库，而 webpack 比较适合用来做来打包应用</li><li>由于 rollup 不能够直接读取 node_modules 中的依赖项，需要引入加载 npm 模块的插件：rollup-plugin-node-resolve</li><li>由于 rollup 默认只支持 esm 模块打包，所以需要引入插件来支持 cjs 模块：rollup-plugin-commonjs</li><li>由于 rollup 通过可以 esm 模块开发和打包，所以支持 tree-shaking 模式</li><li>vite 就是 rollup 开发而来的</li></ul>`,39)]))}const l=a(o,[["render",p],["__file","log_sdk.html.vue"]]);export{l as default};
