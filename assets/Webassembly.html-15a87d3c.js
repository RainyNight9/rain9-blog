import{_ as s,o as a,c as t,e as p}from"./app-f5876168.js";const e={};function o(c,n){return a(),t("div",null,n[0]||(n[0]=[p(`<h1 id="webassembly" tabindex="-1"><a class="header-anchor" href="#webassembly" aria-hidden="true">#</a> Webassembly</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>​WebAssembly（简称 WASM）是<code>一种新的二进制代码格式</code>，旨在为现代 Web 浏览器提供一种高效的方式来运行编译过的代码。WASM 是一种<code>与平台无关的虚拟机</code>，它能通过现代浏览器直接运行，从而提升 Web 应用程序的性能。WebAssembly 使得开发者能够<code>将低级语言（如 C/C++、Rust、Go）编译成 Web 可执行文件</code>，进而在浏览器中运行。这种方式大大<code>提高了 Web 应用的计算能力，尤其适用于复杂的计算、图形处理和多媒体编辑等场景</code>。​</p><h2 id="官方介绍" tabindex="-1"><a class="header-anchor" href="#官方介绍" aria-hidden="true">#</a> 官方介绍</h2><p>​根据 WebAssembly 的官方网站，WebAssembly 是<code>一种高效、体积小且可在浏览器中运行的二进制格式</code>。它的目标是<code>为 Web 应用提供与原生应用相媲美的性能，同时保持 Web 的开放性和可移植性</code>。WebAssembly 运行在<code>沙箱环境中</code>，具有<code>内存安全性和模块化特性</code>，使其成为 Web 开发中强有力的补充。</p><h2 id="使用场景​" tabindex="-1"><a class="header-anchor" href="#使用场景​" aria-hidden="true">#</a> 使用场景​</h2><p><strong>1.复杂计算：</strong> WebAssembly 主要<code>解决 JavaScript 在计算密集型任务中的性能瓶颈</code>。通过将这些计算任务交给 WebAssembly 执行，可以大大提高处理效率。 举个例子，某些科学计算、数据处理、机器学习任务等，可以通过 Rust 或 C++ 编写，然后编译成 WASM 进行浏览器端执行。</p><p><strong>​2.图形绘制：</strong> 在图形渲染领域，WebAssembly 能够<code>加速基于 WebGL 或其他图形渲染库的任务</code>。 例如，使用 Rust 编写高效的图形绘制库，如 skia，并将其编译为 WebAssembly，从而在浏览器中实现高性能的图形渲染。</p><p><strong>​3.音视频编辑：</strong> WebAssembly 适用于<code>音视频编辑、处理和转换等高性能应用</code>。与 JavaScript 相比，WebAssembly 提供了更强的性能，能够实时处理音视频流，进行高质量的编辑和渲染。</p><p><strong>​4.高性能渲染库：</strong> <code>使用 Rust 或类似语言编写的高性能渲染库</code>可以通过 WebAssembly 在浏览器中运行，提供比 JavaScript 更高效的渲染能力。 例如，Rust 与 skia（一个高效的 2D 图形渲染库）结合，能够在浏览器中提供极快的渲染性能，适用于图形密集型应用如游戏或 UI 动画。</p><h2 id="和-typescript-配合使用-基于-assemblyscript-实现" tabindex="-1"><a class="header-anchor" href="#和-typescript-配合使用-基于-assemblyscript-实现" aria-hidden="true">#</a> 和 TypeScript 配合使用：基于 AssemblyScript 实现</h2><p>​AssemblyScript 是一个将 TypeScript 编译为 WebAssembly 的工具，它能够让开发者在熟悉的 JavaScript/TypeScript 环境中，快速开发出高性能的 WebAssembly 模块。</p><p>​下面是一个最简单的示例，展示了如何使用 AssemblyScript 实现一个基本的 WebAssembly 模块：</p><p>​index.ts（WebAssembly 模块入口文件）</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// The entry file of your WebAssembly module.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> i32<span class="token punctuation">,</span> b<span class="token operator">:</span> i32<span class="token punctuation">)</span><span class="token operator">:</span> i32 <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// do nothing</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 100000000 iterations of the loop will take about 1 second to run on a modern computer</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​​在这个示例中，add 函数计算两个整数的和，但在计算过程中加入了一个消耗时间的循环，以模拟复杂计算任务。通过这种方式，可以测试 WebAssembly 在高负载计算时的性能。</p><h2 id="编译命令" tabindex="-1"><a class="header-anchor" href="#编译命令" aria-hidden="true">#</a> 编译命令</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;asbuild:debug&quot;</span><span class="token operator">:</span> <span class="token string">&quot;asc assembly/index.ts --target debug&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;asbuild:release&quot;</span><span class="token operator">:</span> <span class="token string">&quot;asc assembly/index.ts --target release&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;asbuild&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run asbuild:debug &amp;&amp; npm run asbuild:release&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上命令通过 asc 编译器将 TypeScript 文件编译为 WebAssembly 模块，debug 版本用于开发调试，release 版本用于生产环境。</p><h3 id="​实现的过程" tabindex="-1"><a class="header-anchor" href="#​实现的过程" aria-hidden="true">#</a> ​实现的过程</h3><p>​1.安装 AssemblyScript： 首先需要安装 AssemblyScript 开发工具链：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev assemblyscript​
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​2.编写 TypeScript 代码： 编写上述 index.ts 文件，定义需要通过 WebAssembly 执行的函数。</p><p>​3.编译成 WebAssembly： 使用 asc 编译命令将 TypeScript 文件编译成 WebAssembly 模块。</p><p>​4.在 Web 应用中使用： 将生成的 .wasm 文件导入到前端应用中，使用 JavaScript 调用 WebAssembly 模块中的函数。​</p><h3 id="完整代码示例" tabindex="-1"><a class="header-anchor" href="#完整代码示例" aria-hidden="true">#</a> 完整代码示例</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">instantiate</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> imports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> exports <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> WebAssembly<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> imports<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> memory <span class="token operator">=</span> exports<span class="token punctuation">.</span>memory <span class="token operator">||</span> imports<span class="token punctuation">.</span>env<span class="token punctuation">.</span>memory<span class="token punctuation">;</span>
  <span class="token comment">// 适配导出的模块</span>
  <span class="token keyword">const</span> adaptedExports <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    offset<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// assembly/draw/offset: usize</span>
      <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> exports<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>value <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> exports<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> adaptedExports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  memory<span class="token punctuation">,</span>
  add<span class="token punctuation">,</span>
  offset<span class="token punctuation">,</span>
  update<span class="token punctuation">,</span>
  resize<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> url <span class="token operator">=&gt;</span> <span class="token function">instantiate</span><span class="token punctuation">(</span>
  <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isNodeOrBun <span class="token operator">=</span> <span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>bun <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isNodeOrBun<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在 Node.js 或 Bun 环境中读取 WASM 文件</span>
      <span class="token keyword">return</span> globalThis<span class="token punctuation">.</span>WebAssembly<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;node:fs/promises&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在浏览器中通过 fetch 加载 WASM 文件</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> globalThis<span class="token punctuation">.</span>WebAssembly<span class="token punctuation">.</span><span class="token function">compileStreaming</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;release.wasm&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码说明</strong>​</p><p>1.instantiate 函数：该函数负责加载和实例化 WebAssembly 模块。它还通过 Object.setPrototypeOf 将导出的模块调整为带有 offset 属性的对象，这样可以更方便地进行访问。</p><p>​2.判断 Node.js 或 Bun 环境：isNodeOrBun 判断当前环境是否为 Node.js 或 Bun。对于 Node.js 环境，使用 node:fs/promises 读取 WASM 文件，对于浏览器环境，使用 fetch API 加载 WASM 文件。</p><p>​3.WASM 模块加载：instantiate 函数会异步加载并实例化 WASM 模块，并返回一个适配后的模块对象。对于浏览器环境，compileStreaming 方法可以直接通过 fetch 加载和编译 WASM 文件；而在 Node.js 或 Bun 环境中，使用 readFile 方法来读取文件并进行编译。​</p><h2 id="项目实践​" tabindex="-1"><a class="header-anchor" href="#项目实践​" aria-hidden="true">#</a> 项目实践​</h2><p>在我的项目中，我曾经使用 WebAssembly 来优化图像处理和音视频编辑功能。例如，在处理复杂的图像滤镜或进行高效的音视频数据转换时，WebAssembly 提供了明显优于 JavaScript 的性能，特别是在大量数据处理时。​在实际应用中，我们使用了 Rust 语言编写高效的图像处理库，并将其编译成 WebAssembly。这样，图像渲染和转换的速度得到了大幅提升，浏览器端的响应时间显著减少，从而提供了更加流畅的用户体验。​​</p><h2 id="总体介绍" tabindex="-1"><a class="header-anchor" href="#总体介绍" aria-hidden="true">#</a> 总体介绍</h2><p>​WebAssembly（简称 WASM）是一种二进制格式的代码执行方式，它使得浏览器可以运行高效的低级语言（如 C/C++、Rust、Go 等）编译过来的代码。WebAssembly 的出现解决了传统 JavaScript 性能瓶颈的问题，特别适用于计算密集型任务、图形渲染、音视频处理等场景。它可以在现代浏览器中运行，具有跨平台、性能高、内存安全等优点。</p><p>​WebAssembly 的应用场景非常广泛，包括但不限于：</p><p>​- 高性能计算：适用于复杂的数学运算和数据处理。​</p><ul><li>图形渲染：能够高效处理图形绘制任务。​</li><li>音视频处理：在浏览器中实现音视频的编辑、转码等任务。​</li><li>游戏开发：借助 WebAssembly 提供的高性能支持，可以在浏览器中运行复杂的游戏逻辑。</li></ul><h2 id="在三个场景下的应用" tabindex="-1"><a class="header-anchor" href="#在三个场景下的应用" aria-hidden="true">#</a> 在三个场景下的应用</h2><h3 id="​​基于-assemblyscript-的图形绘制" tabindex="-1"><a class="header-anchor" href="#​​基于-assemblyscript-的图形绘制" aria-hidden="true">#</a> ​​基于 AssemblyScript 的图形绘制</h3><p>​AssemblyScript 是一种将 TypeScript 编译为 WebAssembly 的工具，它使得开发者能够使用熟悉的 JavaScript/TypeScript 语法编写 WebAssembly 模块。在图形绘制领域，AssemblyScript 可以用来编写高效的图像处理和渲染代码。</p><p>以下是一个简单的图形绘制示例：​​AssemblyScript 图形绘制代码示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> width<span class="token operator">:</span> i32 <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> height<span class="token operator">:</span> i32 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> offset<span class="token operator">:</span> i32 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span>x<span class="token operator">:</span> i32<span class="token punctuation">,</span> y<span class="token operator">:</span> i32<span class="token punctuation">,</span> v<span class="token operator">:</span> i32<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> vi <span class="token operator">=</span> <span class="token operator">&lt;</span>i32<span class="token operator">&gt;</span>v<span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">store</span><span class="token generic class-name"><span class="token operator">&lt;</span>i32<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>width <span class="token operator">*</span> y <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">~</span>vi <span class="token operator">&lt;&lt;</span> <span class="token number">24</span> <span class="token operator">|</span> vi <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 计算两个像素之间的距离 */</span>
<span class="token keyword">function</span> <span class="token function">distance</span><span class="token punctuation">(</span>x1<span class="token operator">:</span> i32<span class="token punctuation">,</span> y1<span class="token operator">:</span> i32<span class="token punctuation">,</span> x2<span class="token operator">:</span> f32<span class="token punctuation">,</span> y2<span class="token operator">:</span> f32<span class="token punctuation">)</span><span class="token operator">:</span> f32 <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dx <span class="token operator">=</span> <span class="token operator">&lt;</span>f32<span class="token operator">&gt;</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">;</span>
  <span class="token keyword">let</span> dy <span class="token operator">=</span> <span class="token operator">&lt;</span>f32<span class="token operator">&gt;</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">;</span>
  <span class="token keyword">return</span> Mathf<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 每一帧的更新 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>tick<span class="token operator">:</span> f32<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token operator">&lt;</span>f32<span class="token operator">&gt;</span>width<span class="token punctuation">;</span>
  <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token operator">&lt;</span>f32<span class="token operator">&gt;</span>height<span class="token punctuation">;</span>
  <span class="token keyword">let</span> hw <span class="token operator">=</span> w <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
      hh <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cx1 <span class="token operator">=</span> <span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>tick <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> hw <span class="token operator">*</span> <span class="token number">0.3</span> <span class="token operator">+</span> hw<span class="token punctuation">,</span>
      cy1 <span class="token operator">=</span> <span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> hh <span class="token operator">*</span> <span class="token number">0.3</span> <span class="token operator">+</span> hh<span class="token punctuation">,</span>
      cx2 <span class="token operator">=</span> <span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>tick <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>tick <span class="token operator">+</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> hw <span class="token operator">*</span> <span class="token number">0.3</span> <span class="token operator">+</span> hw<span class="token punctuation">,</span>
      cy2 <span class="token operator">=</span> <span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>tick <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> Mathf<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>tick <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> hh <span class="token operator">*</span> <span class="token number">0.3</span> <span class="token operator">+</span> hh<span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">&lt;</span>f32<span class="token operator">&gt;</span><span class="token number">48</span> <span class="token operator">/</span> Mathf<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Mathf<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>
        Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cx1<span class="token punctuation">,</span> cy1<span class="token punctuation">)</span> <span class="token operator">*</span> res<span class="token punctuation">)</span> <span class="token operator">+</span>
        Mathf<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cx2<span class="token punctuation">,</span> cy2<span class="token punctuation">)</span> <span class="token operator">*</span> res<span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">!=</span> width<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>y <span class="token operator">!=</span> height<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 调整屏幕大小时重新计算内存 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resize</span><span class="token punctuation">(</span>w<span class="token operator">:</span> i32<span class="token punctuation">,</span> h<span class="token operator">:</span> i32<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  width <span class="token operator">=</span> w<span class="token punctuation">;</span>
  height <span class="token operator">=</span> h<span class="token punctuation">;</span>
  <span class="token keyword">let</span> needed <span class="token operator">=</span> <span class="token operator">&lt;</span>i32<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>w <span class="token operator">*</span> h <span class="token operator">*</span> <span class="token generic-function"><span class="token function">sizeof</span><span class="token generic class-name"><span class="token operator">&lt;</span>i32<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> actual <span class="token operator">=</span> memory<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>needed <span class="token operator">&gt;</span> actual<span class="token punctuation">)</span> memory<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span>needed <span class="token operator">-</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTML 和 JavaScript 代码（浏览器端）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span>
      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span>
      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> #aff</span><span class="token punctuation">&quot;</span></span></span>
    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> exports <span class="token keyword">from</span> <span class="token string">&quot;./build/release.js&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token number">0.012</span><span class="token punctuation">;</span>
      <span class="token comment">// 放大计算以加速图像生成</span>
      <span class="token keyword">const</span> upscaleFactor <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> image<span class="token punctuation">;</span>
      <span class="token comment">// 处理屏幕大小变化</span>
      <span class="token keyword">function</span> <span class="token function">onresize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        width <span class="token operator">=</span> <span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> upscaleFactor<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
        height <span class="token operator">=</span> <span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>offsetHeight <span class="token operator">/</span> upscaleFactor<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
        image <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createImageData</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        exports<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">onresize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>onresize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 更新图像</span>
      <span class="token keyword">var</span> tick <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
        exports<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tick <span class="token operator">+=</span> step<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>data<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span>
            exports<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span>
            exports<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
            width <span class="token operator">*</span> height
          <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该示例中，AssemblyScript 被用来进行图形渲染，每一帧图像通过 WebAssembly 更新并显示在 HTML5 的 <code>&lt;canvas&gt;</code> 元素上。</p><h3 id="​​基于-ffmpeg-webassembly-的视频转码应用" tabindex="-1"><a class="header-anchor" href="#​​基于-ffmpeg-webassembly-的视频转码应用" aria-hidden="true">#</a> ​​基于 FFmpeg WebAssembly 的视频转码应用</h3><p>​FFmpeg 是一个强大的开源多媒体框架，可以用来处理视频、音频、字幕等数据。在 WebAssembly 环境下，FFmpeg 可以被编译为 WebAssembly 模块，从而在浏览器中进行视频处理。​​</p><p>简单的 FFmpeg 视频转码命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./ffmpeg <span class="token parameter variable">-i</span> ffmpeg.mp4 <span class="token parameter variable">-vf</span> <span class="token assign-left variable">drawtext</span><span class="token operator">=</span>fontfile<span class="token operator">=</span>/usr/share/fonts/arial.ttf:text<span class="token operator">=</span><span class="token string">&#39;简单的 FFmpeg 视频转码命令&#39;</span>:x<span class="token operator">=</span><span class="token number">100</span>:y<span class="token operator">=</span><span class="token number">100</span>:fontsize<span class="token operator">=</span><span class="token number">46</span>:fontcolor<span class="token operator">=</span>red output.mp4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>WebAssembly 使用示例：React 中的 FFmpeg 转码应用</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FFmpeg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@ffmpeg/ffmpeg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchFile<span class="token punctuation">,</span> toBlobURL <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@ffmpeg/util&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loaded<span class="token punctuation">,</span> setLoaded<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ffmpegRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> videoRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> messageRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> baseURL <span class="token operator">=</span> <span class="token string">&quot;https://unpkg.com/@ffmpeg/core@0.12.2/dist/umd&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ffmpeg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FFmpeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ffmpegRef<span class="token punctuation">.</span>current <span class="token operator">=</span> ffmpeg<span class="token punctuation">;</span>
    <span class="token keyword">await</span> ffmpeg<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      coreURL<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">toBlobURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/ffmpeg-core.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      wasmURL<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">toBlobURL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/ffmpeg-core.wasm</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;application/wasm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setLoaded</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">transcode</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ffmpeg <span class="token operator">=</span> ffmpegRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
    <span class="token keyword">await</span> ffmpeg<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>
      <span class="token string">&quot;input.webm&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">await</span> <span class="token function">fetchFile</span><span class="token punctuation">(</span><span class="token string">&quot;https://raw.githubusercontent.com/ffmpegwasm/testdata/master/Big_Buck_Bunny_180_10s.webm&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> ffmpeg<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>
      <span class="token string">&quot;arial.ttf&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">await</span> <span class="token function">fetchFile</span><span class="token punctuation">(</span><span class="token string">&quot;https://raw.githubusercontent.com/ffmpegwasm/testdata/master/arial.ttf&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> ffmpeg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token string">&quot;-i&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;input.webm&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;-vf&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;drawtext=text=&#39;heyi@miaoma&#39;:fontfile=/arial.ttf:y=200:x=w-mod(max(t,0)*(w+tw)/20,(w+tw)):fontcolor=ffcc00:fontsize=40:shadowx=2:shadowy=2&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;output.mp4&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> ffmpeg<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;output.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>videoRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    videoRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>buffer<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;video/mp4&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> loaded <span class="token operator">?</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>videoRef<span class="token punctuation">}</span></span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>transcode<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Transcode webm to mp4 with text</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>messageRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Open Developer Tools (Ctrl+Shift+I) to View Logs</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>load<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Load ffmpeg-core (~31 MB)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，使用 FFmpeg WebAssembly 实现了一个简单的转码应用，将视频格式从 webm 转换为 mp4 并添加文本水印。​</p><h3 id="​rust-webassembly-通过-wasm-pack-构建示例" tabindex="-1"><a class="header-anchor" href="#​rust-webassembly-通过-wasm-pack-构建示例" aria-hidden="true">#</a> ​Rust + WebAssembly 通过 wasm-pack 构建示例</h3><p>​Rust 提供了高性能的系统编程能力，并且可以通过 wasm-pack 工具将 Rust 代码编译成 WebAssembly 模块。使用 WebAssembly 可以让开发者利用 Rust 的优势，在浏览器端实现高效的功能。</p><p>​简要介绍 Rust 与 WebAssembly 的结合：</p><p>​- 使用 wasm-pack 工具将 Rust 编译成 WebAssembly 文件。 ​- 将生成的 .wasm 文件加载到浏览器中并与 JavaScript 交互。​</p><p>构建步骤：</p><p>​1.安装 Rust 和 wasm-pack。 ​2.使用 wasm-pack build 构建 Rust 项目并生成 WebAssembly 文件。​ 3.在前端应用中使用 wasm-bindgen 将 Rust 模块暴露给 JavaScript。</p><h2 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计" aria-hidden="true">#</a> 架构设计</h2><p>Rust + WebAssembly + React 架构，其中主要优势在于：​​</p><ol><li>性能优势：Rust 编译为 WASM 后，在复杂 3D/WebGL/大数据渲染场景比纯 JS 快 5-10 倍 ​2. 内存安全：Rust 的所有权系统避免内存泄漏 ​3. 跨平台：同一套代码可运行在 Web 和原生环境</li></ol><h3 id="从零开始完整流程" tabindex="-1"><a class="header-anchor" href="#从零开始完整流程" aria-hidden="true">#</a> 从零开始完整流程</h3><p><strong>环境安装 (MacOS)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 Rust 工具链​</span>
<span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">&#39;=https&#39;</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> sh​

<span class="token comment"># 安装 wasm-pack​</span>
<span class="token function">curl</span> https://rustwasm.github.io/wasm-pack/installer/init.sh <span class="token parameter variable">-sSf</span> <span class="token operator">|</span> sh​

<span class="token comment"># 安装 Node.js (推荐使用 nvm)​</span>
brew <span class="token function">install</span> nvm​
nvm <span class="token function">install</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建 Rust WASM</strong></p><p>项目​​也可以使用 wasm-pack 来进行初始化【推荐】，完整流程：</p><ol><li>使用 rustup 安装 rust。​</li><li>安装 wasm-pack。 ​3. 运行 wasm-pack new rust-renderer。 ​4. CD rust-renderer ​5. 运行 wasm-pack build --target web。 ​6. 此工具在 pkg 目录中生成文件 ​7. 导入它：import init， { greet } from “./pkg/rust-renderer.js”，初始化它：await init（），然后使用它：greet（）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在项目目录中​</span>
<span class="token builtin class-name">cd</span> /Users/rust-renderer-demo

​cargo new <span class="token parameter variable">--lib</span> rust-renderer​
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置 Cargo.toml</strong></p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;rust-renderer&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">&quot;2021&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span>
<span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cdylib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rlib&quot;</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">wasm-bindgen</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2&quot;</span>
<span class="token key property">web-sys</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.3&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;Document&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Element&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;HtmlElement&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Window&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;HtmlCanvasElement&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;CanvasRenderingContext2d&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实现核心渲染逻辑</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">web_sys<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">CanvasRenderingContext2d</span><span class="token punctuation">,</span> <span class="token class-name">HtmlCanvasElement</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">draw_mandelbrot</span><span class="token punctuation">(</span>canvas_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> max_iter<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> document <span class="token operator">=</span> <span class="token namespace">web_sys<span class="token punctuation">::</span></span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">get_element_by_id</span><span class="token punctuation">(</span>canvas_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> canvas<span class="token punctuation">:</span> <span class="token class-name">HtmlCanvasElement</span> <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">dyn_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    canvas<span class="token punctuation">.</span><span class="token function">set_width</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    canvas<span class="token punctuation">.</span><span class="token function">set_height</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> ctx <span class="token operator">=</span> canvas
        <span class="token punctuation">.</span><span class="token function">get_context</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">dyn_into</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">CanvasRenderingContext2d</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 高性能分形渲染算法</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>width <span class="token punctuation">{</span>
        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>height <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> zx <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> zy <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> cx <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> width <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.5</span> <span class="token operator">-</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> cy <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> height <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">-</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            
            <span class="token keyword">while</span> zx <span class="token operator">*</span> zx <span class="token operator">+</span> zy <span class="token operator">*</span> zy <span class="token operator">&lt;</span> <span class="token number">4.0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> max_iter <span class="token punctuation">{</span>
                <span class="token keyword">let</span> tmp <span class="token operator">=</span> zx <span class="token operator">*</span> zx <span class="token operator">-</span> zy <span class="token operator">*</span> zy <span class="token operator">+</span> cx<span class="token punctuation">;</span>
                zy <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> zx <span class="token operator">*</span> zy <span class="token operator">+</span> cy<span class="token punctuation">;</span>
                zx <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token keyword">if</span> i <span class="token operator">==</span> max_iter <span class="token punctuation">{</span>
                <span class="token string">&quot;#000&quot;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token operator">&amp;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;#{:02x}{:02x}{:02x}&quot;</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">6</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            ctx<span class="token punctuation">.</span><span class="token function">set_fill_style</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">JsValue</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctx<span class="token punctuation">.</span><span class="token function">fill_rect</span><span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> y <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构建 WASM 包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> rust-renderer​

wasm-pack build <span class="token parameter variable">--target</span> web <span class="token parameter variable">--release</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前端集成</strong></p><p>​在前端应用中集成以上 pack，只需要导入对应产物文件，调用方法即可</p><p>这个架构已在千万级数据可视化项目中验证，相比纯 JavaScript 实现，性能提升显著，特别是在复杂计算和渲染场景下。可以根据具体需求扩展 WebGL 支持或添加更多并行计算功能。</p><h3 id="十亿行数据表渲染优化终极方案" tabindex="-1"><a class="header-anchor" href="#十亿行数据表渲染优化终极方案" aria-hidden="true">#</a> 十亿行数据表渲染优化终极方案</h3>`,79)]))}const i=s(e,[["render",o],["__file","Webassembly.html.vue"]]);export{i as default};
