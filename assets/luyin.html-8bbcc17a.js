import{_ as p,r as e,o,c,e as s,a,b as i,d as l}from"./app-f5876168.js";const u={},r={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/AudioContext/createMediaStreamSource",target:"_blank",rel:"noopener noreferrer"};function k(d,n){const t=e("ExternalLinkIcon");return o(),c("div",null,[n[1]||(n[1]=s(`<h1 id="录音与压缩编码" tabindex="-1"><a class="header-anchor" href="#录音与压缩编码" aria-hidden="true">#</a> 录音与压缩编码</h1><h2 id="录制音频数据" tabindex="-1"><a class="header-anchor" href="#录制音频数据" aria-hidden="true">#</a> 录制音频数据</h2><p><strong>getUserMedia：</strong></p><p>录制音频的音源即我们的麦克风设备. 我们需要使用 <code>navigator.mediaDevices.getUserMedia()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    _this<span class="token punctuation">.</span><span class="token function">initRecorder</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
    <span class="token comment">// Object.assign(obj, r)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&#39;连接 audoi 出错&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是第一次调用, 浏览器会弹框提示麦克风授权:</p><p>成功后会得到一个媒体流对象(MediaStream ).</p><p><strong>AudioContext:</strong></p><p>在有了 MediaStream 后, 我们需要使用 AudioContext 对其进行进一步的处理.</p><p>AudioContext 的理念是使用不同的 AudioNode 对数据进行不同的处理. 不同的 AudioNode 承担不同的功能. 数据在不同的 AudioNode 直接可以进行流转. 这有点类似于管道, 数据流经不同的管道, 被进行了相应的处理.</p><p><strong>createMediaStreamSource:</strong></p>`,11)),a("p",null,[a("a",r,[n[0]||(n[0]=i("文档")),l(t)])]),n[2]||(n[2]=s(`<p>拿到 <code>MediaStream</code> 的第一步是通过它来创建一个 <code>MediaStreamAudioSourceNode </code> 对象.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> audioContext <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mediaNode <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createMediaStreamSource</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时已经可以播放我们录制的数据, 但是我们需要拿到录制的音频数据, 所以还需要下一步处理:</p><p><strong>createScriptProcessor:</strong></p><p>我们需要创建一个 jsProcessorNode, 然后把之前的 mediaNode 连接起来.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> audioContext <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>AudioContext <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitAudioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mediaNode <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createMediaStreamSource</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> jsNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createJSNode</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
mediaNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
jsNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 以下为 createJSNode 的代码</span>
<span class="token function">createJSNode</span><span class="token punctuation">(</span><span class="token parameter">audioContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// createJavaScriptNode已被废弃</span>
  <span class="token keyword">let</span> creator <span class="token operator">=</span> audioContext<span class="token punctuation">.</span>createScriptProcessor <span class="token operator">||</span> audioContext<span class="token punctuation">.</span>createJavaScriptNode<span class="token punctuation">;</span>
  creator <span class="token operator">=</span> <span class="token function">creator</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">creator</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了一个 ScriptProcessor 对象, 把缓冲大小设置为 4096 个 byte, 单声道输入和输出.</p><p>接下来我们就可以通过 <code>audioprocess </code> 事件, 拿到左声道 pcm 数据.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jsNode<span class="token punctuation">.</span><span class="token function-variable function">onaudioprocess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// getChannelData 返回 Float32 Array 类型的 pcm 数据</span>
    <span class="token keyword">let</span> buf <span class="token operator">=</span> ev<span class="token punctuation">.</span>inputBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="压缩与编码" tabindex="-1"><a class="header-anchor" href="#压缩与编码" aria-hidden="true">#</a> 压缩与编码</h2><p>我们采集到的了 pcm 数据, 这个时候它还是 32 位浮点数.</p><p>我们以把音频数据传输给 nlp 进行语音识别为例, 看看如何把录制的音频进行压缩与编码.</p><p>首先我们看看 nlp 接收的音频文件的要求: 16k 采样率, 16 位深. 单声道. pcm 编码.</p><p>要了解这些概念, 我们需要先了解一下音频的基本参数与术语:</p><h3 id="声音" tabindex="-1"><a class="header-anchor" href="#声音" aria-hidden="true">#</a> 声音</h3><p>声音以一种波的形式存在. 既然是一种波, 就会有两个参数: 频率和振幅.</p><p>人耳听到的频率范围大概在: 20Hz-20kHz. 低频声音沉闷, 高频尖锐.</p><p>振幅标示声音大小.</p><h3 id="数字信号与模拟信号" tabindex="-1"><a class="header-anchor" href="#数字信号与模拟信号" aria-hidden="true">#</a> 数字信号与模拟信号</h3><p>麦克风会把声音转换成电信号, 也就是感应电流的大小. 因为声波会有周期和振幅. 所以电流在周期内也会有大小变化.</p><p>这种变化是连续的. 如果我们记录下来后可能会类似上图, 我们通过感应电流的变化, 模拟了声波的样子.</p><p>这种模拟信号计算机没法处理. 需要通过转换器把电信号转换成 bit 串( 0,1 标示的二进制).</p><p>这个 bit 串就是二进制数据流.</p><p>它的处理方式就是对模拟信号进行采样. 既然是对一种波进行采样, 就会涉及到采样频率和采样深度.</p><p>频率意味着我们会在一秒钟内采集多少个点, 而深度意味着能不能精细的还原振幅变化.</p><h3 id="采样率" tabindex="-1"><a class="header-anchor" href="#采样率" aria-hidden="true">#</a> 采样率</h3><p>对模拟信号的采样频率就是采样率. 在Chrome中, 输入采样率是 48kHz</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>sampleRate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 48000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="采样位数" tabindex="-1"><a class="header-anchor" href="#采样位数" aria-hidden="true">#</a> 采样位数</h3><p>我们得到的是[-1,1]的32位浮点数, 可以把振幅量的表示有 2^32 种变化.</p><p>采样位数越大, 解析度会越高. 更能还原声音的真实.</p><h3 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h3><p>我们之前拿到的buf就是采样到的一帧音频数据:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jsNode<span class="token punctuation">.</span><span class="token function-variable function">onaudioprocess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// getChannelData 返回 Float32 Array 类型的 pcm 数据</span>
  <span class="token keyword">let</span> buf <span class="token operator">=</span> ev<span class="token punctuation">.</span>inputBuffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log(buf);</span>
  
  <span class="token keyword">let</span> vol <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token comment">// 压缩成16k</span>
  <span class="token keyword">let</span> compressData <span class="token operator">=</span> <span class="token function">compress</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> audioContext<span class="token punctuation">.</span>sampleRate<span class="token punctuation">,</span> <span class="token number">16000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> pcm <span class="token operator">=</span> <span class="token function">encodePCM</span><span class="token punctuation">(</span>compressData<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> littleEdian<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>process <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>pcm<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> vol<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩" aria-hidden="true">#</a> 压缩</h3><p>首先是压缩, 我们采集到的频率是 48K, nlp 使用的是 16k, 我们需要先把 buf 扔给 compress 函数进行处理, 转换成 16k,</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 压缩单声道数据到 16k</span>
<span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> inputSampleRate<span class="token punctuation">,</span> outputSampleRate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 压缩，根据采样率进行压缩</span>
  <span class="token keyword">let</span> rate <span class="token operator">=</span> inputSampleRate <span class="token operator">/</span> outputSampleRate<span class="token punctuation">;</span>
  <span class="token keyword">let</span> compression <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">let</span> length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">/</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 循环间隔 compression 位取一位数据</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取整是因为存在比例不是整数的情况</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
    index<span class="token operator">++</span><span class="token punctuation">;</span>
    
    j <span class="token operator">+=</span> compression<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回压缩后的一维数据</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理的思路还是很简单的. 既然是每秒有 48k 个数据, 那么我们扔掉其中的一部分, 只剩下 16k 个数据就行了. 只要扔得均匀些即可.</p><p>按照我们之前设置的缓冲区大小 4096, 那么buf的数据量就是 4096 个. 这个时候我们每隔 48/16 个元素就保留一个.</p><p>这个时候, 4096 个数据就会剩下 1365 个.</p><h3 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h3><p>目前我们的数据是 [1-,1] 的32位浮点数. 此时我们需要编码成pcm的格式. 并且是16位. 由于我们是单声道, 所以不用左右交替拼接声道的数据.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">encodePCM</span><span class="token punctuation">(</span><span class="token parameter">bytes<span class="token punctuation">,</span> sampleBits<span class="token punctuation">,</span> littleEdian</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  dataLength <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token punctuation">(</span>sampleBits <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>dataLength<span class="token punctuation">)</span><span class="token punctuation">,</span>
  data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> offset <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 16位的划分的是2^16=65536份，范围是-32768到32767</span>
    <span class="token comment">// 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。</span>
    data<span class="token punctuation">.</span><span class="token function">setInt16</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> s <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> s <span class="token operator">*</span> <span class="token number">0x8000</span> <span class="token operator">:</span> s <span class="token operator">*</span> <span class="token number">0x7FFF</span><span class="token punctuation">,</span> littleEdian<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先把数据转换成在16位的范围 [-32768,32767], 这是十进制的表示.</p><p>此时我们使用 dataView 对象设置带符号的 16 位二进制整数, 小端编码, 此时 dataview 会把自动处理大小端, 进制位和符号位, 存储到 arraybuffer 中.</p><p>此时的 arraybuff 就是我们需要传给 nlp 的数据, 再把 arraybuffer 转换成 blob 对象传给 nlp 即可.</p>`,46))])}const m=p(u,[["render",k],["__file","luyin.html.vue"]]);export{m as default};
