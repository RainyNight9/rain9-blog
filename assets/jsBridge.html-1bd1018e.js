import{_ as a,o as s,c as t,e}from"./app-f5876168.js";const p={};function i(o,n){return s(),t("div",null,n[0]||(n[0]=[e(`<h1 id="jsbridge" tabindex="-1"><a class="header-anchor" href="#jsbridge" aria-hidden="true">#</a> JSBridge</h1><h2 id="什么是-jsbridge" tabindex="-1"><a class="header-anchor" href="#什么是-jsbridge" aria-hidden="true">#</a> 什么是 JSBridge</h2><p>主要是给 JavaScript 提供调用 Native 功能的接口，让混合开发中的前端部分可以方便地使用 Native 的功能（例如：地址位置、摄像头）。</p><p>而且 JSBridge 的功能不止调用 Native 功能这么简单宽泛。实际上，JSBridge 就像其名称中的 Bridge 的意义一样，是 Native 和非 Native 之间的桥梁，它的核心是构建 Native 和非 Native 间消息通信的通道，而且这个通信的通道是双向的。</p><p><strong>双向通信的通道:</strong></p><ul><li>JS 向 Native 发送消息: 调用相关功能、通知 Native 当前 JS 的相关状态等。</li><li>Native 向 JS 发送消息: 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等</li></ul><p><em><strong>整个 JSBridge 是分层的：1、接口层，2、API层的原理，3、最底层的原理</strong></em></p><p><em><strong>最底层的原理其实就是浏览器暴露给原生的句柄，在不同平台上，浏览器暴露给原生句柄的方式各不相同：ios有n种， 安卓有n种，pc有n种</strong></em></p><h2 id="android、ios-原生和-h5-的基本通信机制" tabindex="-1"><a class="header-anchor" href="#android、ios-原生和-h5-的基本通信机制" aria-hidden="true">#</a> Android、iOS 原生和 H5 的基本通信机制</h2><p>在 Hybrid APP 中，原生与 H5 的交互方式在 Android 和 iOS 上的实现是有异同的, 原因是 Android、iOS 的通信机制有所区别，下面介绍原生和 H5 相互调用的方法。</p><p><strong>Android 端：</strong></p><p>Native 调 JS：</p><p>4.4版本之前</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// mWebView = new WebView(this); // 即当前 webview 对象        </span>
mWebView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">&quot;javascript: 方法名(&#39;参数,需要转为字符串&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// ui线程中运行</span>
<span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  @Override 
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      mWebView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">&quot;javascript: 方法名(&#39;参数,需要转为字符串&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>Activity名<span class="token punctuation">.</span>this<span class="token punctuation">,</span> <span class="token string">&quot;调用方法...&quot;</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.4 以后(包括 4.4)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//异步执行JS代码,并获取返回值  </span>
mWebView<span class="token punctuation">.</span><span class="token function">evaluateJavascript</span><span class="token punctuation">(</span><span class="token string">&quot;javascript: 方法名(&#39;参数,需要转为字符串&#39;)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ValueCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  @Override
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceiveValue</span><span class="token punctuation">(</span><span class="token parameter">String value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//这里的value即为对应JS方法的返回值</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，Native 用 H5 页面中的 JS 方法，有如下特点</p><ul><li>4.4 之前 Native 通过 <code>loadUrl</code> 来调用 JS 方法，只能让某个 JS 方法执行，但是无法获取该方法的返回值</li><li>4.4 之后，通过 <code>evaluateJavascript</code> 异步调用 JS 方法，并且能在 <code>onReceiveValue</code> 中拿到返回值</li><li>不适合传输大量数据(大量数据建议用接口方式获取)</li><li><code>mWebView.loadUrl(&quot;javascript: 方法名(&#39;参数,需要转为字符串&#39;)&quot;)</code>;函数需在 UI 线程运行，因为 mWebView 为 UI 控件(但是有一个坏处是会阻塞 UI 线程)</li></ul><p>JS 调 Native</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>WebSettings <span class="token operator">=</span> mWebView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// Android 容器允许 JS 脚本，必须要</span>
webSettings<span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Android 容器设置侨连对象</span>
mWebView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token function">getJSBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;JSBridge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Android中JSBridge的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Android4.2 版本以上，本地方法要加上注解 @JavascriptInterface，否则会找不到方法。</span>
<span class="token keyword">private</span> Object <span class="token function">getJSBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    Object insertObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        @JavascriptInterface
        <span class="token keyword">public</span> String <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        @JavascriptInterface
        <span class="token keyword">public</span> String <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token parameter">final String param</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token string">&quot;foo2:&quot;</span> <span class="token operator">+</span> param<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> insertObj<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Html 中 JS 调用原生的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 调用方法一</span>
window<span class="token punctuation">.</span>JSBridge<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回:&#39;foo&#39;</span>
<span class="token comment">// 调用方法二</span>
window<span class="token punctuation">.</span>JSBridge<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回:&#39;foo2:test&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，Native 中通过 addJavascriptInterface 添加暴露出来的 JSBridge 对象，然后再该对象内部声明对应的 API 方法，有如下特点:</p><ul><li>在 Android4.2 以上(api17 后),暴露的 api 要加上注解 @JavascriptInterface，否则会找不到方法。</li><li>在 api17 以前，addJavascriptInterface 有风险，hacker 可以通过反编译获取 Native 注册的 Js 对象，然后在页面通过反射 Java 的内置 静态类，获取一些敏感的信息和破坏 <ul><li>所以,也就是为什么 Android 中也会使用 JSBridge 来进行交互,而不是 addJavascriptInterface 直接暴露 api</li></ul></li><li>JS 能调用到已经暴露的 api, 并且能得到相应返回值.</li></ul><p><strong>iOS端:</strong></p><p>Native 调 JS</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以取得JS函数执行的返回值</span>
<span class="token comment">// 方法必须是Html页面绑定在最顶层的 window 上对象的</span>
<span class="token comment">// 如 window.top.foo</span>
<span class="token comment">// Swift</span>
webview<span class="token punctuation">.</span><span class="token function">stringByEvaluatingJavaScriptFromString</span><span class="token punctuation">(</span><span class="token string">&quot;方法名(参数)&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// OC</span>
<span class="token punctuation">[</span>webView stringByEvaluatingJavaScriptFromString<span class="token operator">:</span>@<span class="token string">&quot;方法名(参数);&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，Native 通过 stringByEvaluatingJavaScriptFromString 调用 Html 绑定在 window 上的函数，有如下特点</p><ul><li>Native 调用 JS 方法时,能拿到 JS 方法的返回值</li><li>不适合传输大量数据(大量数据建议用接口方式获取)</li></ul><p>JS 调 Native</p><p>引入官方的库文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>#<span class="token keyword">import</span> <span class="token operator">&lt;</span>JavaScriptCore<span class="token operator">/</span>JavaScriptCore<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Native 注册 api 函数(OC)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webview加载完毕后设置一些js接口</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>webViewDidFinishLoad<span class="token operator">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView<span class="token punctuation">{</span>
    <span class="token punctuation">[</span>self hideProgress<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>self setJSInterface<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setJSInterface<span class="token punctuation">{</span>
     
    JSContext <span class="token operator">*</span>context <span class="token operator">=</span><span class="token punctuation">[</span>_wv valueForKeyPath<span class="token operator">:</span>@<span class="token string">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     
    <span class="token comment">// 注册名为foo的api方法</span>
    context<span class="token punctuation">[</span>@<span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         
        <span class="token comment">// 获取参数</span>
        NSArray <span class="token operator">*</span>args <span class="token operator">=</span> <span class="token punctuation">[</span>JSContext currentArguments<span class="token punctuation">]</span><span class="token punctuation">;</span>
        NSString <span class="token operator">*</span>title <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token operator">:</span>@<span class="token string">&quot;%@&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>args objectAtIndex<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 做一些自己的逻辑</span>
        <span class="token comment">// 返回一个值  &#39;foo:&#39;+title</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token operator">:</span>@<span class="token string">&quot;foo:%@&quot;</span><span class="token punctuation">,</span> title<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Html 中 JS 调用原生的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 调用方法,用top是确保调用到最顶级,因为iframe要用top才能拿到顶级</span>
window<span class="token punctuation">.</span>top<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回:&#39;foo:test&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，Native 中通过引入官方提供的 JavaScriptCore 库(iOS7 中出现的)，然后可以将 api 绑定到J SContext 上(然后 Html 中 JS 默认通过 window.top.***可调用)。有如下特点:</p><ul><li>iOS7 才出现这种方式，在这之前，js 无法直接调用 Native，只能通过 JSBridge 方式简介调用</li><li>JS 能调用到已经暴露的 api，并且能得到相应返回值</li><li>iOS 原生本身是无法被 JS 调用的，但是通过引入官方提供的第三方 &quot;JavaScriptCore&quot;，即可开放 api 给 JS 调用</li></ul><h2 id="jsbridge-原理" tabindex="-1"><a class="header-anchor" href="#jsbridge-原理" aria-hidden="true">#</a> JSBridge 原理</h2><p>JSBridge 是广为流行的 Hybrid 开发中 JS 和 Native 一种通信方式，各大公司的应用中都有用到这种方法</p><p>简单的说，JSBridge 就是定义 Native 和 JS 的通信，Native 只通过一个固定的桥对象调用 JS，JS 也只通过固定的桥对象调用 Native。</p><h3 id="_1、javascript-调用-native-的方式" tabindex="-1"><a class="header-anchor" href="#_1、javascript-调用-native-的方式" aria-hidden="true">#</a> 1、JavaScript 调用 Native 的方式</h3><p>主要有两种：注入 API 和 拦截 URL SCHEME。</p><h4 id="_1-1-注入api" tabindex="-1"><a class="header-anchor" href="#_1-1-注入api" aria-hidden="true">#</a> 1.1 注入API</h4><p>注入 API 方式的主要原理是，通过 WebView 提供的接口，向 JavaScript 的环境（window）中注入对象或者方法，让 JavaScript 调用时，直接执行相应的 Native 代码逻辑，达到 JavaScript 调用 Native 的目的。</p><p>对于 iOS 的 UIWebView，实例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>JSContext <span class="token operator">*</span>context <span class="token operator">=</span> <span class="token punctuation">[</span>uiWebView valueForKeyPath<span class="token operator">:</span>@<span class="token string">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
context<span class="token punctuation">[</span>@<span class="token string">&quot;postBridgeMessage&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">(</span>NSArray<span class="token operator">&lt;</span>NSArray <span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">*</span>calls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Native 逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 前端调用方式：</span>
window<span class="token punctuation">.</span><span class="token function">postBridgeMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 iOS 的 WKWebView 可以用以下方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token keyword">interface</span> <span class="token class-name">WKWebVIewVC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>WKScriptMessageHandler<span class="token operator">&gt;</span>
@implementation WKWebVIewVC
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    WKWebViewConfiguration<span class="token operator">*</span> configuration <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>WKWebViewConfiguration alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    configuration<span class="token punctuation">.</span>userContentController <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>WKUserContentController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    WKUserContentController <span class="token operator">*</span>userCC <span class="token operator">=</span> configuration<span class="token punctuation">.</span>userContentController<span class="token punctuation">;</span>
    <span class="token comment">// 注入对象，前端调用其方法时，Native 可以捕获到</span>
    <span class="token punctuation">[</span>userCC addScriptMessageHandler<span class="token operator">:</span>self name<span class="token operator">:</span>@<span class="token string">&quot;nativeBridge&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    WKWebView wkWebView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>WKWebView alloc<span class="token punctuation">]</span> initWithFrame<span class="token operator">:</span>self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame configuration<span class="token operator">:</span>configuration<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// TODO 显示 WebView</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>userContentController<span class="token operator">:</span><span class="token punctuation">(</span>WKUserContentController <span class="token operator">*</span><span class="token punctuation">)</span>userContentController didReceiveScriptMessage<span class="token operator">:</span><span class="token punctuation">(</span>WKScriptMessage <span class="token operator">*</span><span class="token punctuation">)</span>message <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>message<span class="token punctuation">.</span>name isEqualToString<span class="token operator">:</span>@<span class="token string">&quot;nativeBridge&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">&quot;前端传递的数据 %@: &quot;</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Native 逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// 前端调用方式：</span>
window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>nativeBridge<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-拦截-url-scheme" tabindex="-1"><a class="header-anchor" href="#_1-2-拦截-url-scheme" aria-hidden="true">#</a> 1.2 拦截 URL SCHEME</h4><p>URL SCHEME 是一种类似于 url 的链接，是为了方便 app 直接互相调用设计的，形式和普通的 url 近似，主要区别是 protocol 和 host 一般是自定义的。</p><p>例如: qunarhy://hy/url?url=ymfe.tech，protocol 是 qunarhy，host 则是 hy。</p><p>拦截 URL SCHEME 的主要流程是：</p><ul><li>Web 端通过某种方式（例如 iframe.src）发送 URL Scheme 请求，</li><li>之后 Native 拦截到请求并根据 URL SCHEME（包括所带的参数）进行相关操作。</li></ul><p>在时间过程中，这种方式有一定的缺陷：</p><ul><li>使用 iframe.src 发送 URL SCHEME 会有 url 长度的隐患。 <ul><li>有些方案为了规避 url 长度隐患的缺陷，在 iOS 上采用了使用 Ajax 发送同域请求的方式，并将参数放到 head 或 body 里。这样，虽然规避了 url 长度的隐患，但是 WKWebView 并不支持这样的方式。</li><li>为什么选择 iframe.src 不选择 locaiton.href ？ <ul><li>因为如果通过 location.href 连续调用 Native，很容易丢失一些调用。</li></ul></li></ul></li><li>创建请求，需要一定的耗时，比注入 API 的方式调用同样的功能，耗时会较长。</li></ul><p><strong>因此：JavaScript 调用 Native 推荐使用注入 API 的方式。</strong></p><h3 id="_2-native-调用-javascript-的方式" tabindex="-1"><a class="header-anchor" href="#_2-native-调用-javascript-的方式" aria-hidden="true">#</a> 2. Native 调用 JavaScript 的方式</h3><p>相比于 JavaScript 调用 Native， Native 调用 JavaScript 较为简单，直接执行拼接好的 JavaScript 代码即可。</p><p>从外部调用 JavaScript 中的方法，因此 JavaScript 的方法必须在全局的 window 上。</p><p>对于 iOS 的 UIWebView，示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> <span class="token punctuation">[</span>uiWebview stringByEvaluatingJavaScriptFromString<span class="token operator">:</span>javaScriptString<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token operator">*</span> javaScriptString为JavaScript 代码串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 iOS 的 WKWebView，示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>wkWebView evaluateJavaScript<span class="token operator">:</span>javaScriptString completionHandler<span class="token operator">:</span>completionHandler<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="jsbridge-接口实现" tabindex="-1"><a class="header-anchor" href="#jsbridge-接口实现" aria-hidden="true">#</a> JSBridge 接口实现</h2><p>从上面的剖析中，可以得知，JSBridge 的接口主要功能有两个：</p><ul><li>调用 Native（给 Native 发消息）</li><li>被 Native 调用（接收 Native 消息）</li></ul><p>在 Native 端配合实现 JSBridge 的 JavaScript 调用 Native 逻辑也很简单，主要的代码逻辑是：</p><p>接收到 JavaScript 消息 =&gt; 解析参数，拿到 bridgeName、data 和 callbackId =&gt; 根据 bridgeName 找到功能方法，以 data 为参数执行 =&gt; 执行返回值和 callbackId 一起回传前端。</p><p>Native 调用 JavaScript 也同样简单，直接自动生成一个唯一的 ResponseId，并存储，然后和 data 一起发送给前端即可。</p><h2 id="jsbridge-的引用" tabindex="-1"><a class="header-anchor" href="#jsbridge-的引用" aria-hidden="true">#</a> JSBridge 的引用</h2><p>对于 JSBridge 的引用，常用有如下两种方式，但各有利弊。</p><h3 id="_1、由-native-端进行注入" tabindex="-1"><a class="header-anchor" href="#_1、由-native-端进行注入" aria-hidden="true">#</a> 1、由 Native 端进行注入</h3><p>注入方式和 Native 调用 JavaScript 类似，直接执行桥的全部代码。</p><p>它的优点是：</p><ul><li>桥的版本很容易与 Native 保持一致，Native 端不用对不同版本的 JSBridge 进行兼容。</li></ul><p>它的缺点是：</p><ul><li>注入时机不确定，需要实现注入失败后重试的机制，保证注入的成功率，同时 JavaScript 端在调用接口时，需要优先判断 JSBridge 是否已经注入成功。</li></ul><h3 id="_2、由-javascript-端引用" tabindex="-1"><a class="header-anchor" href="#_2、由-javascript-端引用" aria-hidden="true">#</a> 2、由 JavaScript 端引用</h3><p>直接与 JavaScript 一起执行。</p><p>它的优点是：</p><ul><li>JavaScript 端可以确定 JSBridge 的存在，直接调用即可。</li></ul><p>它的缺点是：</p><ul><li>如果桥的实现方式有更改，JSBridge 需要兼容多版本的 Native Bridge 或者 Native Bridge 兼容多版本的 JSBridge。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><p>1、https://blog.csdn.net/yuzhengfei7/article/details/93468914</p><p>2、https://blog.csdn.net/u010782846/article/details/91895132</p><p>3、https://juejin.im/post/6844903567560540173</p><p>4、https://zhuanlan.zhihu.com/p/32899522</p><p>5、https://www.cnblogs.com/dailc/p/5931322.html</p>`,92)]))}const l=a(p,[["render",i],["__file","jsBridge.html.vue"]]);export{l as default};
