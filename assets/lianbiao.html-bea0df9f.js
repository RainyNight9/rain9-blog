import{_ as o,r as l,o as c,c as i,a as s,b as a,d as e,e as t}from"./app-f5876168.js";const u={},r={href:"https://github.com/RainyNight9/dataStructure-algorithm/tree/master/04.%E9%93%BE%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},k={id:"_1、141-环形链表",tabindex:"-1"},d={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},v={id:"_2、142-环形链表-ii",tabindex:"-1"},m={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},b={id:"_3、202-快乐数",tabindex:"-1"},w={href:"https://leetcode.cn/problems/happy-number/",target:"_blank",rel:"noopener noreferrer"},y={id:"_4、206-反转链表",tabindex:"-1"},h={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},x={id:"_5、92-反转链表-ii",tabindex:"-1"},f={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},g={id:"_6、25-k-个一组翻转链表",tabindex:"-1"},N={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/",target:"_blank",rel:"noopener noreferrer"},q={id:"_7、61-旋转链表",tabindex:"-1"},L={href:"https://leetcode.cn/problems/rotate-list/",target:"_blank",rel:"noopener noreferrer"},I={id:"_8、24-两两交换链表中的节点",tabindex:"-1"},E={href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"},j={id:"_9、19-删除链表的倒数第-n-个结点",tabindex:"-1"},C={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},K={id:"_10、83-删除排序链表中的重复元素",tabindex:"-1"},R={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},_={id:"_11、82-删除排序链表中的重复元素-ii",tabindex:"-1"},B={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"};function H(S,n){const p=l("ExternalLinkIcon");return c(),i("div",null,[n[35]||(n[35]=s("h1",{id:"链表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),a(" 链表")],-1)),n[36]||(n[36]=s("h2",{id:"基础知识",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基础知识","aria-hidden":"true"},"#"),a(" 基础知识")],-1)),s("p",null,[n[1]||(n[1]=a("相关的一些知识点及代码可见：")),s("a",r,[n[0]||(n[0]=a("链表")),e(p)])]),n[37]||(n[37]=t('<p>链表是一种由一群结点组成顺序的数据结构。在最简单的情况下，每个结点由一个数据和一个指向在顺序中下一个结点的指针（即连接）而组成。</p><ol><li>链表中的每个节点至少包含两部分：数据域 和 指针域</li><li>链表中的每个节点，通过指针域的值，形成线性结构</li><li>查找节点O(n），插入节点O(1)，删除节点O(1)</li><li>不适合快速的定位数据，适合动态的插入和删除数据的应用场景</li></ol><p>实现链表的方式：包括地址、下标(相对地址)、引用。</p><ol><li>传统方法(节点+指针)</li><li>使用数组模拟 <ul><li>指针域和数据域分离</li><li>利用数组存放下标进行索引</li></ul></li></ol><p>链表不适合快速的定位数据，适合动态的插入和删除的应用场景。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ol><li>操作系统内的动态内存分配</li><li>LRU 缓存淘汰算法 <ul><li>LRU = Least Recently Used(近期最少使用)</li><li>vue 的 keep-alive 的实现就是 LRU 缓存淘汰算法</li></ul></li></ol><p>缓存是一种高速的数据结构。缓存其实就是低速设备有效的数据管理手段，缓存是⾼速设备之于低速设备的⼀种称呼。</p><p>设备间存在速度差异，可以通过将使用较多的数据存放在高速区域，而将使用较少的内容存放在相对低速的区域的方式，来对系统进行优化。</p><h2 id="经典算法" tabindex="-1"><a class="header-anchor" href="#经典算法" aria-hidden="true">#</a> 经典算法</h2>',10)),s("h3",k,[n[3]||(n[3]=s("a",{class:"header-anchor",href:"#_1、141-环形链表","aria-hidden":"true"},"#",-1)),n[4]||(n[4]=a(" 1、")),s("a",d,[n[2]||(n[2]=a("141. 环形链表")),e(p)])]),n[38]||(n[38]=t(`<p>思路一：哈希表</p><ul><li>使用哈希表(额外的存储区)存储已经遍历过的节点</li></ul><p>思路二：快慢指针</p><ul><li>使用快慢指针，快指针一次向前2个节点 慢指针一次向前1个节点 <ul><li>有环的链表中，快指针和慢指针最终一定会在环中相遇</li><li>无环的链表中，快指针会率先访问到链表尾，从而终结检测过程</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> head<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> q <span class="token operator">!==</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("h3",v,[n[6]||(n[6]=s("a",{class:"header-anchor",href:"#_2、142-环形链表-ii","aria-hidden":"true"},"#",-1)),n[7]||(n[7]=a(" 2、")),s("a",m,[n[5]||(n[5]=a("142. 环形链表 II")),e(p)])]),n[39]||(n[39]=t(`<p>思路一：哈希表</p><p>思路二：快慢指针</p><ul><li>快指针走的路程是慢指针的2倍 <ul><li>考虑快慢指针第一次相遇的情况(设此时慢指针走的路程为x) <ul><li>指定一个指针p放置在链表头部(p每次向前1个节点)</li><li>再走一个路程为x的长度 <ul><li>慢指针到达了2x的位置</li><li>指针p到达了x的位置</li><li>慢指针和p相遇了 <ul><li>往前回放一下，在环的入口开始，慢指针和p已经相遇了</li><li>慢指针和p重叠走了一段距离</li></ul></li></ul></li></ul></li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> head<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">!==</span> l <span class="token operator">&amp;&amp;</span> q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">===</span><span class="token keyword">null</span> <span class="token operator">||</span> q<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    l <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    q <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    l <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 或者</span>
<span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> head<span class="token punctuation">,</span> q <span class="token operator">=</span> head
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>next<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token keyword">do</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l <span class="token operator">&amp;&amp;</span> q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> q<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
    l <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> q
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("h3",b,[n[9]||(n[9]=s("a",{class:"header-anchor",href:"#_3、202-快乐数","aria-hidden":"true"},"#",-1)),n[10]||(n[10]=a(" 3、")),s("a",w,[n[8]||(n[8]=a("202. 快乐数")),e(p)])]),n[40]||(n[40]=t(`<p>思路一：快慢指针</p><p>转化为判断链表是否有环的问题</p><ol><li>创建一个慢指针，一次走一步，再创建一个快指针，一次走两步。</li><li>当快慢指针相遇，代表形参环路，该数不是快乐数。</li><li>若指针移动过程中，找到了 11，则当前数是一个快乐数。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isHappy</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> n<span class="token punctuation">,</span> q <span class="token operator">=</span> n
    <span class="token keyword">do</span><span class="token punctuation">{</span>
        l <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        q <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!==</span>l <span class="token operator">&amp;&amp;</span> q<span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token keyword">return</span> q <span class="token operator">===</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getNext</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("h3",y,[n[12]||(n[12]=s("a",{class:"header-anchor",href:"#_4、206-反转链表","aria-hidden":"true"},"#",-1)),n[13]||(n[13]=a(" 4、")),s("a",h,[n[11]||(n[11]=a("206. 反转链表")),e(p)])]),n[41]||(n[41]=t(`<p>思路一：迭代反转</p><ul><li>可以使用虚拟头节点来进行头插法</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">(</span>cur <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路二：递归</p><ul><li>一次拆掉一个节点并递归处理剩余的子链表</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("h3",x,[n[15]||(n[15]=s("a",{class:"header-anchor",href:"#_5、92-反转链表-ii","aria-hidden":"true"},"#",-1)),n[16]||(n[16]=a(" 5、")),s("a",f,[n[14]||(n[14]=a("92. 反转链表 II")),e(p)])]),n[42]||(n[42]=t(`<p>思路一：递归</p><ul><li>使用虚拟头结点(dummy head) <ul><li>通常用于链表的首地址有可能改变的情况</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> count  <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> res
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode<span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next
    next<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("h3",g,[n[18]||(n[18]=s("a",{class:"header-anchor",href:"#_6、25-k-个一组翻转链表","aria-hidden":"true"},"#",-1)),n[19]||(n[19]=a(" 6、")),s("strong",null,[s("a",N,[n[17]||(n[17]=a("25. K 个一组翻转链表")),e(p)])])]),n[43]||(n[43]=t(`<p>思路一：递归（困难）</p><ul><li>先判断是否有K个元素，然后对这K个节点进行反转，最后拆装一下首尾部分</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> ret<span class="token punctuation">,</span> cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">,</span> cnt <span class="token operator">=</span> n
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">return</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> tail <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next
    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("h3",q,[n[21]||(n[21]=s("a",{class:"header-anchor",href:"#_7、61-旋转链表","aria-hidden":"true"},"#",-1)),n[22]||(n[22]=a(" 7、")),s("a",L,[n[20]||(n[20]=a("61. 旋转链表")),e(p)])]),n[44]||(n[44]=t(`<p>思路一：迭代</p><ul><li>把整个链表首尾相接，向后走K位后将环拆开</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n<span class="token operator">++</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    k <span class="token operator">%=</span> n
    k <span class="token operator">=</span> n <span class="token operator">-</span> k
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    head <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span> head
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("h3",I,[n[24]||(n[24]=s("a",{class:"header-anchor",href:"#_8、24-两两交换链表中的节点","aria-hidden":"true"},"#",-1)),n[25]||(n[25]=a(" 8、")),s("a",E,[n[23]||(n[23]=a("24. 两两交换链表中的节点")),e(p)])]),n[45]||(n[45]=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类似第 6 题解法，是K = 2的简单情形</span>
<span class="token keyword">function</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> ret<span class="token punctuation">,</span> cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">reverseN</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> head<span class="token punctuation">,</span> cnt <span class="token operator">=</span> n
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">return</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> tail <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">_reverseN</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next
    tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 递归，两两互换</span>
<span class="token keyword">function</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> newHead <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>newHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
    newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head
    <span class="token keyword">return</span> newHead
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("h3",j,[n[27]||(n[27]=s("a",{class:"header-anchor",href:"#_9、19-删除链表的倒数第-n-个结点","aria-hidden":"true"},"#",-1)),n[28]||(n[28]=a(" 9、")),s("a",C,[n[26]||(n[26]=a("19. 删除链表的倒数第 N 个结点")),e(p)])]),n[46]||(n[46]=t(`<p>思路一：快慢指针</p><ul><li>找到前一个节点，删除后调整指针</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> l <span class="token operator">=</span> ret<span class="token punctuation">,</span> q <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">,</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
    l<span class="token punctuation">.</span>next <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("h3",K,[n[30]||(n[30]=s("a",{class:"header-anchor",href:"#_10、83-删除排序链表中的重复元素","aria-hidden":"true"},"#",-1)),n[31]||(n[31]=a(" 10、")),s("a",R,[n[29]||(n[29]=a("83. 删除排序链表中的重复元素")),e(p)])]),n[47]||(n[47]=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head
    <span class="token keyword">let</span> p <span class="token operator">=</span> head
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">===</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> head
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("h3",_,[n[33]||(n[33]=s("a",{class:"header-anchor",href:"#_11、82-删除排序链表中的重复元素-ii","aria-hidden":"true"},"#",-1)),n[34]||(n[34]=a(" 11、")),s("a",B,[n[32]||(n[32]=a("82. 删除排序链表中的重复元素 II")),e(p)])]),n[48]||(n[48]=t(`<p>思路一：快慢指针</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">,</span> l <span class="token operator">=</span> ret<span class="token punctuation">,</span> q
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            q <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next
            <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>val <span class="token operator">===</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next
            l<span class="token punctuation">.</span>next <span class="token operator">=</span> q
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> l<span class="token punctuation">.</span>next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-删除链表中的一个节点" tabindex="-1"><a class="header-anchor" href="#_12-删除链表中的一个节点" aria-hidden="true">#</a> 12. 删除链表中的一个节点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> pre <span class="token operator">=</span> head
  <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next

  <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
      pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
      cur <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      pre <span class="token operator">=</span> cur
      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> head
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-链表中-环的入口节点" tabindex="-1"><a class="header-anchor" href="#_13-链表中-环的入口节点" aria-hidden="true">#</a> 13. 链表中，环的入口节点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> head
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>
      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head

  <span class="token keyword">let</span> slow <span class="token operator">=</span> head
  <span class="token keyword">let</span> fast <span class="token operator">=</span> head
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next
      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next

      <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">===</span>slow<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">let</span> cur <span class="token operator">=</span> head
          <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!==</span> slow<span class="token punctuation">)</span><span class="token punctuation">{</span>
              cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next
              slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> cur
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未完结，敬请期待！</p>`,7))])}const V=o(u,[["render",H],["__file","lianbiao.html.vue"]]);export{V as default};
