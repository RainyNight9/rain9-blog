import{_ as i,o as l,c,e as t}from"./app-f5876168.js";const a={};function o(n,e){return l(),c("div",null,e[0]||(e[0]=[t(`<h1 id="小程序直播" tabindex="-1"><a class="header-anchor" href="#小程序直播" aria-hidden="true">#</a> 小程序直播</h1><h2 id="基本直播能力" tabindex="-1"><a class="header-anchor" href="#基本直播能力" aria-hidden="true">#</a> 基本直播能力</h2><p>目前小程序支持两种格式直播</p><ul><li>flv 格式直播</li><li>rtmp 格式直播</li></ul><p>小程序直播开发要使用到最新的两个组件和两个新接口：</p><ol><li>live-player组件，主要功能是播放。https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html</li><li>wx.createLivePlayerContext() 接口，主要控制 live-player 组件的播放。</li></ol><p>wx.createLivePlayerContext() 会创建 live-player 上下文 LivePlayerContext 对象。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><ul><li><code>string id</code> live-player 组件的 id</li><li><code>Object this</code> 在自定义组件下，当前组件实例的 this，以操作组件内 live-player 组件</li></ul><h3 id="liveplayercontext-方法" tabindex="-1"><a class="header-anchor" href="#liveplayercontext-方法" aria-hidden="true">#</a> LivePlayerContext 方法</h3><ul><li><p><code>LivePlayerContext.play()</code> 播放视频，参数是三个回调函数</p><ul><li><code>success</code> function 否 接口调用成功的回调函数</li><li><code>fail</code> function 否 接口调用失败的回调函数</li><li><code>complete</code> function 否 接口调用结束的回调函数（调用成功、失败都会执行）</li></ul></li><li><p><code>LivePlayerContext.stop()</code> 停止</p><ul><li>success function 否 接口调用成功的回调函数</li><li>fail function 否 接口调用失败的回调函数</li><li>complete function 否 接口调用结束的回调函数（调用成功、失败都会执行）</li></ul></li><li><p><code>LivePlayerContext.mute()</code> 静音</p><ul><li>success function 否 接口调用成功的回调函数</li><li>fail function 否 接口调用失败的回调函数</li><li>complete function 否 接口调用结束的回调函数（调用成功、失败都会执行）</li></ul></li><li><p><code>LivePlayerContext.pause()</code> 暂停</p></li><li><p><code>LivePlayerContext.resume()</code> 恢复</p></li><li><p><code>LivePlayerContext.requestFullScreen(Object object)</code> 进入全屏</p><ul><li>direction number 0 否 设置全屏时的方向 <ul><li>0 正常竖向</li><li>90 屏幕逆时针90度</li><li>-90 屏幕顺时针90度</li></ul></li><li>success function 否 接口调用成功的回调函数</li><li>fail function 否 接口调用失败的回调函数</li><li>complete function 否 接口调用结束的回调函数（调用成功、失败都会执行）</li></ul></li><li><p><code>LivePlayerContext.exitFullScreen()</code> 退出全屏</p></li><li><p><code>LivePlayerContext.exitPictureInPicture()</code> 退出小窗，该方法可在任意页面调用</p></li></ul><h2 id="优网计划额外能力-websocket" tabindex="-1"><a class="header-anchor" href="#优网计划额外能力-websocket" aria-hidden="true">#</a> 优网计划额外能力-websocket</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个 WebSocket 连接</p><ul><li><p>wx.onSocketOpen(function callback) 监听 WebSocket 连接打开事件</p></li><li><p>wx.onSocketMessage(function callback) 监听 WebSocket 接受到服务器的消息事件</p></li><li><p>wx.onSocketError(function callback) 监听 WebSocket 错误事件</p></li><li><p>wx.onSocketClose(function callback) 监听 WebSocket 连接关闭事件</p></li><li><p>wx.closeSocket(Object object) 关闭 WebSocket 连接</p></li></ul><h2 id="直播小程序要注意的地方" tabindex="-1"><a class="header-anchor" href="#直播小程序要注意的地方" aria-hidden="true">#</a> 直播小程序要注意的地方</h2><ul><li>live-player, live-pusher 组件是由客户端创建的原生组件，它的层级是最高的，不能通过 z-index 控制层级。可使用 cover-view cover-image 覆盖在上面。</li></ul>`,17)]))}const s=i(a,[["render",o],["__file","xiaochengxuzhibo.html.vue"]]);export{s as default};
