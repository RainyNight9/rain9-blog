import{_ as a,o as s,c as i,e as t}from"./app-f5876168.js";const p={};function e(l,n){return s(),i("div",null,n[0]||(n[0]=[t(`<h1 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><blockquote><p>简单（1.3-2.1+）</p></blockquote><h3 id="概念题-开发中最常用的概念" tabindex="-1"><a class="header-anchor" href="#概念题-开发中最常用的概念" aria-hidden="true">#</a> 概念题（开发中最常用的概念）</h3><ol><li>CSS 中的定位</li><li>跨域的几种方式</li><li>前端本地存储的几种方式</li><li>什么是深拷贝、浅拷贝，分别有哪些应用场景</li></ol><h3 id="es6-相关-api" tabindex="-1"><a class="header-anchor" href="#es6-相关-api" aria-hidden="true">#</a> ES6 相关 API</h3><ol><li>let/const/var 的区别</li><li>箭头函数与简单函数的区别</li><li>实践题：（开发中最常用 API 的使用）</li><li>数组相关的一道实践题：主要考察数组 API</li></ol><h3 id="字符串相关的一道实践题" tabindex="-1"><a class="header-anchor" href="#字符串相关的一道实践题" aria-hidden="true">#</a> 字符串相关的一道实践题</h3><ol><li>有一个字符串, 移除掉里面的空格，再剔除掉里面所有的中横线，保留前50个字符。</li><li>翻转字符串</li></ol><h3 id="正则相关的一道实践题" tabindex="-1"><a class="header-anchor" href="#正则相关的一道实践题" aria-hidden="true">#</a> 正则相关的一道实践题</h3><ol><li>写一个正则表达式，匹配手机号码</li><li>写一个正则表达式，匹配网址</li></ol><h3 id="样式布局的一道实践题" tabindex="-1"><a class="header-anchor" href="#样式布局的一道实践题" aria-hidden="true">#</a> 样式布局的一道实践题</h3><ol><li>写一个顶栏固定高度，侧栏固定宽度，其余部分自适应窗口的布局</li></ol><h3 id="事件的一道实践题" tabindex="-1"><a class="header-anchor" href="#事件的一道实践题" aria-hidden="true">#</a> 事件的一道实践题</h3><ol><li>写一个深/浅拷贝</li></ol><blockquote><p>中等（2.1 - 2.3）</p></blockquote><h3 id="概念题-一些没那么常用-但是又有用武之地的概念" tabindex="-1"><a class="header-anchor" href="#概念题-一些没那么常用-但是又有用武之地的概念" aria-hidden="true">#</a> 概念题（一些没那么常用，但是又有用武之地的概念）</h3><ol><li>事件循环（宏任务与微任务）</li><li>长连接与长轮询、短轮询的区别，实践</li><li>对于编码你有哪些了解，为什么需要 encodeURI/decodeURI？</li><li>编码常识：文件编码、URL 编码、Unicode 编码 什么含义。</li><li>一个 gbk 编码的页面如何正确引用一个 utf8 的的资源</li><li>前端缓存头</li><li>事件的捕获和冒泡</li><li>XSS 和 CSRF 的概念</li><li>深拷贝与浅拷贝</li></ol><h3 id="es6-相关-api2" tabindex="-1"><a class="header-anchor" href="#es6-相关-api2" aria-hidden="true">#</a> ES6 相关 API2</h3><ol><li>Promise 的概念</li><li>Proxy 的概念，能解决哪些问题？</li><li>map</li><li>set</li><li>symbol</li><li>迭代器</li><li>Object.defineProperty</li></ol><h3 id="实践题" tabindex="-1"><a class="header-anchor" href="#实践题" aria-hidden="true">#</a> 实践题</h3><ol><li>原型继承相关的一道实践题</li><li>call/apply 相关的一道实践题</li><li>Promise 相关的一道实践题</li><li>递归相关的一道实践题</li><li>事件的捕获和冒泡的一道实践题</li><li>实现深拷贝与浅拷贝</li><li>垂直居中的一道实践题</li><li>闭包相关的一道实践题</li><li>canvas相关的一道实践题</li><li>svg相关的一道实践题：</li></ol><blockquote><p>有深度（2.2 - 3+）</p></blockquote><h3 id="概念题-偏重标准和脱离前端的底层概念" tabindex="-1"><a class="header-anchor" href="#概念题-偏重标准和脱离前端的底层概念" aria-hidden="true">#</a> 概念题（偏重标准和脱离前端的底层概念）</h3><ol><li>TCP\\UDP 区别</li><li>页面首屏加载时的都有哪几个指标，分别是什么意思？</li><li>不加 Doctype 会有哪些影响</li><li>简述 viewport 概念</li><li>Unicode 编码/ UTF-8 的概念</li><li>对称加密与非对称加密</li><li>什么是信息摘要算法，大概原理是啥，常用的有哪些，应用场景是什么？</li><li>http1与http2</li><li>http状态码</li><li>http头的属性有什么</li><li>http2 都有哪些内容，如果要改成 http2，需要做哪些工作？</li><li>PWA 的缓存流程</li><li>canvas、webgl 相关问题</li><li>浏览器的渲染过程</li><li>什么是贝塞尔曲线，前端中有哪些应用场景</li><li>什么是尾递归，如何进行尾递归优化</li></ol><h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架" aria-hidden="true">#</a> 框架</h2><h3 id="框架基础-api" tabindex="-1"><a class="header-anchor" href="#框架基础-api" aria-hidden="true">#</a> 框架基础 API</h3><ol><li>请用 vue 循环出一个列表</li><li>请用 react 循环出一个列表</li><li>react 都有哪些生命周期函数</li></ol><h3 id="框架进阶-api" tabindex="-1"><a class="header-anchor" href="#框架进阶-api" aria-hidden="true">#</a> 框架进阶 API</h3><ol><li>vue</li><li>vue的diff算法优化（vue2和3之间做了什么优化）</li><li>vue双向绑定原理（深挖 哪个属性？什么模式？vue2和3有什么不同）</li><li>vue路由的实现原理</li><li>react</li><li>react 与 vue 有什么不同</li><li>react 项目中的容错应该怎么做？</li><li>react 项目中的 context api 是干什么的？在什么场景下用</li><li>react 中的 ref 是干什么的，在什么场景下用</li><li>react 中的 portal 是干什么的，在什么场景下用</li><li>react 中的 pureComponent 有什么用</li><li>react 中的函数式组件和 hooks api</li><li>react 如何实现按需加载</li><li>怎样避免修改了一个小的属性导致整片渲染</li><li>react的hooks，原理的东西</li></ol><h3 id="框架选型与核心原理" tabindex="-1"><a class="header-anchor" href="#框架选型与核心原理" aria-hidden="true">#</a> 框架选型与核心原理</h3><ol><li>为什么选择 vue/react</li><li>vue/react 的本质区别是什么？</li><li>vue/react中 vdom diff 的原理是什么？</li><li>vue 是如何对数据进行劫持的？</li></ol><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><h3 id="前端工程化相关" tabindex="-1"><a class="header-anchor" href="#前端工程化相关" aria-hidden="true">#</a> 前端工程化相关</h3><ol><li>webpack3、4 都有哪些编译时优化</li><li>rollup 和 webpack 区别</li><li>如何提升 webpack 打包的性能</li><li>你们用 webpack 的时候会用到哪些插件和 loader</li><li>写没写过loader？如何写一个loader</li></ol><h3 id="node-js相关" tabindex="-1"><a class="header-anchor" href="#node-js相关" aria-hidden="true">#</a> node.js相关</h3><ol><li>为什么要用 node 做服务，为什么不用 java 或者 php</li><li>用的什么框架，为什么选这个？</li><li>一般开几个进程，部署了几台机器？</li><li>有没有相关的监控和报警，分别是怎么做的？</li><li>如何运行时捕获异常，出现异常如何保证服务不挂掉</li><li>怎样做到无缝重启</li><li>怎样处理定时任务？</li></ol><h3 id="前端测试相关" tabindex="-1"><a class="header-anchor" href="#前端测试相关" aria-hidden="true">#</a> 前端测试相关</h3><ol><li>做没做过，没做过的话通过什么别的方式保证质量</li><li>单元测试和集成测试的区别</li></ol><h3 id="前端安全相关" tabindex="-1"><a class="header-anchor" href="#前端安全相关" aria-hidden="true">#</a> 前端安全相关</h3><ol><li>有没有了解，一般有哪些攻击手段？</li><li>什么是XSS？</li><li>什么是CSRF?</li><li>具体怎么做来防止XSS？</li><li>具体怎么做来防止CSRF？</li></ol><h3 id="前端质量相关" tabindex="-1"><a class="header-anchor" href="#前端质量相关" aria-hidden="true">#</a> 前端质量相关</h3><h3 id="混合开发问题" tabindex="-1"><a class="header-anchor" href="#混合开发问题" aria-hidden="true">#</a> 混合开发问题</h3><ol><li>怎么保证客户端 JS 注入时机</li><li>JS 接口的安全性怎么保证</li><li>JS 接口升级如何向前兼容</li><li>页面静态资源是否有缓存策略，有的话是什么</li></ol><h3 id="实际场景问题" tabindex="-1"><a class="header-anchor" href="#实际场景问题" aria-hidden="true">#</a> 实际场景问题</h3><ol><li>水印功能的实现思路</li><li>说说你对域名收敛和域名发散的理解？分别在什么场景下使用</li></ol><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><h3 id="基础算法" tabindex="-1"><a class="header-anchor" href="#基础算法" aria-hidden="true">#</a> 基础算法</h3><ol><li>爬楼梯（考察递归）</li><li>将一个包含id/pid的列表转换为树的样子（考察递归）</li><li>实现一个洗牌算法，将有序数组打乱</li><li>变种排序题</li><li>倒置字符串</li><li>随机数生成</li><li>简述堆排序的实现思路及其实现</li><li>LRU 缓存淘汰算法</li></ol><h3 id="基本数据结构" tabindex="-1"><a class="header-anchor" href="#基本数据结构" aria-hidden="true">#</a> 基本数据结构</h3><ol><li>将一个数组转化为一个二叉搜索树（考察二叉树的概念）</li><li>链表</li><li>数组</li><li>哈希表</li><li>索引</li></ol><h2 id="后端" tabindex="-1"><a class="header-anchor" href="#后端" aria-hidden="true">#</a> 后端</h2><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3><ol><li>数据库索引原理，建立索引会带来哪些好处和哪些副作用</li><li>当表的行数达到千万级后，有哪些手段进行优化</li><li>一个具体的查询语句优化</li><li>一个具体的插入语句优化</li></ol><h3 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h3><ol><li>简述 CAP 原理</li></ol><h3 id="linux系统" tabindex="-1"><a class="header-anchor" href="#linux系统" aria-hidden="true">#</a> Linux系统</h3><ol><li>top 命令中有哪些参数，一般关注哪些</li><li>如何查看硬盘空间/操作系统</li><li>简述 linux 中 user， group 的概念</li></ol><h3 id="服务治理" tabindex="-1"><a class="header-anchor" href="#服务治理" aria-hidden="true">#</a> 服务治理</h3><ol><li>服务的注册和发现是怎么做的</li><li>怎样监控服务是否存活</li></ol><h2 id="计算机基础知识" tabindex="-1"><a class="header-anchor" href="#计算机基础知识" aria-hidden="true">#</a> 计算机基础知识</h2><h3 id="理论" tabindex="-1"><a class="header-anchor" href="#理论" aria-hidden="true">#</a> 理论</h3><ol><li>进程和线程的区别是什么？</li><li>进程间通信有哪些方式？</li></ol><h3 id="网络框架" tabindex="-1"><a class="header-anchor" href="#网络框架" aria-hidden="true">#</a> 网络框架</h3><ol><li>什么是域名解析？</li><li>简述七层网络结构，我们常用的 TCP、HTTP 协议处于七层网络中的哪一部分？TCP:数据链路层， HTTP：应用层</li><li>什么是 CDN？</li></ol><h2 id="高级" tabindex="-1"><a class="header-anchor" href="#高级" aria-hidden="true">#</a> 高级</h2><h3 id="关于网络" tabindex="-1"><a class="header-anchor" href="#关于网络" aria-hidden="true">#</a> 关于网络</h3><ol><li>场景: 用户反馈页面上一张图片不能正常展示, 但是开发人员本地无法复现，可能的原因是什么？</li><li>延伸：请从公司网络层、CDN 网络层、用户网络层进行简述出现的原因</li><li>如何做 cdn 容错方案？</li><li>简述 TC P的三次握手与四次挥手</li></ol><h3 id="关于浏览器api" tabindex="-1"><a class="header-anchor" href="#关于浏览器api" aria-hidden="true">#</a> 关于浏览器API</h3><ol><li>web 端都有哪些设置缓存的方式，可以分别运用在哪些场景？</li></ol><p>答案：</p><ul><li>cookie</li><li>localStorage &amp; sessionStorage</li><li>indexDB</li><li>web sql</li><li>http 缓存</li><li>service worker</li></ul><ol start="2"><li>进程之间如何进行通信？说一下应用场景？</li></ol><h3 id="关于-web-安全" tabindex="-1"><a class="header-anchor" href="#关于-web-安全" aria-hidden="true">#</a> 关于 Web 安全</h3><ol><li>什么是 XSS 攻击？</li><li>如何防范 XSS 攻击？</li><li>前端能做什么防范 XSS攻击？在展示用户可编辑内容如（url参数，服务端返回的富文本编辑内容）时进行过滤</li><li>什么是 csrf 攻击，如何防范</li><li>设计一个方案，可以安全的在前端对返回值进行解密。</li><li>ssl 加密的细节</li><li>对称加密和非对称加密</li><li>简述单点登录验证的过程</li></ol><p>答案：</p><ol><li>尝试访问 yewu.domain.com, 校验 cookie 中携带的 session，发现已过期，跳转到 account.domain.com?redirecturl=yewu.domain.com;</li><li>在 account.domain.com 页面调用 login 接口进行登录, 登录成功后在 *.domain.com 域下种上 sk 值，然后跳转到 yewu.domain.com</li><li>yewu.domain.com 通过 sk 值到 account.domain.com 服务验证 sk 值，如果成功，返回 ak 值</li><li>yewu.domain.com 返回时在 cookie 中种上 ak 值</li></ol><h3 id="关于-hybrid-开发" tabindex="-1"><a class="header-anchor" href="#关于-hybrid-开发" aria-hidden="true">#</a> 关于 Hybrid 开发</h3><p>1、某用户反馈 Hybrid 应用中的 web 页面打开比较慢，可能的原因是什么？如何解决？</p><p>答案：</p><ul><li>原因： <ul><li>web 服务本身较慢，比如服务器端处理时间长</li><li>web 服务依赖的网络层较慢，比如出现跨运营商流量</li><li>身份验证设计不合理，身份验证过程中需要多次跳转</li><li>用户机器硬件较差或者发生了发热、卡顿</li></ul></li><li>解决方案： <ul><li>服务端问题由服务端解决，增加机器、增加数据缓存、解决机房跨运营商问题</li><li>客户端可以通过缓存解决一部分问题 <ul><li>最简单是开启 webview 默认的 http 缓存，但是 http 缓存缓存量较小，过期时间并不会真的按 http 协议头中的约定来设置。</li><li>离线包缓存 <ul><li>如何更新离线包？</li><li>如何进行离线包下载完整性校验？</li><li>如果离线包下载失败或者下载不完整如何容错？</li><li>缓存清理策略是什么？</li></ul></li><li>拦截请求：拦截静态资源请求，并进行缓存，可以设计内存 + 磁盘的 LRU 缓存队列 <ul><li>拦截请求如何处理302跳转？</li><li>拦截请求如何处理带版本号的资源</li><li>缓存清理策略是什么？</li></ul></li></ul></li><li>客户端可以通过 httpdns 服务获取最优节点，加快首页域名打开速度，同时避免 dns 劫持 <ul><li>dns劫持和中间人攻击的区别？</li></ul></li><li>针对身份验证问题，打通端上身份和页面身份，避免每次打开页面都使用标准的 OSS 或者 Oauth 登录 <ul><li>简述一下 OSS/Oauth 登录的基本流程</li></ul></li><li>打通客户端和 web 页之间的日志，提醒用户，并优化可能的客户端问题 <ul><li>如何进行日志打通</li><li>一般什么情况会导致客户端发热</li></ul></li></ul></li></ul><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h3><ol><li>B端：大数据量、复杂数据结构的性能优化</li><li>C端：</li><li>延伸：从 Loading、Scripting、Layout(回流)、Painting(重绘)、GPU 加速阐述前端性能优化</li></ol><h3 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h3><ol><li>谈一谈你对Node.js中子进程的理解，</li><li>为什么要用子进程？</li><li>谈谈你对子进程使用的最佳实践</li><li>谈谈 child_process 和 cluster 的区别</li><li>你会通过哪些手段提升 Node 服务的可用性？</li></ol><p>答案：</p><ul><li>高可用架构： <ul><li>守护进程：PM2 <ul><li>PM2的原理</li><li>为什么egg.js不用PM2</li></ul></li><li>多实例：防止某台机器实例挂掉导致</li><li>多机房多活：防止某个机房因为光纤挖断等事故造成影响</li><li>消息队列：防止大流量击穿</li><li>流量控制</li></ul></li><li>演练与压测：通过演练和压测找出系统的最大 QPS，以及瓶颈点，进行改进和预防</li><li>监控： <ul><li>系统级监控：内存、CPU</li><li>进程级监控</li></ul></li><li>报警：基于监控对关键指标进行报警</li><li>值班制度：服务要有值班人和backup</li><li>日志：要有完善的系统和应用级日志</li><li>CI/CD: 可以在CI流程中集成 code review， 静态检查，自动化测试用例，防止手动上线操作导致的误操作</li><li>代码质量：</li></ul><h3 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h3><ol><li>你觉得ES6里最有用的API是什么？</li><li>箭头函数与普通函数区别</li><li>Map与Object的区别</li><li>Set与Array区别</li><li>如何捕获 await/async 的错误、Promise 的链式调用的实现</li></ol><h3 id="算法1" tabindex="-1"><a class="header-anchor" href="#算法1" aria-hidden="true">#</a> 算法1</h3><ol><li>请问获取一个数组中两个值相加等于某一个值的index值,例如[1,2,3,4] 相加等于7</li></ol><p>答案：</p><p>题目解析：两数之和</p><p>最优解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add2Num</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> result <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>temp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>
    temp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能次优解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add2Num</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> result <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>生成一个1到30共30个整数的数组，从第1个数开始计数(注意：计数并不代表实际数组的索引)，1、2、3，每次计数到第3个，就将第3个从数组中删除掉(比如第1次，删除的就是3，第2次从4开始计数)，然后重新计数，1、2、3。不断重复这个过程，直到数组中剩下最后一个数，请问剩下的这个数是几？</li></ol><p>答案：29</p><p>题目解析：本题的真身叫做击鼓传花，主要考察对题目的理解能力、JS数组灵活的特性、和如何不使用递归来无限重复某个过程的能力。只要理解题目需求，思路很简单，30个人围成圈从1开始报数，每次报数到3的人就出列，之后重新开始从1报数。只要明白，每次报数完成的那个人即变成了最后一个，即可。</p><p>最优解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">findLastOne</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">Infinity</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findLastOne</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>次优解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">findLastOne</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findLastOne</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>给定任意 m * n 二维数组，例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span>

输出为一维数组：<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>题目解析：反向螺旋矩阵，时间复杂度O(m*n)</p><p>答案：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">spiralOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  matrix<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  matrix<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">spiralOrder</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>10000个大数字，内存只能运行2000个，如何进行排序</li><li></li></ol>`,110)]))}const c=a(p,[["render",e],["__file","base.html.vue"]]);export{c as default};
