import{_ as e,o as i,c as r,e as l}from"./app-f5876168.js";const o={};function d(h,a){return i(),r("div",null,a[0]||(a[0]=[l('<h1 id="计算机操作系统" tabindex="-1"><a class="header-anchor" href="#计算机操作系统" aria-hidden="true">#</a> 计算机操作系统</h1><h2 id="考查目标" tabindex="-1"><a class="header-anchor" href="#考查目标" aria-hidden="true">#</a> 考查目标</h2><h3 id="_1-掌握操作系统的基本概念、基本原理和基本功能-理解操作系统的整体运行过程。" tabindex="-1"><a class="header-anchor" href="#_1-掌握操作系统的基本概念、基本原理和基本功能-理解操作系统的整体运行过程。" aria-hidden="true">#</a> 1.掌握操作系统的基本概念、基本原理和基本功能，理解操作系统的整体运行过程。</h3><h3 id="_2-掌握操作系统进程、内存、文件和i-o管理的策略、算法、机制以及相互关系。" tabindex="-1"><a class="header-anchor" href="#_2-掌握操作系统进程、内存、文件和i-o管理的策略、算法、机制以及相互关系。" aria-hidden="true">#</a> 2.掌握操作系统进程、内存、文件和I/O管理的策略、算法、机制以及相互关系。</h3><h3 id="_3-能够运用所学的操作系统原理、方法与技术分析问题和解决问题-并能利用-c-语言描述相关算法" tabindex="-1"><a class="header-anchor" href="#_3-能够运用所学的操作系统原理、方法与技术分析问题和解决问题-并能利用-c-语言描述相关算法" aria-hidden="true">#</a> 3.能够运用所学的操作系统原理、方法与技术分析问题和解决问题，并能利用 C 语言描述相关算法</h3><h3 id="_1-掌握操作系统的基本概念、方法和原理-了解操作系统的结构、功能和服务-理解操作系统所采用的的策略、算法和机制。" tabindex="-1"><a class="header-anchor" href="#_1-掌握操作系统的基本概念、方法和原理-了解操作系统的结构、功能和服务-理解操作系统所采用的的策略、算法和机制。" aria-hidden="true">#</a> 1.掌握操作系统的基本概念、方法和原理，了解操作系统的结构、功能和服务，理解操作系统所采用的的策略、算法和机制。</h3><h3 id="_2-能够-从计算机系统的角度理解并描述应用程序、操作系统内核和计算机硬件协作完成任务的过程。" tabindex="-1"><a class="header-anchor" href="#_2-能够-从计算机系统的角度理解并描述应用程序、操作系统内核和计算机硬件协作完成任务的过程。" aria-hidden="true">#</a> 2.能够，从计算机系统的角度理解并描述应用程序、操作系统内核和计算机硬件协作完成任务的过程。</h3><h3 id="_3-能够运用操作系统原理-分析并解决计算机系统中与操作系统相关的问题。" tabindex="-1"><a class="header-anchor" href="#_3-能够运用操作系统原理-分析并解决计算机系统中与操作系统相关的问题。" aria-hidden="true">#</a> 3.能够运用操作系统原理，分析并解决计算机系统中与操作系统相关的问题。</h3><h2 id="操作系统引论" tabindex="-1"><a class="header-anchor" href="#操作系统引论" aria-hidden="true">#</a> 操作系统引论</h2><h3 id="一、操作系统的目标和作用" tabindex="-1"><a class="header-anchor" href="#一、操作系统的目标和作用" aria-hidden="true">#</a> 一、操作系统的目标和作用</h3><ol><li><p>操作系统的目标 （1）方便性。 配置操作系统后，系统可以使用编译命令将用户采用高级语言书写的程序翻译成机器代码，用户可以直接通过OS所提供的各种命令操纵计算机系统，使计算机变得易学易用。 （2）有效性。 ① 提高系统资源利用率能有效分配各种设备的工作状态，提高系统资源的利用率。 ② 提高系统的吞吐量 OS 可以通过合理地组织计算机的工作流程，加速程序的运行，缩短程序的运行周期，从而提高系统的吞吐量。 （3）可扩充性。 OS 必须具有很好的可扩充性，才能适应计算机硬件、体系结构以及应用发展的要求。 （4）开放性。 开放性是指系统能遵循世界标准规范，特别是遵循开放系统互连（OSI）国际标准。开放性是衡量一个新推出系统或软件能否被广泛应用的至关重要的因素。</p></li><li><p>操作系统的作用 （1）OS 作为用户与计算机硬件系统之间的接口。 OS 处于用户与计算机硬件系统之间，用户通过 OS 来使用计算机系统。 （2）OS 作为计算机系统资源的管理者。 在计算机系统中，通常都包含硬件和软件资源，归纳起来可将资源分为 4 类：<code>处理器、存储器、I/O 设备以及信息（数据和程序）</code>。相应地，OS 的主要功能也正是针对这 4 类资源进行有效的管理。为了管理好这些共享资源（包括硬件和信息）的使用，操作系统必须记录下各种资源的使用情况，对使用资源的请求进行授权，协调诸用户对共享资源的使用，避免发生冲突，并计算使用资源的费用等。 （3）OS 实现了对计算机资源的抽象。 在裸机上覆盖上一层 I/O 设备管理软件得到扩充机器（虚拟机），它向用户（进程）提供了一个对硬件操作的抽象模型，用户可利用抽象模型提供的接口使用计算机，而无需了解物理接口实现的细节，从而使用户更容易地使用计算机硬件资源。</p></li></ol><p><strong>为什么说OS实现了对计算机资源的抽象？</strong></p><blockquote><p>OS 是铺设在计算机硬件上的多层系统软件，它不仅增强了系统的功能，而且还隐藏了对硬件操作的细节，实现了对计算机硬件操作的多个层次的抽象。 （1）在裸机上覆盖上一层 I/O 设备管理软件，由它来实现对 I/O 设备操作的细节，并向上提供一组 I/O 命令，用户可利用它来进行数据输入或输出，而无需关心 I/O 是如何实现的。该软件实现了对计算机硬件操作的第一层次的抽象。 （2）在第一层次的抽象上再覆盖上一层用于文件的管理软件，同样由它来实现文件操作的细节，并向上提供一组对文件进行存取操作的命令，用户可利用这组命令进行文件的存取。该层软件实现了对硬件资源操作的第二层次的抽象。</p></blockquote><h3 id="二、操作系统的发展过程" tabindex="-1"><a class="header-anchor" href="#二、操作系统的发展过程" aria-hidden="true">#</a> 二、操作系统的发展过程</h3><ol><li>未配置操作系统的计算机系统 （1）人工操作方式。 （2）脱机输入/输出方式。</li></ol><p><strong>何谓脱机 I/O 和联机 I/O？</strong></p><p>（1）脱机 I/O 为了解决人机矛盾及 CPU 和 I/O 设备之间速度不匹配的矛盾，20 世纪 50 年代末出现了脱机输入/输出（Off-Line I/O）技术。该技术是事先将装有用户程序和数据的纸带（或卡片）装入纸带输入机（或卡片机），在一台外围机的控制下，把纸带（卡片）上的数据（程序）输入到磁带上。当 CPU 需要这些程序和数据时，再从磁带上将其高速地调入内存。类似地，当 CPU 需要输出时，可由 CPU 直接高速地把数据从内存送到磁带上，然后再在另一台外围机的控制下，将磁带上的结果通过相应的输出设备输出。即脱机 I/O 方式指的是程序和数据的输入和输出都是在外围机的控制下完成的，或者说，它们是在脱离主机的情况下进行的。 （2）联机 I/O 和脱机 I/O 方式相反，联机 I/O 方式指的是在主机的直接控制下进行输入/输出的方式。</p><ol start="2"><li><p>单道批处理系统</p></li><li><p>多道批处理系统 多道批处理系统特征：<code>多道、宏观上并行、微观上串行</code>。 <code>不断提高计算机资源的利用率和系统吞吐量</code>是推动多道批处理系统形成和发展的主要动力。</p></li><li><p>分时系统 分时系统的特征：<code>多路性、独立性、及时性、交互性</code>。 <code>进一步提高计算机资源的利用率、更好的满足人机交互</code>是推动分时系统形成和发展的主要动力。</p></li></ol><p><strong>实现分时系统的关键问题是什么？应如何解决？</strong></p><p>（1）实现分时系统的关键问题是<code>如何使用户能与自己的作业进行交互</code>，即当用户在自己的终端上键入命令时，系统应能及时接收并及时处理该命令，再将结果返回给用户。 （2）解决方案 ① 及时接收问题 针对及时接收问题，解决办法是在系统中配置一个多路卡，多路卡的作用是使主机能同时接收不同用户从终端上输入的数据。此外，还须为每个终端配置一个缓冲区，用来暂存用户键入的命令（或数据）。 ② 及时处理问题针对及时处理问题，各个用户的作业应该直接进入内存，并且规定每个作业只运行一个很短的时间片，然后暂停该作业的运行，并立即调度下一个作业运行。</p><ol start="5"><li>实时系统 （1）实时系统的类型 ① 工业（武器）控制系统，如火炮的自动控制系统、飞机的自动驾驶系统，以及导弹的制导系统等。 ② 信息查询系统，如飞机或火车的订票系统等。 ③ 多媒体系统。 ④ 嵌入式系统。 （2）实时系统最主要的特征便是<code>及时性与可靠性</code>。 引入实时 OS 是为了<code>满足实时应用的需求</code>，更好地满足实时控制领域和实时信息处理领域的需要。</li></ol><p><strong>什么是硬实时任务和软实时任务？试举例说明。</strong></p><p>在实时操作系统中，根据对截止时间的要求来分类，实时任务可分为硬实时任务和软实时任务两种。 （1）硬实时任务及其举例 硬实时任务是系统必须满足任务对截止时间的要求，否则可能出现难以预测的结果，在一些高科技领域，如运载火箭的控制等。 （2）软实时任务及其举例 软实时任务是它也联系着一个截止时间，但并不严格，若偶尔错过了任务的截止时间，对系统产生的影响也不会太大，比如网页的更新等。</p><p><strong>试从交互性、及时性以及可靠性方面将分时系统与实时系统进行比较。</strong></p><p>（1）交互性实时信息处理系统虽然也具有交互性，但这里人与系统的交互仅限于访问系统中某些特定的专用服务程序。它不像分时系统那样能向终端用户提供数据处理和资源共享等服务。 （2）及时性实时信息处理系统对实时性的要求与分时系统类似，都是以人所能接受的等待时间来确定的；而实时控制系统的及时性，则是以控制对象所要求的开始截止时间或完成截止时间来确定的，一般为秒级到毫秒级，甚至有的要低于100微秒。 （3）可靠性分时系统虽然也要求系统可靠，但相比之下，实时系统对可靠性的要求更高。因为任何差错都可能带来巨大的经济损失，甚至是无法预料的灾难性后果，所以在实时系统中，往往都采取了多级容错措施来保障系统的安全性及数据的安全性。</p><ol start="6"><li>微机操作系统的发展 微机操作系统按运行方式分为以下几类： （1）单用户单任务操作系统。 （2）单用户多任务操作系统。 （3）多用户多任务操作系统。</li></ol><h3 id="三、操作系统的基本特性" tabindex="-1"><a class="header-anchor" href="#三、操作系统的基本特性" aria-hidden="true">#</a> 三、操作系统的基本特性</h3><ol><li><p>并发（Concurrence）（最基本） 区分并行与并发 （1）并行性是指两个或多个事件在同一时刻发生； （2）并发性是指两个或多个事件在同一时间间隔内发生。</p></li><li><p>共享（Sharing）（最基本） 目前实现资源共享的主要方式有以下两种： （1）互斥共享方式。 （2）同时访问方式。</p></li></ol><p><strong>在多道程序技术的 OS 环境下的资源共享与一般情况下的资源共享有何不同？对独占资源应采取何种共享方式？</strong></p><p>（1）OS 环境下与一般情况下的资源共享间的不同点 ① 一般情况下的共享 一般情况下的共享只是说明某种资源能被大家使用，对于这样的资源共享方式，只要通过适当的安排，用户之间并不会产生对资源的竞争，因此资源管理是比较简单的。 ② OS 环境下的共享 OS 环境下的资源共享或称为资源复用，是指系统中的资源可供内存中多个并发执行的进程共同使用。这里在宏观上既限定了时间（进程在内存期间），也限定了地点（内存）。对于这种资源共享方式，其管理就要复杂得多，因为系统中的资源少于多道程序需求的总和，会形成它们对共享资源的争夺。所以，系统必须对资源共享进行妥善管理。 （2）独占资源应采取的共享方式 对独占资源应采用<code>互斥共享方式</code>，该共享方式仅当占有该资源的进程访问并释放资源后，才允许另一进程对该资源进行访问。</p><p><strong>什么是时分复用技术？举例说明它能提高资源利用率的根本原因是什么。</strong></p><p>（1）时分复用技术是将不同的信号相互交织在不同的时间段内，沿着同一个信道传输；在接收端再用某种方法，将各个时间段内的信号提取出来还原成原始信号的通信技术。这种技术可以在同一个信道上传输多路信号。 （2）时分复用技术能提高资源利用率的根本原因在于，它利用某设备为一用户服务的空闲时间，又转去为其他用户服务，使设备得到最充分的利用。</p><ol start="3"><li><p>虚拟（Virtual）</p></li><li><p>异步（Asynchronism） 由于各用户程序性能的不同，不同程序对内存的使用开始时间、结束时间、中断时间是不可预知的，或者说，进程是以人们不可预知的速度向前推进，导致了进程的异步性。</p></li></ol><h3 id="四、操作系统的主要功能" tabindex="-1"><a class="header-anchor" href="#四、操作系统的主要功能" aria-hidden="true">#</a> 四、操作系统的主要功能</h3><ol><li><p>处理机管理功能 对处理机的管理可归结为对进程的管理。处理机管理的主要功能有： （1）进程控制。 为作业创建进程，并为之分配必要的资源；进程结束时撤销进程，及时回收该进程所占用的各类资源；以及控制进程在运行过程中的状态转换。 （2）进程同步。 为多个进程（含线程）的运行进行协调，协调分为进程互斥方式和进程同步方式。 （3）进程通信。 用来实现在相互合作的进程之间的信息交换。 （4）调度。 在后备队列上等待的每个作业都必须经过调度才能执行，在传统的操作系统中，包括作业调度和进程调度两步。 ① 作业调度从后备队里按照一定的算法，选择出若干个作业，为它们分配运行所需的资源（首先是分配内存）。 ② 进程调度从进程的就绪队列中，按照一定算法选出一个进程，把处理机分配给它，并为它设置运行现场，使进程投入执行。</p></li><li><p>存储器管理功能 （1）内存分配。 内存分配的主要任务是为每道程序分配内存空间，使它们“各得其所”；提高存储器的利用率，减少不可用的内存空间；允许正在运行的程序申请附加的内存空间，以适应程序和数据动态增长的需要。 （2）内存保护。 内存保护的主要任务是确保每道用户程序都只在自己的内存空间内运行，彼此互不干扰；绝不允许用户程序访问操作系统的程序和数据；也不允许用户程序转移到非共享的其他用户程序中去执行。 （3）地址映射。 为使程序能正确运行，存储器管理必须提供地址映射功能，以将地址空间中的逻辑地址转换为内存空间中与之对应的物理地址，该功能应在硬件的支持下完成。 （4）内存扩充。 借助于虚拟存储技术，从逻辑上去扩充内存容量，使用户所感觉到的内存容量比实际内存容量大得多，以便让更多的用户程序并发运行。</p></li><li><p>设备管理功能 （1）缓冲管理。 （2）设备分配。 （3）设备处理。</p></li></ol><p>设备管理的主要任务是完成用户进程提出的 I/O 请求，为用户进程分配其所需的 I/O 设备；提高 CPU 和 I/O 设备的利用率；提高 I/O 设备处理速度；方便用户使用 I/O 设备。</p><ol start="4"><li>文件管理功能 （1）文件存储空间的管理。 （2）目录管理。 （3）文件的读/写管理和保护。</li></ol><p>文件管理的主要任务是对用户文件和系统文件进行管理，以方便用户使用，并保证文件的安全性。</p><ol start="5"><li><p>操作系统与用户之间的接口 （1）用户接口 用户接口进一步分为联机用户接口、脱机用户接口和图形用户接口三种。 （2）程序接口 程序接口是由一组系统调用组成的，每一个系统调用都是一个能完成特定功能的子程序。</p></li><li><p>系统调用 （1）系统调用又被称为广义指令。 （2）系统调用的相关处理都是在核心态下进行。 （3）系统调用按功能分类为：设备管理、文件管理、进程控制、进程通信、内存管理。</p></li></ol><h3 id="五、操作系统的运行环境" tabindex="-1"><a class="header-anchor" href="#五、操作系统的运行环境" aria-hidden="true">#</a> 五、操作系统的运行环境</h3><ol><li><p>内核态与用户态 （1）操作系统的内核是计算机上配置的底层软件，是操作系统最基本、最核心的部分。 （2）操作系统内核的核心功能包括时钟管理，中断处理，原语，进程管理，存储器管理，设备管理。 （3）用户态也叫做目态，核心态也叫做管态。</p></li><li><p>操作系统的指令分为特权指令和非特权指令。 （1）特权指令是只能由操作系统才能执行的指令，如 I/O 指令、内存清零指令，只能在核心态下执行。 （2）非特权指令是用户可以去执行的指令，在用户态下执行。</p></li><li><p>中断与异常 （1）中断分为内中断和外中断。其中，内中断信号的来源是 CPU 内部，与当前执行指令的有关；外中断信号的来源是 CPU 外部，与当前执行指令的无关。 （2）内中断也称为异常或者陷入（trap）。 （3）外中断就是狭义上的中断。 （4）中断可以使 CPU 从用户态切换为核心态。</p></li></ol><h3 id="六、微内核-os-结构" tabindex="-1"><a class="header-anchor" href="#六、微内核-os-结构" aria-hidden="true">#</a> 六、微内核 OS 结构</h3><ol><li><p>基本概念 微内核并非是一个完整的 OS，而只是将操作系统中最基本的部分放入微内核，微内核通常包含以下几部分： (1) 与硬件处理紧密相关的部分； (2) 一些较基本的功能； (3) 客户和服务器之间的通信。</p></li><li><p>微内核的基本功能 (1) 进程（线程）管理。 (2) 低级存储器管理。 (3) 中断和陷入处理。</p></li><li><p>微内核操作系统的优点 (1) 提高了系统的可扩展性。 (2) 增强了系统的可靠性。 (3) 可移植性强。 (4) 提供了对分布式系统的支持。 (5) 融入了面向对象技术。</p></li><li><p>微内核操作系统存在的问题 微内核 OS 存在着潜在的缺点。其中最主要的是，较之早期 OS，微内核 OS 的运行效率有所降低。</p></li></ol>',43)]))}const n=e(o,[["render",d],["__file","caozuoxitong.html.vue"]]);export{n as default};
