import{_ as e,o as r,c as i,e as h}from"./app-f5876168.js";const n={};function t(d,a){return r(),i("div",null,a[0]||(a[0]=[h(`<h1 id="rust" tabindex="-1"><a class="header-anchor" href="#rust" aria-hidden="true">#</a> Rust</h1><h2 id="_1-rust-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-rust-基础知识" aria-hidden="true">#</a> 1. Rust 基础知识</h2><p>官网：：https://www.rust-lang.org/</p><h3 id="_1-1-安装-更新" tabindex="-1"><a class="header-anchor" href="#_1-1-安装-更新" aria-hidden="true">#</a> 1.1 安装 &amp;&amp; 更新</h3><p>安装文档：：https://www.rust-lang.org/tools/install</p><p>打开文档，它会检测出你电脑系统，会推荐你安装的方式及版本。</p><p><strong>推荐使用 Rustup 安装方式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">&#39;=https&#39;</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span>

rustup update

rustc <span class="token parameter variable">--version</span>

rustup self uninstall
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-编译器与包管理工具以及开发环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-2-编译器与包管理工具以及开发环境搭建" aria-hidden="true">#</a> 1.2 编译器与包管理工具以及开发环境搭建</h3><p>Rust 编程语言的编译器 rustc</p><ul><li>查看版本</li><li>编译生成二进制文件</li><li>编译生成库文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rustc <span class="token parameter variable">--version</span>

rustc <span class="token parameter variable">-o</span> output_filename filename.rs

rustc --crate-type lib filename.rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-获取-rust-的库、自内涵以及-windows-与-linux-和-mac-的不同" tabindex="-1"><a class="header-anchor" href="#_1-3-获取-rust-的库、自内涵以及-windows-与-linux-和-mac-的不同" aria-hidden="true">#</a> 1.3 获取 Rust 的库、自内涵以及 Windows 与 Linux 和 Mac 的不同</h3><h2 id="_2-变量与常见数据类型" tabindex="-1"><a class="header-anchor" href="#_2-变量与常见数据类型" aria-hidden="true">#</a> 2. 变量与常见数据类型</h2><h3 id="_2-1-变量与不可变性" tabindex="-1"><a class="header-anchor" href="#_2-1-变量与不可变性" aria-hidden="true">#</a> 2.1 变量与不可变性</h3><h3 id="_2-2-变量-const-与-静态变量-static" tabindex="-1"><a class="header-anchor" href="#_2-2-变量-const-与-静态变量-static" aria-hidden="true">#</a> 2.2 变量 const 与 静态变量 static</h3><h3 id="_2-3-rust基础数据类型" tabindex="-1"><a class="header-anchor" href="#_2-3-rust基础数据类型" aria-hidden="true">#</a> 2.3 Rust基础数据类型</h3><h3 id="_2-4-元组与数组" tabindex="-1"><a class="header-anchor" href="#_2-4-元组与数组" aria-hidden="true">#</a> 2.4 元组与数组</h3><h2 id="_3-ownership-与-结构体、枚举" tabindex="-1"><a class="header-anchor" href="#_3-ownership-与-结构体、枚举" aria-hidden="true">#</a> 3. Ownership 与 结构体、枚举</h2><h3 id="_3-1-rust的内存管理模型" tabindex="-1"><a class="header-anchor" href="#_3-1-rust的内存管理模型" aria-hidden="true">#</a> 3.1 Rust的内存管理模型</h3><h3 id="_3-2-string-与-str" tabindex="-1"><a class="header-anchor" href="#_3-2-string-与-str" aria-hidden="true">#</a> 3.2 String 与 &amp;str</h3><h3 id="_3-3-枚举与匹配模式" tabindex="-1"><a class="header-anchor" href="#_3-3-枚举与匹配模式" aria-hidden="true">#</a> 3.3 枚举与匹配模式</h3><h3 id="_3-4-结构体、方法、关联函数、关联变量" tabindex="-1"><a class="header-anchor" href="#_3-4-结构体、方法、关联函数、关联变量" aria-hidden="true">#</a> 3.4 结构体、方法、关联函数、关联变量</h3><h3 id="_3-5-ownership与结构体" tabindex="-1"><a class="header-anchor" href="#_3-5-ownership与结构体" aria-hidden="true">#</a> 3.5 Ownership与结构体</h3><h3 id="_3-6-拷贝与转、copy与move" tabindex="-1"><a class="header-anchor" href="#_3-6-拷贝与转、copy与move" aria-hidden="true">#</a> 3.6 拷贝与转、Copy与Move</h3><h2 id="_4-流程控制与函数" tabindex="-1"><a class="header-anchor" href="#_4-流程控制与函数" aria-hidden="true">#</a> 4. 流程控制与函数</h2><h3 id="_4-1-if-流程控制-与-match-模式匹配" tabindex="-1"><a class="header-anchor" href="#_4-1-if-流程控制-与-match-模式匹配" aria-hidden="true">#</a> 4.1 if 流程控制 与 match 模式匹配</h3><h3 id="_4-2-循环-与-break-continue-以及与迭代的区别" tabindex="-1"><a class="header-anchor" href="#_4-2-循环-与-break-continue-以及与迭代的区别" aria-hidden="true">#</a> 4.2 循环 与 break continue 以及与迭代的区别</h3><h3 id="_4-3-函数基础与copy值参数传递" tabindex="-1"><a class="header-anchor" href="#_4-3-函数基础与copy值参数传递" aria-hidden="true">#</a> 4.3 函数基础与Copy值参数传递</h3><h3 id="_4-4-函数值参数传递、不可变借用参数传递、可变借用参数传递" tabindex="-1"><a class="header-anchor" href="#_4-4-函数值参数传递、不可变借用参数传递、可变借用参数传递" aria-hidden="true">#</a> 4.4 函数值参数传递、不可变借用参数传递、可变借用参数传递</h3><h3 id="_4-5-函数返回值与所有权机制" tabindex="-1"><a class="header-anchor" href="#_4-5-函数返回值与所有权机制" aria-hidden="true">#</a> 4.5 函数返回值与所有权机制</h3><h3 id="_4-6-高阶函数-函数作为参数与返回值" tabindex="-1"><a class="header-anchor" href="#_4-6-高阶函数-函数作为参数与返回值" aria-hidden="true">#</a> 4.6 高阶函数 函数作为参数与返回值</h3><h2 id="_5-error-错误处理" tabindex="-1"><a class="header-anchor" href="#_5-error-错误处理" aria-hidden="true">#</a> 5. Error 错误处理</h2><h3 id="_5-1-错误处理之-result、option以及panic宏" tabindex="-1"><a class="header-anchor" href="#_5-1-错误处理之-result、option以及panic宏" aria-hidden="true">#</a> 5.1 错误处理之：Result、Option以及panic宏</h3><h3 id="_5-2-错误处理之-unwrap-与" tabindex="-1"><a class="header-anchor" href="#_5-2-错误处理之-unwrap-与" aria-hidden="true">#</a> 5.2 错误处理之：unwrap()与&#39;?&#39;</h3><h3 id="_5-3-自定义一个error类型" tabindex="-1"><a class="header-anchor" href="#_5-3-自定义一个error类型" aria-hidden="true">#</a> 5.3 自定义一个Error类型</h3><h2 id="_6-borrowing借用-lifetime-生命周期" tabindex="-1"><a class="header-anchor" href="#_6-borrowing借用-lifetime-生命周期" aria-hidden="true">#</a> 6. Borrowing借用 &amp;&amp; Lifetime 生命周期</h2><h3 id="_6-1-borrowing-borrow-checker-lifetime" tabindex="-1"><a class="header-anchor" href="#_6-1-borrowing-borrow-checker-lifetime" aria-hidden="true">#</a> 6.1 Borrowing &amp;&amp; Borrow Checker &amp;&amp; Lifetime</h3><h3 id="_6-2-lifetime-与-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-lifetime-与-函数" aria-hidden="true">#</a> 6.2 Lifetime 与 函数</h3><h3 id="_6-3-lifetime-与-struct" tabindex="-1"><a class="header-anchor" href="#_6-3-lifetime-与-struct" aria-hidden="true">#</a> 6.3 Lifetime 与 Struct</h3><h2 id="_7-泛型" tabindex="-1"><a class="header-anchor" href="#_7-泛型" aria-hidden="true">#</a> 7. 泛型</h2><h3 id="_7-1-generic-structures" tabindex="-1"><a class="header-anchor" href="#_7-1-generic-structures" aria-hidden="true">#</a> 7.1 Generic Structures</h3><h3 id="_7-2-generic-function" tabindex="-1"><a class="header-anchor" href="#_7-2-generic-function" aria-hidden="true">#</a> 7.2 Generic Function</h3><h2 id="_8-特质" tabindex="-1"><a class="header-anchor" href="#_8-特质" aria-hidden="true">#</a> 8. 特质</h2><h3 id="_8-1-trait-特质" tabindex="-1"><a class="header-anchor" href="#_8-1-trait-特质" aria-hidden="true">#</a> 8.1 Trait 特质</h3><h3 id="_8-2-trait-object-与-box" tabindex="-1"><a class="header-anchor" href="#_8-2-trait-object-与-box" aria-hidden="true">#</a> 8.2 Trait Object 与 Box</h3><h3 id="_8-3-trait-object-与-泛型" tabindex="-1"><a class="header-anchor" href="#_8-3-trait-object-与-泛型" aria-hidden="true">#</a> 8.3 Trait Object 与 泛型</h3><h3 id="_8-4-重载操作符-operator" tabindex="-1"><a class="header-anchor" href="#_8-4-重载操作符-operator" aria-hidden="true">#</a> 8.4 重载操作符(Operator)</h3><h3 id="_8-5-trait与多态和继承" tabindex="-1"><a class="header-anchor" href="#_8-5-trait与多态和继承" aria-hidden="true">#</a> 8.5 Trait与多态和继承</h3><h3 id="_8-6-常见的trait" tabindex="-1"><a class="header-anchor" href="#_8-6-常见的trait" aria-hidden="true">#</a> 8.6 常见的Trait</h3><h2 id="_9-迭代器" tabindex="-1"><a class="header-anchor" href="#_9-迭代器" aria-hidden="true">#</a> 9. 迭代器</h2><h3 id="_9-1-迭代与循环" tabindex="-1"><a class="header-anchor" href="#_9-1-迭代与循环" aria-hidden="true">#</a> 9.1 迭代与循环</h3><h3 id="_9-2-intoiterator、iterator-和-iter-之间的关系" tabindex="-1"><a class="header-anchor" href="#_9-2-intoiterator、iterator-和-iter-之间的关系" aria-hidden="true">#</a> 9.2 IntoIterator、Iterator 和 Iter 之间的关系</h3><h3 id="_9-3-获取迭代器的三种方法iter-、iter-mut-和into-iter" tabindex="-1"><a class="header-anchor" href="#_9-3-获取迭代器的三种方法iter-、iter-mut-和into-iter" aria-hidden="true">#</a> 9.3 获取迭代器的三种方法iter()、iter_mut() 和into_iter()</h3><h3 id="_9-4-自定义类型实现iter-、iter-mut-和into-iter" tabindex="-1"><a class="header-anchor" href="#_9-4-自定义类型实现iter-、iter-mut-和into-iter" aria-hidden="true">#</a> 9.4 自定义类型实现Iter()、iter_mut()和into_iter()</h3><h2 id="_10-闭包" tabindex="-1"><a class="header-anchor" href="#_10-闭包" aria-hidden="true">#</a> 10. 闭包</h2><h3 id="_10-1-闭包基础概念" tabindex="-1"><a class="header-anchor" href="#_10-1-闭包基础概念" aria-hidden="true">#</a> 10.1 闭包基础概念</h3><h3 id="_10-2-闭包获取参数-by-reference-与-by-value" tabindex="-1"><a class="header-anchor" href="#_10-2-闭包获取参数-by-reference-与-by-value" aria-hidden="true">#</a> 10.2 闭包获取参数 by reference 与 by value</h3><h3 id="_10-3-闭包是怎么工作的" tabindex="-1"><a class="header-anchor" href="#_10-3-闭包是怎么工作的" aria-hidden="true">#</a> 10.3 闭包是怎么工作的</h3><h3 id="_10-4-闭包类型fnonce、fnmut和fn做函数参数的实例" tabindex="-1"><a class="header-anchor" href="#_10-4-闭包类型fnonce、fnmut和fn做函数参数的实例" aria-hidden="true">#</a> 10.4 闭包类型FnOnce、FnMut和Fn做函数参数的实例</h3>`,60)]))}const c=e(n,[["render",t],["__file","rust.html.vue"]]);export{c as default};
