import{_ as o,r as c,o as l,c as i,e as t,a as s,b as a,d as p}from"./app-f5876168.js";const u={},r={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator",target:"_blank",rel:"noopener noreferrer"};function d(v,n){const e=c("ExternalLinkIcon");return l(),i("div",null,[n[6]||(n[6]=t(`<h1 id="js-高级程序设计" tabindex="-1"><a class="header-anchor" href="#js-高级程序设计" aria-hidden="true">#</a> js 高级程序设计</h1><h2 id="第-1-章" tabindex="-1"><a class="header-anchor" href="#第-1-章" aria-hidden="true">#</a> 第 1 章</h2><p>1995 年，JavaScript 问世（为了处理输入验证）。</p><p>JS 快速成长为一门用来与网页交互的脚本语言，<strong>完整的 JS 实现包含</strong>：</p><ol><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ol><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>第 1 章主要介绍了 JS 的起源、发展历程、标准化，以及它在现代 web 开发中的地位。</p><p><strong>起源：</strong> JS 最初由 Netscape 公司的 Brendan Eich 开发，作为一种在浏览器中执行脚本的语言，以使页面具有动态性。</p><p><strong>发展历程：</strong> 代替服务端语言<code>处理输入验证</code> ——》设计为一种脚本语言，用于在浏览器中<code>处理用户交互</code> ——》逐渐演变为一门强大的通用编程语言，可用于<code>开发复杂的应用程序</code>。</p><p><strong>标准化：</strong> ECMAScript 定义了 JavaScript 的核心语法和特性。</p><p><strong>重要性：</strong> web 端、node 服务端、小程序、桌面端、移动端、游戏开发、数据可视化......</p><h2 id="第-2-章" tabindex="-1"><a class="header-anchor" href="#第-2-章" aria-hidden="true">#</a> 第 2 章</h2><h3 id="script" tabindex="-1"><a class="header-anchor" href="#script" aria-hidden="true">#</a> script</h3><p><strong><code>&lt;script&gt;</code> 元素下有 8 个属性：</strong></p><ol><li><strong>src：</strong> 可选。表示包含要执行的代码的外部文件。不受同源策略限制。</li><li><strong>defer：</strong> 可选。表示脚本立即下载但延迟到文档完全被解析和显示之后再执行。只对外部文件有效。</li><li><strong>async：</strong> 可选。表示应该立即开始下载脚本（不能修改 DOM），但不能阻止其他页面动作。只对外部文件有效。（不推荐）</li><li><strong>type：</strong> 可选。代替 language。表示代码块中脚本语言的内容类型（MIME 类型）。<code>如果这个值是 module，则代码会被当成 ES6 模块，而且只有这个时候代码中才能出现 import 和 export 关键字</code>。</li><li><strong>crossorigin：</strong> 可选。配置相关请求的 CORS（跨源资源共享）设置。默认不使用 CORS。</li><li><strong>integrity：</strong> 可选。允许比对收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。</li><li><strong>charset：</strong> 可选。使用 src 属性指定的代码字符集。（非重点）</li><li><strong>language：</strong> 废弃。</li></ol><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;srcipt src=&quot;demo.js&quot;&gt;
function sayScript(){
    console.log(&#39;hi, script!&#39;)
}
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述代码，浏览器只会下载并执行 demo.js 脚本文件，从而忽略行内代码 sayScript 函数。</p><p><strong>动态创建 script 元素</strong>是异步加载的，相当于添加了 async 属性。不过这样做可能有问题，因为浏览器都支持 createElement() 方法，但不是所有浏览器都支持 async 属性。因此要统一动态脚本的加载行为，可以明确设置为同步代码。<code>script.async = false</code>。</p><p>动态创建 script 获取资源对浏览器预加载是不可见的。严重影响在资源获取队列中的优先级，严重影响性能。解决该问题，需要：</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;link rel=&quot;preload&quot; href=&quot;xxxxx.js&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20)),s("p",null,[s("a",r,[n[0]||(n[0]=a("相关兼容性")),p(e)]),n[1]||(n[1]=a("可查看。"))]),n[7]||(n[7]=t(`<h3 id="行内代码-vs-外部文件" tabindex="-1"><a class="header-anchor" href="#行内代码-vs-外部文件" aria-hidden="true">#</a> 行内代码 vs 外部文件</h3><p><strong>推荐使用外部文件：</strong></p><ul><li>可维护性。</li><li>缓存。</li><li>适应未来。规避一些注释黑科技等。</li></ul><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><p>在 script 中，性能优化中推荐使用 defer，尽量不推荐 async（看情况而定）。</p><p><code>crossorigin</code> 是 <code>&lt;script&gt;</code> 标签的一个属性，而 CORS（跨源资源共享）是一种通过 HTTP 头部来允许或拒绝浏览器在一个源上请求加载的资源来处理跨域请求的机制。虽然它们都涉及到跨域，但它们解决的问题和实际应用场景有一些区别。</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>// 表示脚本请求不包含用户凭据（如 cookie 或 HTTP 认证信息），
// 即使服务器返回了相应的响应头，浏览器也不会将凭据发送给服务器。
&lt;script src=&quot;https://example.com/script.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;


// 表示脚本请求会包含用户凭据。
// 如果服务器允许使用凭据，它需要在响应中包含正确的 CORS 头部。
&lt;script src=&quot;https://example.com/script.js&quot; crossorigin=&quot;use-credentials&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CORS 通过在服务器端的 HTTP 头部中设置 <code>Access-Control-Allow-Origin</code>、<code>Access-Control-Allow-Methods</code>、<code>Access-Control-Allow-Headers</code> 等来控制允许的源、方法和头部信息。</p><h2 id="第-3-章-语言基础" tabindex="-1"><a class="header-anchor" href="#第-3-章-语言基础" aria-hidden="true">#</a> 第 3 章 语言基础</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>所谓<strong>标识符</strong>，就是变量、函数、属性或函数参数的名称。</p><ul><li>第一个字符必须是一个字母、下划线或美元符号</li><li>剩下的其他字符可以是字母、下划线、美元符号或数字</li></ul><p>推荐<strong>驼峰</strong>大小写形式。</p><p>JS 使用<strong>分号（;）</strong> 分割语句。推荐加分号。</p><ul><li>避免输入内容不完整</li><li>便于开发者通过删除空行来压缩代码</li><li>有助于在某些情况下提升性能，因为解析器会尝试在合适的位置补上分号来纠正语法错误。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不推荐</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>

<span class="token comment">// 推荐   </span>
<span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键字与保留字" tabindex="-1"><a class="header-anchor" href="#关键字与保留字" aria-hidden="true">#</a> 关键字与保留字</h3><p>保留的关键字不能用作标识符或属性名。</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p><strong>var</strong></p><ul><li>声明作用域（函数作用域）</li><li>声明提升</li></ul><p><strong>let</strong></p><ul><li>块作用域</li><li>暂时性死区（let 声明的变量不会在作用域中被提升）</li><li>全局声明（let 声明的变量不会成为 window 对象属性）</li><li>不允许重复声明</li><li>for 循环中的 let 声明</li></ul><p><strong>const</strong></p><ul><li>和 let 的区别就是 const 是常量</li></ul><p>推荐使用：const 优先，let 次之，不使用 var</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>原始类型：Undefined、Null、Boolean、Number、String、Symbol</p><p>引用类型：Object、Array、Date、RegExp、Error</p><p><strong>typeof：</strong><code>typeof value === &#39;object&#39;</code>, 则 value 值为对象（非函数）或 null，因为特殊值 null 被认为是一个对空对象的引用。null 值表示一个空对象的引用。</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>null == undefined // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>科学计数法</strong>：可以表示非常大或非常小的数值、浮点值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">3.125e7</span> <span class="token comment">// 31250000</span>
<span class="token number">3e-17</span> <span class="token comment">// 0.000 000 000 000 000 03</span>
<span class="token number">3e-7</span> <span class="token comment">// 0.000 000 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最小值：Number.MIN_VALUE</li><li>最大值：Number.MAX_VALUE</li><li>无穷大：Infinity</li><li>无穷小：-Infinity</li></ul><p><strong>NaN 特性：</strong></p><ul><li>任何涉及 NaN 的操作始终返回 NaN（如 NaN/10）</li><li>NaN 不等于包括 NaN 在内的任何值（<code>NaN == NaN // false</code>）</li></ul><p><strong>isNaN()</strong></p><p>数值转换：Number()、parseInt()、parseFloat()</p><p><strong>Number():</strong></p><ul><li>布尔值，true 转换为 1，false 转换为 0</li><li>数值，直接返回</li><li>null，返回 0</li><li>undefined， 返回 NaN</li><li>字符串， <ul><li>包含数值，返回数值</li><li>包含浮点值，返回对应的浮点值</li><li>包含 16 进制，转换为 10 进制</li><li>空字符串，返回 0</li><li>其他情况，返回 NaN</li></ul></li><li>对象，调用 valueOf() 返回值</li></ul><p><strong>parseInt():</strong> 优先于 Number() 使用。</p><ul><li>解析字符串，并返回整数。它从字符串的开头开始解析，直到遇到非数字字符为止。</li><li>第二个参数是基数，表示要解析的数字的进制。如果不提供基数，默认是 10。基数范围是 2 到 36。</li><li><code>parseInt()</code> 返回的是整数部分，忽略小数部分。</li></ul><p><strong>parseFloat()：</strong></p><ul><li><code>parseFloat()</code> 用于解析字符串，并返回浮点数。它从字符串的开头开始解析，直到遇到非数字字符为止。</li><li>如果字符串包含多个小数点，只解析第一个小数点。</li><li><code>parseFloat()</code> 会返回小数部分。</li></ul><p><strong>toString()：</strong></p><ul><li>几乎所有值都有 toString() 方法。</li><li>null 和 undefined 没有 toString() 方法。</li></ul><p><strong>String():</strong> 优先于 toString()</p><ul><li>如果有 toString() 方法，则调用该方法返回结果</li><li>如果是 null，返回 &#39;null&#39;</li><li>如果是 undefined，返回 &#39;undefined&#39;</li></ul><p><strong>Symbol(符号)：</strong> 是原始值，且实例是唯一、不可变的。</p><ul><li>用途：确保对象属性使用唯一标识符，不会发生属性冲突的危险。</li><li>Symbol() 函数不能与 new 关键字一起作为构造函数使用。</li></ul><p><strong>Symbol.for()</strong> 对每一个字符串键都执行幂等操作。</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>let fooGlobalSymbol = Symbol.for(&#39;foo&#39;) // 创建新符号
let otherFooGlobalSymbol = Symbol.for(&#39;foo&#39;) // 重用已有符号

fooGlobalSymbol === otherFooGlobalSymbol // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Symbol.keyFor():</strong></p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>// 创建全局符号
let s = Symbil.for(&#39;foo&#39;)
Symbol.keyFor(s) // foo

// 创建普通符号
let s2 = Symbol(&#39;bar&#39;)
Symbol.keyFor(s2) // undefined

Symbol.keyFor(123) // TypeError
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>object</strong> 实例都有如下属性和方法：</p><ul><li>constructor: 用于创建当前对象的函数</li><li>hasOwnProperty()：用于判断当前对象实例上存在给定的属性。</li><li>isPrototypeOf()：用于判断当前对象是否为另一个对象的原型。</li><li>propertyIsEnumerable()：用于判断给定的属性是否可以使用 for-in 语句枚举。</li><li>toLocaleString()：返回对象的字符串表示，反应对象所在的本地化执行环境。</li><li>toString()：返回对象的字符串表示。</li><li>valueOf()：返回对象对应的字符串、数值、布尔值的表示。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1, 2, 3&quot; </span>

<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据本地化规则格式化日期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h3><p><strong>按位非：</strong> 波浪符（～）表示，作用是返回数值的一补救。最终效果是对数值取反并减 1。</p><p><strong>按位与：</strong> 和号（&amp;）表示，有两个操作数。</p><p><strong>按位或：</strong> 管道符（｜）表示，同样有两个操作数。</p><p><strong>按位异或：</strong> 拖字符（^）表示，同样有两个操作数。</p><p><strong>左移：</strong> 两个小于号（&lt;&lt;）表示，会按照指定的位数将数值的所有位向左移动。</p><p><strong>有符号右移：</strong> 两个大于号（&gt;&gt;）表示，会将数值的所有 32 位都向右移，同时保留正负。实际上是左移的逆运算。</p><p><strong>无符号右移：</strong> 三个大于号（&gt;&gt;&gt;）表示，会将数值的所有 32 位都向右移。负数操作差异大。</p><p><strong>逻辑非：</strong> 叹号（!）表示。</p><p><strong>逻辑与：</strong> 两个和号（&amp;&amp;）表示，应用到 2 个值。</p><p><strong>逻辑或：</strong> 两个管道符（||）表示。</p><p><strong>乘法：</strong> 星号（<code>*</code>）表示。</p><p><strong>除法：</strong> 斜杠（/）表示。</p><p><strong>取模：</strong> 取余数，百分比（%）表示。</p><p><strong>指数操作符：</strong> 两个星号（<code>**</code>）表示。等同 Math.pow()。</p><h3 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token keyword">do</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token comment">// 不推荐</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> qs <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> hostName <span class="token operator">=</span> hostname
    <span class="token keyword">let</span> url <span class="token operator">=</span> href
<span class="token punctuation">}</span>


<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><ul><li>函数是JavaScript中的一等公民，可以作为值进行传递。</li><li>使用 <code>function</code> 关键字声明函数，可以有参数和返回值。</li><li>函数表达式和函数声明的区别。</li></ul><h2 id="第-4-章-变量、作用域与内存" tabindex="-1"><a class="header-anchor" href="#第-4-章-变量、作用域与内存" aria-hidden="true">#</a> 第 4 章 变量、作用域与内存</h2><h3 id="原始值与引用值" tabindex="-1"><a class="header-anchor" href="#原始值与引用值" aria-hidden="true">#</a> 原始值与引用值</h3><p>JS 变量可以保存两种类型的值：<code>原始值与引用值</code>。</p><ul><li>原始值大小固定，因此保存在<code>栈内存</code>上。</li><li>从一个变量到另一个变量复制原始值会创建该值的第二个副本。</li><li>引用值是对象，存储在<code>堆内存</code>上。</li><li>包含引用值的变量实际上只包含指向相应对象的一个<code>指针</code>，而不是一个对象本身。</li><li>从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。</li><li>typeof 可以确定值的<code>原始类型</code>，而 instanceof 用于确保值的<code>引用类型</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span>
    
    obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token comment">// &#39;zhangsan&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 obj 在函数内部被重写时，它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁了。</p><h3 id="执行上下文与作用域" tabindex="-1"><a class="header-anchor" href="#执行上下文与作用域" aria-hidden="true">#</a> 执行上下文与作用域</h3><p><code>执行上下文（作用域）</code>决定变量的生命周期，以及它们可以访问代码的哪些部分。</p><ul><li>执行上下文分为<code>全局上下文、函数上下文、块级上下文</code>。</li><li>代码执行流每进入一个新上下文，都会创建一个<code>作用域链</code>，用于搜索变量和函数。</li><li>函数、块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。</li><li>全局上下文只能访问全局变量和函数，不能直接访问局部上下文的数据。</li><li>变量的执行上下文用于确定什么时候释放内存。</li></ul><h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><p>JS 是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收。</p><ul><li>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除。</li><li>主流的垃圾回收算法是<code>标记清除</code>，即先给当前不使用的值加上标记，再回来回收它们的内存。</li><li><code>引用计数</code>是另外一种垃圾回收策略，需要记录值被引用了多少次。（被弃用）</li><li>引用计数在代码中存在循环引用时会出现问题。</li><li>解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。（推荐）</li></ul><h2 id="第-5-章-基本引用类型" tabindex="-1"><a class="header-anchor" href="#第-5-章-基本引用类型" aria-hidden="true">#</a> 第 5 章 基本引用类型</h2><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> Date</h3><p>Date 类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取当前日期和时间</span>
<span class="token keyword">const</span> currentDateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取年、月、日、时、分、秒</span>
<span class="token keyword">const</span> year <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> month <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0-11</span>
<span class="token keyword">const</span> day <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hours <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> minutes <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> seconds <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取毫秒数和星期几</span>
<span class="token keyword">const</span> milliseconds <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> dayOfWeek <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0-6，0 表示星期日</span>

<span class="token comment">// 设置年、月、日、时、分、秒</span>
currentDateTime<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
currentDateTime<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0-11</span>
currentDateTime<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
currentDateTime<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
currentDateTime<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
currentDateTime<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 \`toLocaleString()\` 格式化日期</span>
<span class="token keyword">const</span> formattedDate <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取当前时间戳</span>
<span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="regexp" tabindex="-1"><a class="header-anchor" href="#regexp" aria-hidden="true">#</a> RegExp</h3><p><code>RegExp</code>（正则表达式）是 JavaScript 中用于处理字符串匹配的对象。正则表达式是一种强大的工具，用于在文本中进行搜索、匹配和替换操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 字面量表示法</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token comment">// 构造函数表示法</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正则表达式的模式语法：</strong></p><ol><li><strong>普通字符：</strong> 匹配文本中的普通字符。</li><li><strong>元字符：</strong> 具有特殊含义的字符，如 <code>^</code>、<code>$</code>、<code>.</code>、<code>*</code>、<code>+</code>、<code>?</code> 等。</li><li><strong>字符类：</strong> 使用 <code>[]</code> 表示一组字符，如 <code>[a-z]</code> 表示匹配任意小写字母。</li><li><strong>转义字符：</strong> 使用 \`\` 对特殊字符进行转义。</li></ol><p><strong>正则表达式的方法：</strong></p><ol><li><strong><code>test()</code> 方法：</strong></li></ol><ul><li>检测字符串是否匹配正则表达式，返回布尔值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong><code>exec()</code> 方法：</strong></li></ol><ul><li>在字符串中查找匹配正则表达式的内容，返回匹配结果的信息。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回匹配结果的信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong><code>match()</code> 方法：</strong></li></ol><ul><li>在字符串中查找匹配正则表达式的内容，返回匹配结果的数组。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回匹配结果的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong><code>search()</code> 方法：</strong></li></ol><ul><li>在字符串中查找匹配正则表达式的位置，返回第一个匹配的索引。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resultIndex <span class="token operator">=</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回匹配结果的索引</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong><code>replace()</code> 方法：</strong></li></ol><ul><li>替换字符串中匹配正则表达式的部分。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回替换后的字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正则表达式的修饰符：</strong></p><ol><li><strong><code>i</code> 修饰符：</strong></li></ol><ul><li>表示匹配时不区分大小写。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong><code>g</code> 修饰符：</strong></li></ol><ul><li>表示匹配所有结果，而不仅仅是第一个。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong><code>m</code> 修饰符：</strong></li></ol><ul><li>表示多行匹配。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">m</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="原始值包装类型" tabindex="-1"><a class="header-anchor" href="#原始值包装类型" aria-hidden="true">#</a> 原始值包装类型</h3><p>JavaScript 中的原始值包装类型是一种特殊的对象，用于提供对原始值的一些额外功能和方法。有 3 种原始值包装类型：<code>Boolean、Number、String</code>。</p><ul><li>每种包装类型都映射到同名的原始类型。</li><li>以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。</li><li>涉及原始值的语句执行完毕后，包装对象就会被销毁。</li></ul><p><strong>Boolean：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> valueOf <span class="token operator">=</span> bool<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取布尔值的原始值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Number：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> toFixed <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 将数字转换为字符串，并保留两位小数</span>
<span class="token keyword">const</span> toExponential <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 将数字转换为科学计数法的字符串表示</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>String：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 获取字符串长度</span>
<span class="token keyword">const</span> charAt <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取索引为 0 的字符</span>
<span class="token keyword">const</span> toUpperCase <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串转换为大写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JS 会在原始值上调用方法时自动创建相应的包装对象，然后调用方法。这被称为<code>“自动包装”</code>。</li><li>原始值是不可变的，而包装对象是可变的。</li><li>原始值的比较使用 <code>===</code> 运算符，而包装对象的比较可能需要使用对象比较的规则。</li></ul><p><strong>虽然可以使用包装对象的方法，但通常更推荐直接在原始值上调用方法，而不是使用包装对象。JavaScript 引擎会在必要时自动进行包装。</strong></p><h3 id="单例内置对象" tabindex="-1"><a class="header-anchor" href="#单例内置对象" aria-hidden="true">#</a> 单例内置对象</h3><p>在 JavaScript 中，有一些内置的对象被设计成单例模式，意味着整个程序中只存在一个实例。这些对象提供了一些全局共享的功能，可以在任何地方访问。</p><p>当代码开始执行时，全局上下文中会存在两个内置对象：<code>Global 和 Math</code>。</p><p><strong>Global 对象</strong>：</p><ul><li>在浏览器环境中，<code>global</code> 对象通常被称为 <code>window</code> 对象。</li><li>在 Node.js 环境中，<code>global</code> 对象是一个全局作用域，用于定义全局变量或函数。</li><li><code>global</code> 对象是所有全局变量的容器。</li><li>如果你在代码中定义一个变量，但没有使用 <code>var</code>、<code>let</code> 或 <code>const</code> 关键字声明它，那么这个变量将被视为 <code>global</code> 对象的属性。</li></ul><p><strong>Math 对象</strong>：</p><p>Math 对象包含辅助完成复杂计算的属性和方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>         <span class="token comment">// 获取圆周率</span>
<span class="token keyword">const</span> sqrt <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 计算平方根</span>
<span class="token keyword">const</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个随机数</span>
<span class="token keyword">const</span> absoluteValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
<span class="token keyword">const</span> roundedUp <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">4.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
<span class="token keyword">const</span> roundedDown <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token keyword">const</span> rounded <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
<span class="token keyword">const</span> maxNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
<span class="token keyword">const</span> minNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token keyword">const</span> powerResult <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token comment">// 或者</span>
<span class="token keyword">const</span> powerResultAlt <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>

<span class="token keyword">const</span> sinValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token keyword">const</span> angleInRadians <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// 180 度转弧度</span>
<span class="token keyword">const</span> cosValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>angleInRadians<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

<span class="token keyword">const</span> angleInRadians <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 45 度转弧度</span>
<span class="token keyword">const</span> tanValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>angleInRadians<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-6-章-集合引用类型" tabindex="-1"><a class="header-anchor" href="#第-6-章-集合引用类型" aria-hidden="true">#</a> 第 6 章 集合引用类型</h2><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><p>对象是一种无序的集合，使用键值对存储数据。键是字符串或符号，值可以是任意类型的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&#39;New York&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> keysArray <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// keysArray: [&#39;name&#39;, &#39;age&#39;, &#39;city&#39;]</span>

<span class="token keyword">const</span> valuesArray <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// valuesArray: [&#39;John&#39;, 25, &#39;New York&#39;]</span>

<span class="token keyword">const</span> entriesArray <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// entriesArray: [[&#39;name&#39;, &#39;John&#39;], [&#39;age&#39;, 25], [&#39;city&#39;, &#39;New York&#39;]]</span>

<span class="token keyword">const</span> numberOfProperties <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">// numberOfProperties: 3</span>

<span class="token keyword">const</span> hasNameProperty <span class="token operator">=</span> myObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">const</span> hasToStringProperty <span class="token operator">=</span> myObject<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;toString&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>


<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// result: { a: 1, b: 3, c: 4 }</span>

<span class="token comment">// 冻结对象，使其不可修改。冻结的对象不能添加、删除或修改属性。</span>
<span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 之后任何修改操作都会失败，如 myObject.name = &#39;Jane&#39;;</span>

<span class="token comment">// 封闭对象，使其不能添加新属性，但可以修改或删除现有属性。</span>
<span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 之后不能添加新属性，但可以修改或删除属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><p>数组是一种有序的集合，可以存储任意类型的值。通过索引访问数组中的元素，数组的长度是动态可变的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newLength <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [1, 2, 3, 4, 5], newLength: 5</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> removedElement <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [1, 2], removedElement: 3</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newLength <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [0, 1, 2, 3], newLength: 4</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> removedElement <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [2, 3], removedElement: 1</span>

<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> combinedArray <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// combinedArray: [1, 2, 3, 4]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> slicedArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// slicedArray: [2, 3, 4]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> removedElements <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// arr: [1, 6, 7, 4, 5], removedElements: [2, 3]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// index: 2</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lastIndex <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// lastIndex: 4</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> includesElement <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// includesElement: true</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;apple, banana, orange&quot;</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr: [4, 3, 2, 1]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr: [1, 1, 2, 3, 4, 5, 9]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Element at index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：</span>
<span class="token comment">// Element at index 0: 1</span>
<span class="token comment">// Element at index 1: 2</span>
<span class="token comment">// Element at index 2: 3</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> squaredValues <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// squaredValues: [1, 4, 9]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> evenNumbers <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// evenNumbers: [2, 4]</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// sum: 10</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> allEven <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// allEven: true</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hasOdd <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// hasOdd: true</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">&gt;</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// index: 2</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr: [1, 2, 0, 0]</span>

<span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// newArray: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>

<span class="token keyword">const</span> newArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// newArray: [1, &#39;two&#39;, 3]</span>

Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">&#39;not an array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定型数组" tabindex="-1"><a class="header-anchor" href="#定型数组" aria-hidden="true">#</a> 定型数组</h3><p>JavaScript 提供了一种被称为 <code>&quot;TypedArray&quot;</code> 的定型数组，它允许直接操作内存，处理二进制数据，以及在底层使用固定大小的数据类型。TypedArray 是 ECMAScript 6 引入的新特性。</p><p>下面是一些常见的 TypedArray 类型：</p><ol><li><strong><code>Int8Array</code>、<code>Uint8Array</code>、<code>Uint8ClampedArray</code>：</strong></li></ol><ul><li>表示有符号 8 位整数数组、无符号 8 位整数数组、无符号 8 位整数数组（取值范围在 0 到 255 之间，超过边界的值会被截断）。</li></ul><ol start="2"><li><strong><code>Int16Array</code>、<code>Uint16Array</code>：</strong></li></ol><ul><li>表示有符号 16 位整数数组、无符号 16 位整数数组。</li></ul><ol start="3"><li><strong><code>Int32Array</code>、<code>Uint32Array</code>：</strong></li></ol><ul><li>表示有符号 32 位整数数组、无符号 32 位整数数组。</li></ul><ol start="4"><li><strong><code>Float32Array</code>：</strong></li></ol><ul><li>表示 32 位浮点数数组。</li></ul><ol start="5"><li><strong><code>Float64Array</code>：</strong></li></ol><ul><li>表示 64 位双精度浮点数数组。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个 Int32Array，长度为 4</span>
<span class="token keyword">const</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置元素值</span>
intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
intArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
intArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
intArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2023</span><span class="token punctuation">;</span>

<span class="token comment">// 获取元素值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>intArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2023</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypedArray 提供了一些额外的方法，例如 <code>set</code>、<code>subarray</code> 等，用于更灵活地操作数组的子集和复制。这对于处理二进制数据非常有用，比如处理图像数据、音频数据等。请注意，TypedArray 不同于普通的 JavaScript 数组，因为它们具有固定的长度和元素类型。</p><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><p><code>Map</code> 是 ES6 引入的集合数据结构，它存储键值对，类似于对象，但键可以是任意数据类型。</p><p>与普通的对象相比，<code>Map</code> 有一些优势，其中一些主要的特性包括：</p><ol><li><strong>键的数据类型：</strong></li></ol><ul><li>在 <code>Map</code> 中，键可以是任意数据类型，包括原始类型和对象引用。而在普通对象中，键只能是字符串或 Symbol。</li></ul><ol start="2"><li><strong>键值对的顺序：</strong></li></ol><ul><li><code>Map</code> 会保持键值对的插入顺序。当迭代 <code>Map</code> 时，元素的顺序是按照插入的顺序。</li></ul><ol start="3"><li><strong>Map 的大小：</strong></li></ol><ul><li>通过 <code>size</code> 属性可以轻松获取 <code>Map</code> 的大小，而对象的属性数量需要手动计算。</li></ul><ol start="4"><li><strong>内存占用：</strong></li></ol><ul><li>固定大小的内存中，Map 大约可以比 Object 多存储 50% 的键值对。</li></ul><ol start="5"><li><strong>插入性能：</strong></li></ol><ul><li>Map 插入新键值对会稍微比 Object 快一点。如果代码涉及大量插入操作，那么 Map 性能更好。</li></ul><ol start="6"><li><strong>查找速度：</strong></li></ol><ul><li>如果包含少量键值对，Object 有时候速度更快。如果代码涉及大量查找操作，那么某些情况下选择 Object 更好一些。</li></ul><ol start="7"><li><strong>删除性能：</strong></li></ol><ul><li>Map 的 delete() 操作都比插入和查找更快。如果代码涉及大量删除操作，选 Map。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个空的 Map</span>
<span class="token keyword">const</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加键值对</span>
myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: value1</span>

<span class="token comment">// 检查是否包含某个键</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>

<span class="token comment">// 获取 Map 的大小</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span>

<span class="token comment">// 迭代 Map</span>
myMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除键值对</span>
myMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Map</code> 是一个灵活且强大的数据结构，特别适用于需要使用不同类型的键以及保持插入顺序的场景。</p><h3 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap" aria-hidden="true">#</a> WeakMap</h3><p><code>WeakMap</code> 是与 <code>Map</code> 类似的集合类型，但它们对于包含的对象是弱引用，这意味着在其他地方没有引用时，这些对象可以被垃圾回收。</p><p>与 <code>Map</code> 在某些方面有些相似，但有一些关键的区别。</p><ol><li><strong>弱引用键：</strong></li></ol><ul><li><code>WeakMap</code> 的键必须是对象，而且是弱引用。这意味着如果没有其他引用指向键，它可能会被垃圾回收。</li></ul><ol start="2"><li><strong>不可迭代和无法清空：</strong></li></ol><ul><li>与 <code>Map</code> 不同，<code>WeakMap</code> 不提供像 <code>forEach</code> 方法这样的迭代方法，也没有 <code>clear</code> 方法。这是因为键是弱引用的，迭代和清空操作可能导致不确定的行为。</li></ul><ol start="3"><li><strong>没有 size 属性：</strong></li></ol><ul><li><code>WeakMap</code> 没有类似 <code>Map</code> 的 <code>size</code> 属性，因为它不提供直接访问所有键值对的方法。</li></ul><ol start="4"><li><strong>不可遍历：</strong></li></ol><ul><li>由于没有类似 <code>Map</code> 的 <code>keys</code>、<code>values</code> 和 <code>entries</code> 方法，<code>WeakMap</code> 不可被直接遍历。这是为了防止泄漏弱引用对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个 WeakMap</span>
<span class="token keyword">const</span> myWeakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建两个对象作为键</span>
<span class="token keyword">const</span> key1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> key2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 向 WeakMap 中添加键值对</span>
myWeakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myWeakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key2<span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWeakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &#39;value1&#39;</span>

<span class="token comment">// 检查是否包含某个键</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWeakMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>

<span class="token comment">// 删除键值对</span>
myWeakMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWeakMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WeakMap</code> 在某些场景下很有用，特别是在需要关联数据而不希望阻止垃圾回收的情况下。例如，你可以使用 <code>WeakMap</code> 来存储对象的私有数据，而这些数据在对象被销毁时会自动被回收。但请注意，由于 <code>WeakMap</code> 的键是弱引用的，需要谨慎使用，以避免出现不可预测的结果。</p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p><code>Set</code> 是 ES6 引入的集合数据结构，它存储唯一的值，不允许重复。</p><p>与 <code>Array</code> 不同，<code>Set</code> 不是按照插入顺序来保存元素的，而是根据元素的值来保持唯一性。</p><ol><li><strong>元素的唯一性：</strong></li></ol><ul><li><code>Set</code> 中的元素必须是唯一的。如果尝试添加已存在的元素，<code>Set</code> 不会进行任何操作。</li></ul><ol start="2"><li><strong>无重复值：</strong></li></ol><ul><li><code>Set</code> 不允许相同的值存在于集合中。这使得 <code>Set</code> 成为存储唯一值的有序列表的好选择。</li></ul><ol start="3"><li><strong>没有键值对：</strong></li></ol><ul><li><code>Set</code> 中的元素就是值本身，没有键值对的概念。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个空的 Set</span>
<span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加元素</span>
mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 重复添加相同的元素不会生效</span>
mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查元素是否存在</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>

<span class="token comment">// 获取 Set 的大小</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span>

<span class="token comment">// 删除元素</span>
mySet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 遍历 Set</span>
mySet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 清空 Set</span>
mySet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Set</code> 是一个非常有用的数据结构，特别适用于需要存储唯一值的场景。在实际应用中，它可以用于去重、存储一组不同的值等。需要注意的是，<code>Set</code> 中的元素比较是使用严格相等运算符（<code>===</code>）进行的，因此在比较对象时要确保引用相同。</p><h3 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset" aria-hidden="true">#</a> WeakSet</h3><p><code>WeakSet</code> 是与 <code>Set</code> 类似的集合类型，但它们对于包含的对象是弱引用，这意味着在其他地方没有引用时，这些对象可以被垃圾回收。</p><ol><li><strong>只能包含对象：</strong></li></ol><ul><li><code>WeakSet</code> 只能包含对象，而不能包含原始值或其他类型的值。</li></ul><ol start="2"><li><strong>弱引用：</strong></li></ol><ul><li><code>WeakSet</code> 中的对象是弱引用的，不会阻止这些对象被垃圾回收。</li></ul><ol start="3"><li><strong>无法遍历：</strong></li></ol><ul><li>由于弱引用的特性，<code>WeakSet</code> 不提供像 <code>Set</code> 那样的遍历方法（比如 <code>forEach</code>）。因此，你不能列出 <code>WeakSet</code> 中的元素。</li></ul><ol start="4"><li><strong>没有 size 属性：</strong></li></ol><ul><li>与 <code>Set</code> 不同，<code>WeakSet</code> 没有类似 <code>size</code> 的属性，因为你不能获取 <code>WeakSet</code> 中的元素数量。</li></ul><ol start="5"><li><strong>没有清空方法：</strong></li></ol><ul><li>由于弱引用，<code>WeakSet</code> 没有类似 <code>clear</code> 的方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个空的 WeakSet</span>
<span class="token keyword">const</span> myWeakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建两个对象作为元素</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 添加元素</span>
myWeakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
myWeakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查元素是否存在</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWeakSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>

<span class="token comment">// 由于是弱引用，即使将对象赋值为 null，也不会阻止垃圾回收</span>
obj1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 检查元素是否存在（由于垃圾回收，应该输出 false）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myWeakSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WeakSet</code> 主要用于存储对象的弱引用，例如在一些特定的场景中，你希望在其他地方不再引用某个对象时，该对象能够被垃圾回收。</p><h3 id="迭代和扩展操作" tabindex="-1"><a class="header-anchor" href="#迭代和扩展操作" aria-hidden="true">#</a> 迭代和扩展操作</h3><p>迭代和扩展操作是 JavaScript 中的一些重要概念，它们涉及到对集合（例如数组、对象、Map、Set 等）的遍历和操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用于遍历可迭代对象的元素，例如数组、字符串、Map、Set 等。</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> element <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用于遍历对象的可枚举属性。不推荐用于遍历数组。</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 展开数组</span>
<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 展开对象</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 从类数组对象或可迭代对象创建一个新数组。</span>
<span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-7-章-迭代器与生成器" tabindex="-1"><a class="header-anchor" href="#第-7-章-迭代器与生成器" aria-hidden="true">#</a> 第 7 章 迭代器与生成器</h2><p>ES6 规范新增了 2 个高级特性：<code>迭代器和生成器</code>。</p><h3 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式" aria-hidden="true">#</a> 迭代器模式</h3><p>JavaScript 中的迭代器是一种<code>设计模式</code>，它提供了一种遍历容器（如数组、字符串或其他可迭代对象）的方法。</p><ul><li>迭代器是一个可以<code>由任意对象实现的接口</code>，支持连续获取对象产出的每一个值。</li><li>任何实现 Iterable 接口的对象都有一个 <code>Symbol.iterator 属性</code>，这个属性引用默认迭代器。</li><li>默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现 Iterator 接口的对象。</li><li>迭代器必须通过连续调用 <code>next()</code> 方法才能连续取的值，这个方法返回一个 IteratorObject。</li><li>这个对象包含一个 <code>done 属性</code>和一个 <code>value 属性</code>。</li><li>done 是一个布尔值，表示是否还有更多值可以访问。</li><li>value 包含迭代器返回的当前值。</li><li>这个接口可以通过手动反复调用 next() 方法来消费，也可以通过原生消费者，比如 for-of 循环来自动消费。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 迭代器对象</span>
<span class="token keyword">class</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>collection <span class="token operator">=</span> collection<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取下一个元素</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>collection<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 可迭代对象</span>
<span class="token keyword">class</span> <span class="token class-name">Iterable</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>collection <span class="token operator">=</span> collection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取迭代器对象</span>
  <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用迭代器遍历集合</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iterable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Iterable</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iterator <span class="token operator">=</span> iterable<span class="token punctuation">.</span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>迭代器在<code>处理大量数据</code>时非常有用，可以按需生成数据，而不必一次性加载整个集合。</li><li>可以通过迭代器<code>实现自定义数据结构的遍历</code>。</li></ul><h3 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器" aria-hidden="true">#</a> 生成器</h3><p>在 JavaScript 中，生成器（Generator）是一种特殊类型的函数，它允许你在需要时暂停和恢复函数的执行。生成器函数使用 <code>function*</code> 关键字进行定义，并包含一个或多个使用 <code>yield</code> 语句产生值的区块。生成器提供了一种更灵活的控制流，特别适用于异步编程。</p><ul><li>生成器是一种<code>特殊的函数</code>，调用之后会返回一个<code>生成器对象</code>。</li><li>生成器对象实现了 Iterable 接口，因此可用在任何消费可迭代对象的地方。</li><li>生成器的独特之处在于支持 <code>yield</code> 关键字，这个关键字能暂停执行生成器函数。</li><li>使用 yield 关键字还可以通过 <code>next()</code> 方法接受输入和产生输出。</li><li>在加上<code>星号</code>之后，yield 关键字可以将跟它后边的可迭代对象序列化为一连串值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义生成器函数</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用生成器函数不会执行函数体，而是返回一个生成器对象。</span>
<span class="token comment">// 可以通过调用生成器对象的 \`next()\` 方法来启动或恢复生成器的执行。</span>
<span class="token keyword">let</span> gen <span class="token operator">=</span> <span class="token function">myGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: 1, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: 2, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: 3, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: undefined, done: true }</span>

<span class="token comment">// 生成器与 Promise 一起使用，可以实现更具可读性和易维护性的异步代码。</span>
<span class="token comment">// async/await 就是生成器的语法糖</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">asyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fetchData 返回一个 Promise</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runAsyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">asyncGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理异步结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-8-章-对象、类与面向对象编程" tabindex="-1"><a class="header-anchor" href="#第-8-章-对象、类与面向对象编程" aria-hidden="true">#</a> 第 8 章 对象、类与面向对象编程</h2><h3 id="理解对象" tabindex="-1"><a class="header-anchor" href="#理解对象" aria-hidden="true">#</a> 理解对象</h3><p><code>对象</code>：一组属性的无序集合。</p><p><code>Object.defineProperty()</code> 是 JavaScript 中用于定义或修改对象属性的方法。</p><p>通过这个方法，你可以精确地控制属性的行为，包括<code>可写性、可枚举性、可配置性</code>等。</p><p>该方法接受三个参数：<code>要定义属性的对象、属性名和属性描述符对象</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>obj：</strong> 要定义属性的对象。</li><li><strong>prop：</strong> 要定义或修改的属性名。</li><li><strong>descriptor：</strong> 包含属性特性的对象，可以设置以下属性： <ul><li><strong>value：</strong> 属性的值，默认为 <code>undefined</code>。</li><li><strong>writable：</strong> 属性是否可写，布尔值，默认为 <code>false</code>。</li><li><strong>enumerable：</strong> 属性是否可枚举，布尔值，默认为 <code>false</code>。</li><li><strong>configurable：</strong> 属性是否可配置，布尔值，默认为 <code>false</code>。</li><li><strong>get：</strong> 一个获取属性值的函数。</li><li><strong>set：</strong> 一个设置属性值的函数。</li></ul></li></ul><h4 id="数据属性" tabindex="-1"><a class="header-anchor" href="#数据属性" aria-hidden="true">#</a> 数据属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问器属性" tabindex="-1"><a class="header-anchor" href="#访问器属性" aria-hidden="true">#</a> 访问器属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Getting name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Setting name to&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Setting name to Alice</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Getting name, Alice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可配置性" tabindex="-1"><a class="header-anchor" href="#可配置性" aria-hidden="true">#</a> 可配置性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// Error: Cannot delete property &#39;name&#39; of object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object.defineProperty()</code> 允许你更细致地控制对象属性的行为，特别是在创建或修改对象的属性时非常有用。</p><p>Vue2 的数据响应式的原理就是借用了 <code>Object.defineProperty()</code></p><h4 id="定义多个属性" tabindex="-1"><a class="header-anchor" href="#定义多个属性" aria-hidden="true">#</a> 定义多个属性</h4><p><code>Object.defineProperties()</code> 是 JavaScript 中用于定义或修改多个对象属性的方法。</p><p>与 <code>Object.defineProperty()</code> 不同，<code>Object.defineProperties()</code> 接受两个参数：要定义属性的对象和一个包含多个属性描述符的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> descriptors<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>obj：</strong> 要定义属性的对象。</li><li><strong>descriptors：</strong> 包含多个属性特性的对象，其中每个键值对的键是属性名，值是属性描述符对象，描述符对象的结构与 <code>Object.defineProperty()</code> 中的描述符相同。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sayHello</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读取属性的特性" tabindex="-1"><a class="header-anchor" href="#读取属性的特性" aria-hidden="true">#</a> 读取属性的特性</h4><p><code>Object.getOwnPropertyDescriptor()</code> 是 JavaScript 中用于获取对象属性描述符的方法。它接受两个参数：要获取属性描述符的对象和属性名，然后返回一个包含该属性特性的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>obj：</strong> 要获取属性描述符的对象。</li><li><strong>prop：</strong> 要获取的属性名。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output:</span>
<span class="token comment">// {</span>
<span class="token comment">//    value: &#39;John&#39;,</span>
<span class="token comment">//    writable: true,</span>
<span class="token comment">//    enumerable: true,</span>
<span class="token comment">//    configurable: true</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法常用于检查属性的特性，特别是在进行属性的复杂操作或者在使用 <code>Object.defineProperty()</code> 时需要了解已有特性的情况。</p><h4 id="合并对象" tabindex="-1"><a class="header-anchor" href="#合并对象" aria-hidden="true">#</a> 合并对象</h4><p><code>Object.assign()</code> 是 JavaScript 中用于将一个或多个源对象的属性复制到目标对象的方法。它是一个浅拷贝操作，只复制对象的属性值，不复制对象的引用。如果目标对象已经有相同属性名的属性，它们将被后面的源对象覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token operator">...</span>sources<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>target：</strong> 目标对象，将源对象的属性复制到这个对象。</li><li><strong>sources：</strong> 一个或多个源对象，它们的属性将被复制到目标对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output: { a: 1, b: 3, c: 4, d: 5 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Object.assign()</code> 不会递归复制对象内部的对象，而是复制对象的引用。如果源对象的属性值是对象，它们仍然会被视为同一对象。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 Object.assign() 克隆对象</span>
<span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output: { a: 1, b: { c: 2 } }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b <span class="token operator">===</span> clone<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，因为是浅拷贝</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象标识与相等判定" tabindex="-1"><a class="header-anchor" href="#对象标识与相等判定" aria-hidden="true">#</a> 对象标识与相等判定</h4><p><code>对象标识</code>指的是对象在内存中的唯一标识符。两个不同的对象具有不同的标识。可以使用 <code>===</code> 操作符来比较对象的标识。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，不同的对象标识</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>相等判定</code>是指比较对象的值是否相等。可以使用 <code>==</code> 或 <code>===</code> 进行相等判定。相等判定的结果取决于比较操作符的类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，因为对象标识不同</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name <span class="token operator">==</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，比较对象属性值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object.is()</code> 是 JavaScript 中用于比较两个值是否严格相等的方法。它的行为与 <code>===</code> 运算符相似，但有一些区别。主要的区别在于 <code>Object.is()</code> 对于特殊值（+0、-0、NaN）的处理以及对对象的处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增强的对象语法" tabindex="-1"><a class="header-anchor" href="#增强的对象语法" aria-hidden="true">#</a> 增强的对象语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 属性值的简写</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 方法的简写</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 计算属性名</span>
<span class="token keyword">let</span> prop <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象解构" tabindex="-1"><a class="header-anchor" href="#对象解构" aria-hidden="true">#</a> 对象解构</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对象的解构</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;John&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 30</span>

<span class="token comment">// 别名</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用对象解构，同时给变量取别名</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> fullName<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> years <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;John&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>years<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 30</span>

<span class="token comment">// 默认值</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 使用对象解构，设置默认值</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">25</span> <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;John&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 25，age 没有在 person 对象中定义，使用了默认值</span>

<span class="token comment">// 嵌套解构</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">zip</span><span class="token operator">:</span> <span class="token string">&quot;10001&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 嵌套对象解构</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token punctuation">,</span> zip <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;John&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;New York&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zip<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;10001&quot;</span>

<span class="token comment">// 剩余属性</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;John&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { age: 30, city: &quot;New York&quot; }</span>

<span class="token comment">// 扩展运算符</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> additionalInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">occupation</span><span class="token operator">:</span> <span class="token string">&quot;Developer&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> combined <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> <span class="token operator">...</span>additionalInfo <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象" aria-hidden="true">#</a> 创建对象</h3><h4 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h4><p>使用工厂函数来创建对象，工厂函数实际上是一个返回新对象的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span>
        <span class="token literal-property property">gender</span><span class="token operator">:</span> gender
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工厂模式虽然可以解决创建多个类似对象的问题，但是没有解决对象标识问题（即新创建对象是什么类型）</strong></p><h4 id="构造函数模式" tabindex="-1"><a class="header-anchor" href="#构造函数模式" aria-hidden="true">#</a> 构造函数模式</h4><p>构造函数模式是一种使用构造函数来创建对象的方式。通过使用 <code>new</code> 关键字调用构造函数，可以创建一个新的对象，并且构造函数中的 <code>this</code> 关键字引用了这个新创建的对象。</p><p><code>构造函数名称的首字母都是要大写的。</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 构造函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 this 关键字引用新创建的对象</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>

    <span class="token comment">// 如果需要添加方法，也可以在构造函数内部定义</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, my name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用构造函数创建对象</span>
<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;Female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 访问属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 25</span>

<span class="token comment">// 调用方法</span>
person1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, my name is John</span>
person2<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, my name is Alice</span>

person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>
person1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义自定义构造函数可以确保实例被标识为特定类型，相比工厂模式，这是一个很大的好处。但是也有一个弊端，就是导致自定义类型引用的代码不能很好的聚集在一起。</strong></p><h4 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式" aria-hidden="true">#</a> 原型模式</h4><p>对象的原型模式是 JavaScript 中的一种<code>创建和继承对象的方式</code>。</p><p>每个对象都有一个<code>原型（prototype）属性</code>，原型是一个对象，它包含可以被共享的属性和方法。</p><p>当试图访问一个对象的属性或方法时，如果对象本身没有定义这个属性或方法，JavaScript 会从对象的<code>原型链</code>中寻找。</p><p>对象的原型链指的是从对象自身开始，一直到达原型链的顶端。可以通过对象的 <code>__proto__</code> 属性访问其原型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意的是，如果在构造函数中定义方法，每次创建对象时都会为该方法分配新的内存空间。如果有多个实例共享相同的方法，推荐将方法定义在构造函数的原型上，以避免每次创建对象都复制一份方法。</p></blockquote><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>function Person(name, age, gender) {
    this.name = name;
    this.age = age;
    this.gender = gender;
}

// 在构造函数的原型上定义方法
Person.prototype.sayHello = function() {
    console.log(&quot;Hello, my name is &quot; + this.name);
};

let person1 = new Person(&quot;John&quot;, 30, &quot;Male&quot;);
let person2 = new Person(&quot;Alice&quot;, 25, &quot;Female&quot;);

person1.sayHello(); // Hello, my name is John
person2.sayHello(); // Hello, my name is Alice

person1 instanceof Object // true
person1 instanceof Person // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>isPrototypeOf()</code> 是 JavaScript 中 <code>Object</code> 对象的一个方法，用于检测一个对象是否是另一个对象的原型。该方法返回一个布尔值，如果调用该方法的对象是传入的对象的原型，返回 <code>true</code>，否则返回 <code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个原型对象</span>
<span class="token keyword">let</span> personPrototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个对象，并将 personPrototype 设置为其原型</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personPrototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 isPrototypeOf() 判断原型关系</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personPrototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 使用 Object.getPrototypeOf() 获取对象的原型 </span>
<span class="token keyword">let</span> prototypeOfPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prototypeOfPerson <span class="token operator">===</span> personPrototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object.setPrototypeOf()</code>可能会严重影响代码性能。不推荐。</p><p>为了避免使用 Object.setPrototypeOf() 可能造成的性能下降，可以通过 Object.create() 来创建一个新对象，同时为其指定原型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> biped <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">numLength</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>biped<span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Matt&#39;</span>

person<span class="token punctuation">.</span>name <span class="token comment">// Matt</span>
person<span class="token punctuation">.</span>numLength <span class="token comment">// 2</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token operator">===</span> biped <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Object.keys(obj):</strong> 返回一个包含对象所有可枚举属性的数组。</li><li><strong>Object.values(obj):</strong> 返回一个包含对象所有可枚举属性值的数组。</li><li><strong>Object.entries(obj):</strong> 返回一个包含对象所有可枚举属性键值对的数组。</li><li><strong>Object.hasOwnProperty(prop):</strong> 检查对象是否包含指定属性，不会检查原型链。</li></ul><p><code>for-in</code> 循环和 <code>Object.assign()</code> 的枚举顺序是不确定的，取决于 js 引擎，可能因浏览器而异。</p><p><code>Object.getOwnPropertyNames()、Object.getOwnPropertySymbols()、Object.assgin()</code> 的枚举顺序是确定性的。先以升序枚举数值键，然后以插入顺序枚举字符串和符号键。</p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>很多面向对象语言都支持两种继承：<code>接口继承和实现继承</code>。</p><p><code>实现继承</code>是 ECMAScript 唯一支持的继承方式，而这主要是通过<code>原型链实现</code>的。</p><h4 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h4><p>原型链继承方式的基本思想：<code>通过原型继承多个引用类型的属性和方法。</code></p><p>构造函数、原型和实例的关系：<code>每个构造函数都有一个原型对象，原型有一个属性指向构造函数，而实例有一个内部指针指向原型</code>。</p><p><code>原型链</code>是 JavaScript 中用于实现对象继承的一种机制。每个对象都有一个原型对象，而原型对象也可以有自己的原型，形成一个链式结构。</p><p>通过原型链，JavaScript 实现了对象之间的继承关系。子对象可以访问父对象的属性和方法，形成了一种基于原型的继承。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父构造函数</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在父构造函数的原型上添加方法</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Generic animal sound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子构造函数</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现对父构造函数的属性继承</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过原型链继承</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>

<span class="token comment">// 创建子对象实例</span>
<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用继承的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型链继承的问题</strong></p><ol><li>共享问题</li></ol><p>原型链继承导致子对象实例共享父对象原型上的属性和方法。如果在子对象实例上修改原型上的属性，会影响到所有子对象实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Max&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Labrador&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

dog1<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound</span>
dog2<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound</span>

<span class="token comment">// 修改原型上的属性，会影响所有子对象实例</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Woof! Woof!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

dog1<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Woof! Woof!</span>
dog2<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Woof! Woof!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>构造函数参数传递问题</li></ol><p>在原型链继承中，子构造函数调用父构造函数时传递的参数存在一定的限制，可能不够灵活。无法在创建子对象实例时向父构造函数传递参数，因为父构造函数的调用发生在子对象实例创建之前。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;DefaultName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法传递具体的名字参数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DefaultName</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>原型链深层次的问题</li></ol><p>在原型链继承中，可能会存在多层嵌套的原型链，导致属性查找的性能问题。在查找属性时，如果找不到，JavaScript 引擎会沿着原型链向上查找，直到找到或者到达链的顶端。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 原型链深度过大可能影响性能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="盗用构造函数" tabindex="-1"><a class="header-anchor" href="#盗用构造函数" aria-hidden="true">#</a> 盗用构造函数</h4><p>盗用构造函数（Constructor Stealing）是一种通过<code>在子构造函数中调用父构造函数来实现继承的技术</code>。它是继承的一种形式，旨在解决原型链继承的一些问题，如共享属性和构造函数参数传递的限制。</p><p>在盗用构造函数的模式中，子构造函数使用父构造函数的实例作为自己的实例，从而达到复用父构造函数的属性的目的。这样，父构造函数的属性不再被共享，而且可以向父构造函数传递参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父构造函数</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token string">&quot;Generic animal sound&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子构造函数</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 盗用构造函数</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建子对象实例</span>
<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Buddy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDog<span class="token punctuation">.</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Generic animal sound</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDog<span class="token punctuation">.</span>breed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Golden Retriever</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>盗用构造函数的问题：</strong></p><ol><li><strong>方法不共享：</strong> 由于方法都在构造函数内部定义，它们不会被共享。每个实例都有自己的方法副本，可能导致内存浪费。</li><li><strong>无法继承原型链上的方法：</strong> 通过盗用构造函数，无法继承父构造函数原型链上的方法，这减少了代码的复用性。</li></ol><h4 id="组合继承" tabindex="-1"><a class="header-anchor" href="#组合继承" aria-hidden="true">#</a> 组合继承</h4><p>组合继承是一种在 JavaScript 中实现继承的模式，<code>结合了构造函数继承和原型链继承的优点</code>，避免了它们各自的缺点。在组合继承中，<code>使用构造函数来继承属性，同时通过原型链来继承方法</code>，以实现更有效的继承。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父构造函数</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在父构造函数的原型上添加方法</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Generic animal sound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子构造函数</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 继承属性（通过构造函数调用）</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 继承方法（通过原型链）</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>

<span class="token comment">// 子对象实例</span>
<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用继承的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组合继承的问题：</p><ol><li><strong>原型链上多余的实例属性：</strong> 子构造函数通过 <code>new Animal()</code> 创建了一个实例，这个实例包含了一些不必要的属性，可能会影响性能。</li><li><strong>构造函数调用两次：</strong> 子构造函数调用了两次父构造函数，一次是通过 <code>Animal.call(this, name)</code>，一次是通过 <code>new Animal()</code>，可能导致一些不必要的计算和内存浪费。</li></ol><h4 id="寄生式继承" tabindex="-1"><a class="header-anchor" href="#寄生式继承" aria-hidden="true">#</a> 寄生式继承</h4><p>寄生式继承的思路：<code>类似于寄生构造函数和工厂模式，创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原始对象</span>
<span class="token keyword">function</span> <span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
        <span class="token function-variable function">makeSound</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Generic animal sound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 在原始对象基础上增强</span>
    animal<span class="token punctuation">.</span><span class="token function-variable function">makeCustomSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">customSound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>customSound<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> animal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建继承对象</span>
<span class="token keyword">function</span> <span class="token function">createDog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token function">createAnimal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在继承对象基础上增强</span>
    dog<span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>

    <span class="token comment">// 重写方法</span>
    <span class="token keyword">let</span> originalMakeSound <span class="token operator">=</span> dog<span class="token punctuation">.</span>makeSound<span class="token punctuation">;</span>
    dog<span class="token punctuation">.</span><span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">originalMakeSound</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用原始方法</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Woof! Woof!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> dog<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用寄生式继承创建对象</span>
<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token function">createDog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用继承对象的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound \\n Woof! Woof!</span>
myDog<span class="token punctuation">.</span><span class="token function">makeCustomSound</span><span class="token punctuation">(</span><span class="token string">&quot;Custom sound!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Custom sound!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>寄生式继承问题：</strong></p><ol><li><strong>不同实例之间的方法不共享：</strong> 寄生式继承中，每个对象的方法都是独立复制的，不会共享，可能导致一定的内存浪费。</li><li><strong>构造函数不能传递参数：</strong> 与寄生构造函数继承类似，寄生式继承无法传递参数给构造函数，因为并没有使用 <code>new</code> 操作符来调用构造函数。</li></ol><h4 id="寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#寄生式组合继承" aria-hidden="true">#</a> 寄生式组合继承</h4><p>寄生式组合继承是一种<code>结合构造函数继承和寄生式继承的继承模式</code>，旨在避免组合继承的缺点。组合继承的问题在于它会调用两次父构造函数，而寄生式组合继承通过寄生式继承来继承父类的原型，避免了不必要的构造函数调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父构造函数</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在父构造函数的原型上添加方法</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Generic animal sound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子构造函数</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 继承属性（通过构造函数调用）</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寄生式继承父构造函数的原型</span>
<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个空的对象，该对象的原型指向父构造函数的原型</span>
    <span class="token keyword">let</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将子构造函数的原型指向该空对象</span>
    child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span>
    <span class="token comment">// 修复子构造函数的构造器</span>
    child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用寄生式组合继承</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Dog<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在子构造函数的原型上添加方法</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">makeSound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用父构造函数原型上的方法</span>
    <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Woof! Woof!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建子对象实例</span>
<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用继承的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound \\n Woof! Woof!</span>

<span class="token comment">// 检查构造器</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDog<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Dog</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><p>定义类也有两种主要方式：<code>类声明和类表达式</code>。</p><p>与函数表达式类似，类表达式在它们被求值前也不能引用。不过，与函数定义不同的是，虽然<code>函数声明可以提升，但类定义不能</code>。</p><p>另一个跟函数声明不同的地方是，<code>函数受函数作用域限制，而类受块作用域限制</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 类声明</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 类表达式</span>
<span class="token keyword">const</span> Animal <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 new 调用类的构造函数会执行如下操作：</strong></p><ol><li>在内存中创建一个新对象</li><li>在这个新对象内部的 [[Prototype]] 指针被赋值为构造函数的 prototype 属性。</li><li>构造函数内部的 this 被赋值为这个新对象。</li><li>执行构造函数内部的代码（给新对象添加属性）。</li><li>如果构造函数返回非空对象，则返回该对象，否则返回刚创建的新对象。</li></ol><p>在 ES6 中，使用 <code>class</code> 和 <code>extends</code> 语法糖，继承关系更加清晰，而不需要手动操作原型链。 <code>super</code> 关键字用于在子类的构造函数中调用父类的构造函数，实现对父类属性的继承。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Generic animal sound&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类继承父类</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用父类构造函数，实现属性继承</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 子类添加自己的方法</span>
    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Woof! Woof!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建子类实例</span>
<span class="token keyword">let</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Buddy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Golden Retriever&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用继承的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic animal sound</span>
<span class="token comment">// 调用子类自己的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Woof! Woof!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>super 使用的几个注意问题：</strong></p><ul><li>super 只能在派生类构造函数和静态方法中使用。</li><li>不能单独引用 super，要么用它调用构造函数，要么用它引用静态方法。</li><li>调用 super() 会调用父类构造函数，并将返回实例赋值给 this。</li><li>super 行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入。</li><li>如果没有定义类构造函数，在实例化派生类会调用 super()，而且会传入所有传给派生类的参数。</li><li>在类构造函数中，不能在调用 super() 之前引用 this。</li><li>如果派生类中显示定义了构造函数，则要么必须在其中调用 super()，要么必须在其中返回一个对象。</li></ul><h2 id="第-9-章-代理与反射" tabindex="-1"><a class="header-anchor" href="#第-9-章-代理与反射" aria-hidden="true">#</a> 第 9 章 代理与反射</h2><p>代理（Proxy）和反射（Reflect）是 ECMAScript 6（ES6）引入的两个新特性，用于操作和拦截 JavaScript 对象的行为。</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p><strong>代理（Proxy）：</strong></p><p>代理是一个用于定义基本操作行为的对象，它允许你在对象上创建一个代理层，以拦截和定制对象的操作。代理对象可以用来<code>拦截对目标对象的访问、修改、添加、删除等操作</code>。</p><p><strong>反射（Reflect）：</strong></p><p>反射是一组新的内置对象和方法，它提供了对对象的底层操作，可以被 Proxy 拦截器调用。Reflect 对象的方法和 Proxy 拦截器的方法是一一对应的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个简单的代理</span>
<span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Getting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

proxy<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 获取 value，输出: Getting value</span>
proxy<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 设置 value 为 100，输出: Setting value to 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><h4 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h4><p>在 Vue 3 中，Proxy 是一个关键的特性，用于实现响应式系统。Vue 3 的响应式系统在设计上使用了 Proxy 来劫持对象的访问和修改操作，从而实现了数据的响应式更新。</p><ol><li><strong>数据劫持：</strong> Vue 3 中通过使用 Proxy 对象，可以劫持数据对象的读取和修改操作。这允许 Vue 追踪对响应式对象的访问，并在数据发生变化时自动触发相应的更新。</li><li><strong>依赖追踪：</strong> Vue 3 利用 Proxy 捕获数据的读取操作，从而建立起一个依赖图。每个数据的读取操作都会被记录为一个依赖，当数据发生变化时，依赖会被通知，触发更新。</li><li><strong>观察者模式：</strong> Vue 3 的响应式系统中使用了观察者模式，Proxy 对象被用作观察者，负责观察被劫持的数据对象。当数据变化时，观察者会通知相关的订阅者执行更新操作。</li></ol><p><strong>设计原理</strong></p><ol><li><strong>Proxy 代理：</strong> Vue 3 中使用 Proxy 对象来代理数据对象。Proxy 对象允许拦截对象的底层操作，例如读取和修改属性。</li><li><strong>Reflect 反射：</strong> Vue 3 在 Proxy 拦截器中广泛使用了 Reflect 对象。Reflect 对象提供了一个与 Proxy 拦截器一一对应的方法，用于执行默认操作。</li><li><strong>依赖追踪：</strong> Vue 3 使用了一个全局的响应式状态管理对象，称为 <code>ReactiveEffect</code>，用于跟踪正在执行的响应式函数以及当前正在访问的依赖项。</li><li><strong>响应式函数：</strong> 当访问一个响应式对象的属性时，Vue 3 会创建一个响应式函数，并将该函数与正在执行的响应式函数进行关联。这样就建立了一个依赖关系，当数据变化时，相关的响应式函数会被触发。</li><li><strong>批量更新：</strong> 为了提高性能，Vue 3 中引入了批量更新的概念。即使数据发生多次变化，Vue 3 会在下一个微任务中批量执行更新，以减少不必要的计算和渲染操作。</li></ol><div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>// packages/reactivity/src/reactive.ts#L241-L278
function createReactiveObject(
  target: Target,
  isReadonly: boolean,
  baseHandlers: ProxyHandler&lt;any&gt;,
  collectionHandlers: ProxyHandler&lt;any&gt;,
  proxyMap: WeakMap&lt;Target, any&gt;,
) {
    // 判断目标对象是否为对象
    // 确保只有对象才能被转换成响应式对象。
  if (!isObject(target)) {
    if (__DEV__) {
      console.warn(\`value cannot be made reactive: \${String(target)}\`)
    }
    return target
  }
  // target is already a Proxy, return it.
  // exception: calling readonly() on a reactive object
  // 如果目标对象已经具有代理对象，并且不是只读的响应式对象，直接返回目标对象。
  // 这是为了避免重复创建代理对象。
  if (
    target[ReactiveFlags.RAW] &amp;&amp;
    !(isReadonly &amp;&amp; target[ReactiveFlags.IS_REACTIVE])
  ) {
    return target
  }
  // target already has corresponding Proxy
  // 如果 \`proxyMap\` 中已经有了目标对象到代理对象的映射关系，直接返回已有的代理对象。
  const existingProxy = proxyMap.get(target)
  if (existingProxy) {
    return existingProxy
  }
  // only specific value types can be observed.
  // 使用 \`getTargetType\` 函数判断目标对象的类型，
  // 如果是无效类型，直接返回目标对象。
  // 这里的类型判断主要用于确定使用哪种代理处理器。
  const targetType = getTargetType(target)
  if (targetType === TargetType.INVALID) {
    return target
  }
  // 使用 \`Proxy\` 构造函数创建代理对象，
  // 根据目标对象的类型选择相应的代理处理器。
  const proxy = new Proxy(
    target,
    targetType === TargetType.COLLECTION ? collectionHandlers : baseHandlers,
  )
  // 将目标对象与创建的代理对象进行映射，以便后续直接返回已有的代理对象。
  proxyMap.set(target, proxy)
  // 返回创建的代理对象。
  return proxy
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>// packages/reactivity/src/baseHandlers.ts#L89-L237
class BaseReactiveHandler implements ProxyHandler&lt;Target&gt; {
  constructor(
    protected readonly _isReadonly = false,
    protected readonly _shallow = false,
  ) {}
  // \`get\` 方法用于拦截目标对象的属性访问操作。
  // 根据属性名和当前的代理对象，进行不同的处理，
  // 包括标识是否是只读、是否是浅层、是否是数组等情况。
  // 还涉及到对属性值的追踪（\`track\`）和返回新的代理对象。
  get(target: Target, key: string | symbol, receiver: object) {
    const isReadonly = this._isReadonly,
      shallow = this._shallow
    if (key === ReactiveFlags.IS_REACTIVE) {
      return !isReadonly
    } else if (key === ReactiveFlags.IS_READONLY) {
      return isReadonly
    } else if (key === ReactiveFlags.IS_SHALLOW) {
      return shallow
    } else if (key === ReactiveFlags.RAW) {
      if (
        receiver ===
          (isReadonly
            ? shallow
              ? shallowReadonlyMap
              : readonlyMap
            : shallow
              ? shallowReactiveMap
              : reactiveMap
          ).get(target) ||
        // receiver is not the reactive proxy, but has the same prototype
        // this means the reciever is a user proxy of the reactive proxy
        Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)
      ) {
        return target
      }
      // early return undefined
      return
    }

    const targetIsArray = isArray(target)

    if (!isReadonly) {
        // 如果目标对象是数组并且 \`key\` 是数组相关的内置方法，
        // 则使用 \`Reflect.get\` 获取相应的内置方法。
      if (targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver)
      }
      if (key === &#39;hasOwnProperty&#39;) {
        return hasOwnProperty
      }
    }

    const res = Reflect.get(target, key, receiver)
    
    // 如果 \`key\` 是特定的 Symbol 或不可追踪的键，
    // 则直接返回目标对象上的属性值。
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res
    }

   
    if (!isReadonly) {
      track(target, TrackOpTypes.GET, key)
    }

    if (shallow) {
      return res
    }

    if (isRef(res)) {
      // ref unwrapping - skip unwrap for Array + integer key.
      return targetIsArray &amp;&amp; isIntegerKey(key) ? res : res.value
    }

    // 如果 \`key\` 对应的值是对象，将其转换为相应的响应式对象（只读或可变），然后返回。
    if (isObject(res)) {
      // Convert returned value into a proxy as well. we do the isObject check
      // here to avoid invalid value warning. Also need to lazy access readonly
      // and reactive here to avoid circular dependency.
      return isReadonly ? readonly(res) : reactive(res)
    }

    return res
  }
}

class MutableReactiveHandler extends BaseReactiveHandler {
   // 构造函数接收一个可选参数 \`shallow\`，用于标识是否是浅层响应式对象。
   // 调用父类 \`BaseReactiveHandler\` 的构造函数，
   // 并将 \`_isReadonly\` 设置为 \`false\`，
   // \`_shallow\` 设置为传入的 \`shallow\` 值。
  constructor(shallow = false) {
    super(false, shallow)
  }

  set(
    target: object,
    key: string | symbol,
    value: unknown,
    receiver: object,
  ): boolean {
      // 获取目标对象上 \`key\` 对应的旧值 \`oldValue\`。
    let oldValue = (target as any)[key]
    // 如果不是浅层响应式且新旧值都不是只读对象，并且值有变化，
    // 将新旧值都转换为原始值（去除响应式包装）。
    if (!this._shallow) {
      const isOldValueReadonly = isReadonly(oldValue)
      if (!isShallow(value) &amp;&amp; !isReadonly(value)) {
        oldValue = toRaw(oldValue)
        value = toRaw(value)
      }
      // 如果目标对象不是数组且 \`key\` 对应的旧值是 Ref 对象而新值不是 Ref 对象，
      // 将 Ref 对象的值修改为新值。
      if (!isArray(target) &amp;&amp; isRef(oldValue) &amp;&amp; !isRef(value)) {
        if (isOldValueReadonly) {
          return false
        } else {
          oldValue.value = value
          return true
        }
      }
    } else {
      // in shallow mode, objects are set as-is regardless of reactive or not
    }

    const hadKey =
      isArray(target) &amp;&amp; isIntegerKey(key)
        ? Number(key) &lt; target.length
        : hasOwn(target, key)
    const result = Reflect.set(target, key, value, receiver)
    // don&#39;t trigger if target is something up in the prototype chain of original
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, TriggerOpTypes.ADD, key, value)
      } else if (hasChanged(value, oldValue)) {
        trigger(target, TriggerOpTypes.SET, key, value, oldValue)
      }
    }
    return result
  }

    // \`deleteProperty\` 方法用于拦截目标对象的属性删除操作
  deleteProperty(target: object, key: string | symbol): boolean {
    const hadKey = hasOwn(target, key)
    const oldValue = (target as any)[key]
    const result = Reflect.deleteProperty(target, key)
    if (result &amp;&amp; hadKey) {
      trigger(target, TriggerOpTypes.DELETE, key, undefined, oldValue)
    }
    return result
  }
    
    // \`has\` 方法用于拦截目标对象的 \`in\` 操作符。
  has(target: object, key: string | symbol): boolean {
    const result = Reflect.has(target, key)
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, TrackOpTypes.HAS, key)
    }
    return result
  }
  
  // \`ownKeys\` 方法用于拦截目标对象的 \`Object.keys\`、\`Object.getOwnPropertyNames\` 等操作。
  ownKeys(target: object): (string | symbol)[] {
    track(
      target,
      TrackOpTypes.ITERATE,
      isArray(target) ? &#39;length&#39; : ITERATE_KEY,
    )
    return Reflect.ownKeys(target)
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h4><p><strong>1. 访问控制</strong></p><p>通过代理，你可以实现对对象属性的访问控制，例如只读或只写属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> readOnlyPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Accessing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not allowed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不允许设置属性值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

readOnlyPerson<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 访问 name 属性，输出: Accessing name</span>
readOnlyPerson<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 尝试设置 age 属性，输出: Setting age is not allowed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 数据验证</strong></p><p>使用代理来实现数据验证，确保只有符合条件的数据可以被设置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;john_doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;secret123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> secureUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&#39;password&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid password format&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

secureUser<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">&#39;newPassword&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置密码，有效</span>
secureUser<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 设置无效，输出: Invalid password format</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 缓存代理</strong></p><p>通过代理实现缓存，可以在访问某个值时检查缓存是否已有该值，避免重复计算：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">expensiveOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 模拟耗时计算</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Performing expensive operation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> cachedValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> cachedProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cachedValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cachedValue <span class="token operator">=</span> <span class="token function">expensiveOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> cachedValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cachedProxy<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次调用，输出: Performing expensive operation</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cachedProxy<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次调用，直接使用缓存值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 日志记录</strong></p><p>使用代理记录对象属性的访问和修改操作，用于调试或日志记录：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> loggedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Getting property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting property </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

loggedObject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 设置属性，输出: Setting property name to John</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>loggedObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取属性，输出: Getting property name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-10-章-函数" tabindex="-1"><a class="header-anchor" href="#第-10-章-函数" aria-hidden="true">#</a> 第 10 章 函数</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ul><li><strong>函数定义：</strong> 使用关键字（例如 <code>function</code>）定义函数。</li><li><strong>参数：</strong> 函数可以接受输入参数，这些参数是在调用函数时传递给函数的值。</li><li><strong>返回值：</strong> 函数可以产生输出，即返回值，通过 <code>return</code> 语句定义。</li></ul><h3 id="函数的类型" tabindex="-1"><a class="header-anchor" href="#函数的类型" aria-hidden="true">#</a> 函数的类型</h3><p>在不同的上下文中，函数可以分为几种不同的类型，其中包括但不限于：</p><ul><li><strong>全局函数（Global Functions）：</strong> 在整个程序中都可访问的函数。</li><li><strong>局部函数（Local Functions）：</strong> 在其他函数内部定义的函数，只能在包含它的函数内部访问。</li><li><strong>匿名函数（Anonymous Functions）：</strong> 没有名称的函数，通常作为参数传递给其他函数，或者作为立即执行的函数表达式（IIFE）使用。</li><li><strong>箭头函数（Arrow Functions）：</strong> ES6 引入的一种简写语法，具有更短的语法和改变 <code>this</code> 行为的特点。</li><li><strong>高阶函数（Higher-Order Functions）：</strong> 接受函数作为参数或返回一个函数的函数，常用于函数式编程。</li><li><strong>构造函数（Constructor Functions）：</strong> 可以通过 <code>new</code> 关键字调用的函数，用于创建对象的实例。</li></ul><h3 id="函数的调用模式" tabindex="-1"><a class="header-anchor" href="#函数的调用模式" aria-hidden="true">#</a> 函数的调用模式</h3><p>函数的调用方式有四种主要模式：</p><ul><li><strong>函数调用模式（Function Invocation Pattern）：</strong> 直接调用函数，例如 <code>func()</code>。</li><li><strong>方法调用模式（Method Invocation Pattern）：</strong> 通过对象调用的函数，例如 <code>object.method()</code>。</li><li><strong>构造函数调用模式（Constructor Invocation Pattern）：</strong> 使用 <code>new</code> 关键字调用的函数，创建对象实例。</li><li><strong>间接调用模式（Indirect Invocation Pattern）：</strong> 使用 <code>call</code> 或 <code>apply</code> 方法调用函数，可以改变函数的上下文。</li></ul><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><p>箭头函数没有自己的 <code>this</code>，它继承自外围作用域（即定义时所在的作用域）的 <code>this</code>。这与传统的函数（函数表达式或函数声明）不同，它们的 <code>this</code> 值会在运行时动态确定。</p><ul><li>不适用于构造函数：箭头函数不能被用作构造函数，不能使用 <code>new</code> 关键字调用。</li><li>没有 <code>arguments</code> 对象：箭头函数没有自己的 <code>arguments</code> 对象，它继承自外围作用域的 <code>arguments</code>。</li><li>不能用作 generator 函数：箭头函数不能使用 <code>yield</code> 关键字创建迭代器。</li><li>没有 <code>this</code>、<code>arguments</code>、<code>super</code> 和 <code>new.target</code> 绑定。</li><li>不能通过 <code>call()</code>、<code>apply()</code>、<code>bind()</code> 方法修改 <code>this</code>。</li><li>没有原型 prototype 属性。</li></ul><h3 id="函数声明和函数表达式" tabindex="-1"><a class="header-anchor" href="#函数声明和函数表达式" aria-hidden="true">#</a> 函数声明和函数表达式</h3><p><code>函数声明</code>是一种定义函数的方式，使用 <code>function</code> 关键字后跟函数名。函数声明提升至作用域的顶部，因此可以在声明之前调用函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>函数表达式</code>是将函数赋值给变量的一种方式，函数表达式的函数名是可选的。这种方式的函数通常是匿名函数，但也可以有名字。</p><p>函数表达式的变量不会提升，只有在赋值语句执行时才会创建。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匿名函数表达式</span>
<span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 有名字的函数表达式</span>
<span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数声明 vs 函数表达式：</strong></p><ul><li><strong>提升（Hoisting）：</strong> 函数声明会被提升到当前作用域的顶部，可以在声明之前调用。而函数表达式只有在赋值语句执行时才会创建，不会提升。</li><li><strong>调用时间：</strong> 函数声明可以在定义之前和之后调用，而函数表达式只能在定义之后调用。</li><li><strong>命名：</strong> 函数声明必须有名称，而函数表达式可以是匿名的，也可以有名字。</li><li><strong>赋值给变量：</strong> 函数声明不能被赋值给变量，而函数表达式通常是赋值给变量的。</li></ul><p>在函数表达式中，可以为函数指定一个名字，这被称为命名函数表达式。命名函数表达式的主要用途是在函数内部引用自身，方便递归调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">factorial</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">self</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IIFE 是一种立即调用的匿名函数表达式，通常用于创建私有作用域，防止变量污染全局作用域。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里是一个私有作用域</span>
  <span class="token keyword">const</span> localVar <span class="token operator">=</span> <span class="token string">&#39;IIFE Example&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// localVar 在此处不可访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="call、apply-和-bind" tabindex="-1"><a class="header-anchor" href="#call、apply-和-bind" aria-hidden="true">#</a> <code>call</code>、<code>apply</code> 和 <code>bind</code></h3><p><code>call</code>、<code>apply</code> 和 <code>bind</code> 都是 JavaScript 中用于改变函数执行上下文（<code>this</code> 值）的方法，它们在用法和效果上有一些区别。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: Hello, John! My age is 25.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>apply</code> 方法与 <code>call</code> 类似，也是在函数执行时立即调用。区别在于它接收一个数组或类数组对象作为参数，其中数组的每个元素都会作为参数传递给函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> city</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! I live in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: Hello, John! I live in New York. My age is 25.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bind</code> 方法也是用于改变函数执行上下文，但它不会立即调用函数，而是返回一个新的函数。新函数在调用时将具有绑定的 <code>this</code> 值和可选的参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! My age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> boundGreet <span class="token operator">=</span> <span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">boundGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出: Hello, John! My age is 25.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="尾调用优化" tabindex="-1"><a class="header-anchor" href="#尾调用优化" aria-hidden="true">#</a> 尾调用优化</h3><p>尾调用优化（Tail Call Optimization，TCO）是一种<code>编译器优化技术，用于优化尾递归函数的性能</code>。</p><p>尾调用是指<code>函数的最后一个操作是调用另一个函数</code>。</p><p>尾调用优化的<code>目标是减少调用栈的大小</code>，提高程序的性能和内存利用率。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 尾递归函数，计算阶乘</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 尾调用优化的关键：<code>如果函数的逻辑允许基于尾调用将其销毁，则引擎就会那么做。</code></p><p><strong>尾调用优化的条件：</strong></p><p>尾调用优化的条件就是<code>确定外部栈帧真的没有必要存在了</code>：</p><ul><li>代码在严格模式下执行。</li><li>外部函数的返回值是对尾调用函数的调用。</li><li>尾调用函数返回后不需要执行额外的逻辑。</li><li>尾调用函数不是引用外部函数作用域中自由变量的闭包。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span>

<span class="token comment">// 基础框架</span>
<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fibImp1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 执行递归</span>
<span class="token keyword">function</span> <span class="token function">fibImp1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fibImp1</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>闭包指的是那些<code>引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> outerVariable <span class="token operator">=</span> <span class="token string">&#39;I am from outer function&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outerVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> innerFunction<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> closure <span class="token operator">=</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: I am from outer function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>访问外部变量：</strong> 闭包可以访问包含它的外部函数的变量，即使外部函数已经执行完毕。</li><li><strong>保持状态：</strong> 由于闭包内部可以访问外部变量，可以用闭包来保持一些状态信息，形成类似私有变量的效果。</li><li><strong>数据隐藏和封装：</strong> 通过闭包可以创建私有变量，实现数据的隐藏和封装。</li><li><strong>实现模块化：</strong> 使用闭包可以创建模块，将相关的功能和变量封装在一起。</li><li><strong>异步编程：</strong> 在回调函数和事件处理函数中经常使用闭包，以便访问外部的变量。</li><li><strong>内存管理：</strong> 闭包可能导致内存泄漏，因为它会保持对外部变量的引用，使得这些变量不能被垃圾回收。</li><li><strong>性能：</strong> 过度使用闭包可能导致性能问题，因为每个闭包都会创建一个新的作用域链。</li></ul><h3 id="this-对象" tabindex="-1"><a class="header-anchor" href="#this-对象" aria-hidden="true">#</a> this 对象</h3><p>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以按照顺序应用下边的规则来判断 this 的绑定对象。</p><ol><li><code>箭头函数</code>会继承外层函数调用的 this 绑定。</li><li>由 <code>new</code> 调用？绑定到新创建的对象。</li><li>由 <code>call 或 apply 或 bind</code> 调用？绑定到指定的对象。</li><li>由<code>上下文对象</code>调用？绑定到那个上下文对象。</li><li>默认：严格模式下帮点个到 <code>undefined</code>，否则绑定到<code>全局对象</code>。</li></ol><h2 id="第-11-章-期约与异步函数" tabindex="-1"><a class="header-anchor" href="#第-11-章-期约与异步函数" aria-hidden="true">#</a> 第 11 章 期约与异步函数</h2><p>ES6 新增期约。ES8 新增异步函数。ES 的异步编程特性有了长足的进步。</p><p>通过期约 Promise 和异步函数 async/await，不仅可以实现之前难以实现或不可能实现的任务，而且也能写出更清晰、简洁，并且容易理解、调试的代码。</p><h3 id="期约" tabindex="-1"><a class="header-anchor" href="#期约" aria-hidden="true">#</a> 期约</h3><p>在 JavaScript 中，<strong>期约（Promise）</strong> 是一种用于处理异步操作的对象。期约提供了一种更结构化的方式来处理异步代码，避免了回调地狱（Callback Hell）的问题。</p><p>期约的主要功能是为异步代码提供了清晰的抽象。可以用期约表示<code>异步执行的代码块</code>，也可以用期约表示<code>异步计算的值</code>。</p><p>在需要<code>串行异步代码时</code>，期约的价值最为突出。</p><p>作为可塑性极强的一种结构，期约可以被<code>序列化、连锁使用、复合、扩展和重组</code>。</p><h4 id="期约基础" tabindex="-1"><a class="header-anchor" href="#期约基础" aria-hidden="true">#</a> 期约基础</h4><ul><li>期约是一种用于处理异步操作的对象，具有三个状态：<code>pending</code>（等待中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已拒绝）。</li><li>通过<code>new Promise(executor)</code>构造函数创建期约，<code>executor</code>函数包含异步操作的代码，并接受<code>resolve</code>和<code>reject</code>两个参数。</li><li>使用<code>.then()</code>处理成功状态，<code>.catch()</code>处理拒绝状态，<code>.finally()</code>处理期约结束时的逻辑。</li></ul><h4 id="期约链式调用" tabindex="-1"><a class="header-anchor" href="#期约链式调用" aria-hidden="true">#</a> 期约链式调用</h4><ul><li><code>.then()</code>返回一个新的期约，可以通过链式调用<code>.then()</code>和<code>.catch()</code>形成期约链。</li><li>在链式调用中，每个<code>.then()</code>都可以返回一个值或期约，传递给下一个<code>.then()</code>。</li></ul><h4 id="all-和-race-和-allsettled" tabindex="-1"><a class="header-anchor" href="#all-和-race-和-allsettled" aria-hidden="true">#</a> .all() 和 .race() 和 .allSettled()</h4><ul><li><code>Promise.all(iterable)</code>用于处理多个期约，只有所有期约都成功才算成功，任何一个期约失败都将导致整体失败。</li><li><code>Promise.race(iterable)</code>在第一个期约完成时返回其结果，无论成功还是拒绝。</li><li><code>Promise.allSettled(iterable)</code>：静态方法，返回一个期约，等到所有期约都已解决或拒绝后才解决，结果是一个数组，每个元素都包含一个对象，表示对应的期约是解决还是拒绝。</li></ul><h4 id="resolve-和-reject" tabindex="-1"><a class="header-anchor" href="#resolve-和-reject" aria-hidden="true">#</a> .resolve() 和 .reject()</h4><ul><li><code>Promise.resolve(value)</code>创建一个已解决的期约，将<code>value</code>作为期约的结果。</li><li><code>Promise.reject(reason)</code>创建一个已拒绝的期约，将<code>reason</code>作为期约的拒因。</li></ul><h4 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h4><ul><li>使用<code>.catch()</code>或<code>try/catch</code>语句捕获期约的拒绝。</li><li>可以通过在<code>.then()</code>链中使用第二个参数处理错误。</li></ul><h4 id="手写-promise" tabindex="-1"><a class="header-anchor" href="#手写-promise" aria-hidden="true">#</a> 手写 Promise</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>
<span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;resolved&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span>

<span class="token keyword">function</span> <span class="token function">myPromise</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">RESOLVED</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

myPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  onResolve <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolve <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onResolve</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value <span class="token punctuation">}</span>

  onReject <span class="token operator">=</span> <span class="token keyword">typeof</span> onReject <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onReject</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手写promise-then" tabindex="-1"><a class="header-anchor" href="#手写promise-then" aria-hidden="true">#</a> 手写Promise.then</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token function-variable function">fulfilled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">onResolve</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span> <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token function-variable function">rejected</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">onReject</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span> <span class="token operator">?</span> res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>
        self<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rejected<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token constant">RESOLVED</span><span class="token operator">:</span>
        <span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token constant">REJECT</span><span class="token operator">:</span>
        <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手写promise-all" tabindex="-1"><a class="header-anchor" href="#手写promise-all" aria-hidden="true">#</a> 手写Promise.all</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseAll</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;must be an array&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> promises<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length <span class="token operator">===</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手写promise-race" tabindex="-1"><a class="header-anchor" href="#手写promise-race" aria-hidden="true">#</a> 手写Promise.race</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseRace</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;must be an array&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手写promise-any" tabindex="-1"><a class="header-anchor" href="#手写promise-any" aria-hidden="true">#</a> 手写Promise.any</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseAny</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;promises must be an array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">promise</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AggregateError</span><span class="token punctuation">(</span><span class="token string">&#39;All promises were rejected&#39;</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手写promise-allsettled" tabindex="-1"><a class="header-anchor" href="#手写promise-allsettled" aria-hidden="true">#</a> 手写Promise.allSettled</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseAllSettled</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;promises must be an array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> completedPromises <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          results<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> result <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          results<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">reason</span><span class="token operator">:</span> reason <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          completedPromises<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>completedPromises <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手写promise-finally" tabindex="-1"><a class="header-anchor" href="#手写promise-finally" aria-hidden="true">#</a> 手写Promise.finally</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">finally</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token parameter">value</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token parameter">err</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步函数" tabindex="-1"><a class="header-anchor" href="#异步函数" aria-hidden="true">#</a> 异步函数</h3><p>异步函数通常是指使用<code>async/await</code>语法糖来处理异步操作的函数。</p><p>异步函数可<code>暂停执行，而不阻塞主线程</code>。</p><h4 id="async-函数" tabindex="-1"><a class="header-anchor" href="#async-函数" aria-hidden="true">#</a> async 函数</h4><ul><li><code>async</code> 关键字用于定义一个异步函数。异步函数返回一个期约（Promise）。</li><li>异步函数内部可以包含<code>await</code>表达式，它会暂停函数执行，等待期约解决，并返回期约的结果。</li></ul><h4 id="await-表达式" tabindex="-1"><a class="header-anchor" href="#await-表达式" aria-hidden="true">#</a> await 表达式</h4><ul><li><code>await</code> 表达式只能在异步函数内部使用，用于等待期约的解决。</li><li><code>await</code>后面可以是一个期约对象，也可以是返回期约的函数调用或任何返回值为期约的表达式。</li></ul><h4 id="错误处理-1" tabindex="-1"><a class="header-anchor" href="#错误处理-1" aria-hidden="true">#</a> 错误处理</h4><ul><li>使用 <code>try/catch</code> 语句来捕获异步函数内的错误。</li><li>如果期约被拒绝，将会抛出一个异常，可以通过<code>catch</code>捕获。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">someAsyncFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多个异步操作的串行执行" tabindex="-1"><a class="header-anchor" href="#多个异步操作的串行执行" aria-hidden="true">#</a> 多个异步操作的串行执行</h4><ul><li>使用 <code>await</code> 可以实现多个异步操作的串行执行，确保一个操作完成后再执行下一个。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">serialAsyncOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">operation2</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">operation3</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-12-章-bom" tabindex="-1"><a class="header-anchor" href="#第-12-章-bom" aria-hidden="true">#</a> 第 12 章 BOM</h2><h3 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象" aria-hidden="true">#</a> window 对象</h3><p>BOM 的核心是 window 对象。</p><ul><li><code>window</code> 对象是浏览器环境中的全局对象，它包含了全局作用域中定义的所有变量和函数。</li><li>在浏览器中，<code>window</code> 对象也是 <code>global</code> 对象的引用。</li><li><code>window</code> 对象提供了访问和操作浏览器窗口的接口，称为 BOM。</li><li>BOM 提供了一系列属性和方法，例如 <code>window.location</code>、<code>window.navigator</code>、<code>window.document</code> 等，用于操作浏览器的窗口、导航和文档。</li><li>在浏览器中，全局作用域中声明的变量和函数都会成为 <code>window</code> 对象的属性和方法。</li><li>全局变量可以通过 <code>window</code> 对象直接访问，例如 <code>window.myVariable</code>。</li><li><code>window</code> 对象提供了一些用于弹窗和对话框的方法，如 <code>alert()</code>、<code>confirm()</code>、<code>prompt()</code> 等。</li><li><code>window</code> 对象提供了定时器函数，如 <code>setTimeout()</code> 和 <code>setInterval()</code>，用于在一定时间后执行函数或定时重复执行函数。</li><li><code>window</code> 对象还提供了其他一些功能，如打开新窗口或标签页的 <code>window.open()</code> 方法，关闭当前窗口的 <code>window.close()</code> 方法等。</li></ul><h4 id="窗口关系" tabindex="-1"><a class="header-anchor" href="#窗口关系" aria-hidden="true">#</a> 窗口关系</h4><ul><li><code>顶层窗口</code>是窗口层次结构中的最顶层窗口，不包含在任何其他窗口中。可以通过 <code>window.top</code> 属性来引用顶层窗口。</li><li>当一个窗口包含另一个窗口时，被包含的窗口被认为是<code>父窗口</code>。可以通过 <code>window.parent</code> 属性来引用包含它的窗口。</li><li><code>window.self</code> 属性指向<code>当前窗口</code>自身。这通常用于与 <code>window</code> 对象进行比较，以确定代码是否在期望的窗口中执行。</li></ul><h4 id="窗口位置" tabindex="-1"><a class="header-anchor" href="#窗口位置" aria-hidden="true">#</a> 窗口位置</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>screenLeft <span class="token comment">// 窗口相对于屏幕左侧的位置</span>
window<span class="token punctuation">.</span>screenTop <span class="token comment">// 窗口相对于屏幕顶部的位置</span>

window<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// 将窗口移动到指定位置</span>
window<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// 按指定的像素调整窗口大小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="像素比" tabindex="-1"><a class="header-anchor" href="#像素比" aria-hidden="true">#</a> 像素比</h4><p>像素比（Pixel Ratio）是一个用于处理高分辨率屏幕的概念，通常表示一个逻辑像素（在CSS中使用的像素）对应于多少个物理像素。这个比率可以帮助开发者在高分辨率屏幕上提供更清晰的图像和文本。</p><p>在 Web 开发中，像素比主要通过 <code>window.devicePixelRatio</code> 属性来获取。这个属性返回一个数字，表示一个逻辑像素对应的物理像素的比率。通常，这个值为 1，表示一对一的映射。在高分辨率屏幕（例如 Retina 屏幕）上，这个值可能大于 1。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">-webkit-min-device-pixel-ratio</span><span class="token punctuation">:</span> 2<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">img</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="窗口大小" tabindex="-1"><a class="header-anchor" href="#窗口大小" aria-hidden="true">#</a> 窗口大小</h4><p>在浏览器环境中，可以使用 <code>window.innerWidth</code> 和 <code>window.innerHeight</code> 属性来获取浏览器窗口的内部宽度和高度，即视口的宽度和高度（不包括浏览器工具栏和滚动条）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>  <span class="token comment">// 浏览器窗口中页面视口的宽度（不包含边框和工具栏）</span>
window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span> <span class="token comment">// 浏览器窗口中页面视口的高度（不包含边框和工具栏）</span>

window<span class="token punctuation">.</span>outerWidth <span class="token comment">// 浏览器窗口自身的宽度</span>
window<span class="token punctuation">.</span>outerHeight <span class="token comment">// 浏览器窗口自身的高度</span>

document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token comment">// 页面视口的宽度</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token comment">// 页面视口的高度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器窗口自身的精确尺寸不好确定，但可以确定页面视口的大小：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pageWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth
<span class="token keyword">let</span> pageHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> pageWidth <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 检查页面是否是标准模式</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> <span class="token string">&#39;CSS1Compat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
        pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        pageWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth
        pageHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接收新的宽度和高度值</span>
window<span class="token punctuation">.</span><span class="token function">resizeBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接收宽度和高度各要缩放多少</span>

window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 缩放到 100 * 100</span>

window<span class="token punctuation">.</span><span class="token function">resizeBy</span><span class="token punctuation">(</span><span class="token number">100</span>， <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// 缩放到 200 * 50</span>

window<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token comment">// 缩放到 300 * 300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="视口位置" tabindex="-1"><a class="header-anchor" href="#视口位置" aria-hidden="true">#</a> 视口位置</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>pageXoffset<span class="token operator">/</span>window<span class="token punctuation">.</span>scrollX
window<span class="token punctuation">.</span>pageYoffset<span class="token operator">/</span>window<span class="token punctuation">.</span>scrollY

<span class="token comment">// 相当于当前视口向下滚动 100 像素</span>
window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token comment">// 相当于当前视口向右滚动 40 像素</span>
window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// 滚动到页面左上角</span>
window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 将窗口滚动到左侧偏移量为 200，顶部偏移量为 300 的位置</span>
window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
  <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&#39;smooth&#39;</span> <span class="token comment">// 可选，表示滚动的行为，可以是 &#39;auto&#39;、&#39;smooth&#39; 等</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="导航与打开新窗口" tabindex="-1"><a class="header-anchor" href="#导航与打开新窗口" aria-hidden="true">#</a> 导航与打开新窗口</h4><p><code>window.open()</code>方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。</p><p><code>window.open()</code> 方法可以接受四个参数：</p><ol><li><strong>URL（字符串）</strong> ：要加载的 URL 地址。可以是绝对或相对路径，也可以是其他网址。</li><li><strong>目标窗口（字符串）</strong> ：新窗口的名称，如果已经存在具有相同名称的窗口，则会在该窗口中加载新的URL。</li><li><strong>窗口特性（字符串）</strong> ：包含各种特性的字符串，如窗口的大小、位置、菜单栏、工具栏等。这是一个可选参数。</li><li><strong>是否替换（布尔值）</strong> ：如果设置为 true，新打开的窗口将替换浏览器历史记录中的当前页面。如果设置为 false（默认值），则在浏览器历史中添加一个新的条目。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打开一个新窗口，指定窗口的大小和位置</span>
<span class="token keyword">let</span> wroxWin <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.example.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=600,height=400,top=100,left=100,fullscreen=yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wroxWin<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// 缩放</span>
wroxWin<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 移动</span>

<span class="token comment">// 只能用于 window.open() 创建的弹出窗口</span>
wroxWin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 新创建窗口的 window 对象有一个属性 opener，指向打开它的窗口。</span>
wroxWin<span class="token punctuation">.</span>opener <span class="token operator">===</span> window <span class="token comment">// true</span>

<span class="token comment">// 表示新打开的标签页不需要与打开它的标签页通信。可以运行在独立的进程中。</span>
<span class="token comment">// 这个连接一旦切断，就无法恢复了</span>
wroxWin<span class="token punctuation">.</span>opener <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>安全方面：</strong> 在网页加载过程中调用 <code>window.open()</code> 没有效果，而且还可能导致向用户显示错误。弹窗通常可能在鼠标点击或按下键盘中某个键的情况下才能打开。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断调用 window.open() 的弹窗是否被屏蔽了</span>
<span class="token keyword">let</span> blocked <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> wroxWin <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.wrox.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>wroxWin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        blocked <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    blocked <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>blocked<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;The popup was blocked&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置超时任务</span>
<span class="token keyword">let</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token comment">// 取消超时任务</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span>

<span class="token comment">// 定时任务，会有误差，谨慎使用</span>
<span class="token keyword">let</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="系统对话框" tabindex="-1"><a class="header-anchor" href="#系统对话框" aria-hidden="true">#</a> 系统对话框</h4><p>系统对话框的外观由操作系统或者浏览器决定，无法使用 css 设置。</p><p><strong>警告框（Alert）：</strong> 显示一条消息和一个确定按钮。常用于向用户显示一些信息或警告。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;This is an alert message!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>确认框（Confirm）：</strong> 显示一条消息、一个确定按钮和一个取消按钮。用于获取用户的确认或取消选择。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;Do you want to proceed?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用户点击了确定按钮</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;User clicked OK.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用户点击了取消按钮</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;User clicked Cancel.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示框（Prompt）：</strong> 显示一条消息、一个文本输入框、确定按钮和取消按钮。用于获取用户输入的文本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> userInput <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;Please enter your name:&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>userInput <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用户点击了确定按钮，并输入了文本</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;User entered: &#39;</span> <span class="token operator">+</span> userInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用户点击了取消按钮或直接关闭了对话框</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;User canceled the prompt.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打印框：</strong> <code>print()</code> 是 JavaScript 中用于触发浏览器打印操作的方法。当调用 <code>print()</code> 方法时，浏览器会弹出打印对话框，允许用户选择打印设置并执行打印操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 触发打印操作</span>
window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="location-对象" tabindex="-1"><a class="header-anchor" href="#location-对象" aria-hidden="true">#</a> location 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span>href <span class="token comment">// 完整的 URL 地址</span>
location<span class="token punctuation">.</span>protocol <span class="token comment">// URL 协议部分（例如 &quot;http:&quot;）</span>
location<span class="token punctuation">.</span>host <span class="token comment">// 主机名和端口号（如果有）</span>
location<span class="token punctuation">.</span>hostname <span class="token comment">// 主机名</span>
location<span class="token punctuation">.</span>port <span class="token comment">// 端口号</span>
location<span class="token punctuation">.</span>pathname <span class="token comment">// URL 路径部分和文件名</span>
location<span class="token punctuation">.</span>search <span class="token comment">// URL 查询字符串部分（从问号开始的部分）</span>
location<span class="token punctuation">.</span>hash <span class="token comment">// URL 锚点部分（从井号开始的部分）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查询字符串" tabindex="-1"><a class="header-anchor" href="#查询字符串" aria-hidden="true">#</a> 查询字符串</h4><p><strong><code>URLSearchParams</code></strong> 接口定义了一些实用的方法来处理 URL 的查询字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> paramsString <span class="token operator">=</span> <span class="token string">&quot;q=URLUtils.searchParams&amp;topic=api&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>paramsString<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> searchParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

searchParams<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
searchParams<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;api&quot;]</span>
searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
searchParams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;webdev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev&quot;</span>
searchParams<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;More webdev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;q=URLUtils.searchParams&amp;topic=More+webdev&quot;</span>
searchParams<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;q=URLUtils.searchParams&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作地址" tabindex="-1"><a class="header-anchor" href="#操作地址" aria-hidden="true">#</a> 操作地址</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.mozilla.org&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或</span>
location <span class="token operator">=</span> <span class="token string">&quot;https://www.mozilla.org&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 或</span>
location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;https://www.mozilla.org&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>window.location.replace()</code> 方法可以替换当前页面的 URL，并在浏览历史中不留下记录：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 替换当前页面的 URL</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.example.com/new-url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载，可能从缓存加载</span>
location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载，从服务器加载</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="navigator-对象" tabindex="-1"><a class="header-anchor" href="#navigator-对象" aria-hidden="true">#</a> navigator 对象</h3><p><code>Navigator</code> 接口表示用户代理的状态和标识。它允许脚本查询它和注册自己进行一些活动。</p><h4 id="检测插件" tabindex="-1"><a class="header-anchor" href="#检测插件" aria-hidden="true">#</a> 检测插件</h4><p>检测浏览器是否安装了某个插件是开发中常见的需求。检测插件就是遍历浏览器中可用的插件，并逐个比较插件的名称。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// IE10 及更低版本无效</span>
<span class="token keyword">let</span> <span class="token function-variable function">hasPlugin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> plugin <span class="token keyword">of</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// 检测 flash</span>
<span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string">&#39;Flash&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册处理程序" tabindex="-1"><a class="header-anchor" href="#注册处理程序" aria-hidden="true">#</a> 注册处理程序</h4>`,533)),s("p",null,[s("strong",null,[s("a",k,[n[2]||(n[2]=s("code",null,"Navigator",-1)),p(e)])]),n[3]||(n[3]=a(" 的方法 ")),n[4]||(n[4]=s("strong",null,[s("code",null,"registerProtocolHandler()")],-1)),n[5]||(n[5]=a("  让 web 站点为自身注册用于打开或处理特定 URL 方案（又名协议）的能力。"))]),n[8]||(n[8]=t(`<p>这通常用于与外部应用程序或协议进行集成，例如电子邮件客户端、在线日历等。举个例子，此 API 允许 Web 邮件站点打开 <code>mailto:</code> URL，或让 VoIP 站点打开 <code>tel:</code> URL。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 处理的协议（如&#39;mailto&#39;、&#39;ftp&#39;）</span>
<span class="token comment">// 处理该协议的 url</span>
<span class="token comment">// 应用名称</span>
navigator<span class="token punctuation">.</span><span class="token function">registerProtocolHandler</span><span class="token punctuation">(</span>scheme<span class="token punctuation">,</span> url<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="screen-对象" tabindex="-1"><a class="header-anchor" href="#screen-对象" aria-hidden="true">#</a> screen 对象</h3><p><code>screen</code> 对象是浏览器环境中的一个全局对象，表示用户的屏幕。它包含了一些属性，提供了关于用户屏幕的信息，例如屏幕的宽度、高度、像素深度等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>screen<span class="token punctuation">.</span>width<span class="token punctuation">;</span> <span class="token comment">// 屏幕的宽度（以像素为单位）</span>
screen<span class="token punctuation">.</span>height<span class="token punctuation">;</span> <span class="token comment">// 屏幕的高度（以像素为单位）</span>
screen<span class="token punctuation">.</span>availWidth<span class="token punctuation">;</span> <span class="token comment">// 屏幕的可用宽度，即去除任务栏或其他用户界面元素占用的宽度后的宽度</span>
screen<span class="token punctuation">.</span>availHeight<span class="token punctuation">;</span> <span class="token comment">// 屏幕的可用高度，即去除任务栏或其他用户界面元素占用的高度后的高度</span>
screen<span class="token punctuation">.</span>colorDepth<span class="token punctuation">;</span> <span class="token comment">// 屏幕的颜色深度，即每个像素的位数</span>
screen<span class="token punctuation">.</span>pixelDepth<span class="token punctuation">;</span> <span class="token comment">// 屏幕的颜色深度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="history-对象" tabindex="-1"><a class="header-anchor" href="#history-对象" aria-hidden="true">#</a> history 对象</h3><p><strong><code>History</code></strong> 接口允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向前导航两步</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向后导航一步</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> stateData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pageTitle <span class="token operator">=</span> <span class="token string">&#39;New Page Title&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newURL <span class="token operator">=</span> <span class="token string">&#39;/new-url&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 向浏览器会话历史中添加一个新的状态</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>stateData<span class="token punctuation">,</span> pageTitle<span class="token punctuation">,</span> newURL<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> newStateData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newTitle <span class="token operator">=</span> <span class="token string">&#39;Updated Page Title&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> updatedURL <span class="token operator">=</span> <span class="token string">&#39;/updated-url&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 用新的状态替换当前的历史记录条目</span>
history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>newStateData<span class="token punctuation">,</span> newTitle<span class="token punctuation">,</span> updatedURL<span class="token punctuation">)</span><span class="token punctuation">;</span>

history<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 当前会话历史中的历史记录条目数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-13-章-客户端检测" tabindex="-1"><a class="header-anchor" href="#第-13-章-客户端检测" aria-hidden="true">#</a> 第 13 章 客户端检测</h2><blockquote><p>本章节感觉需要做个了解即可，在开发中知道这个流程就可以了，具体操作可以查资料操作。</p></blockquote><p>客户端检测是 JS 中争议最多的话题。因为不同浏览器之间存在差异，所以<code>经常需要根据浏览器的能力来编写不同的代码</code>。优先选择<code>能力检测</code>。</p><h3 id="能力检测" tabindex="-1"><a class="header-anchor" href="#能力检测" aria-hidden="true">#</a> 能力检测</h3><p><code>在使用之前先测试浏览器的能力</code>。</p><p>脚本可以在调用某个函数之前先检查它是否存在。</p><p>这样的方式开发者不用考虑特定的浏览器或者版本，而只需要关注某些能力是否存在。</p><h3 id="用户代理检测" tabindex="-1"><a class="header-anchor" href="#用户代理检测" aria-hidden="true">#</a> 用户代理检测</h3><p><code>通过用户代理字符串确定浏览器</code>。</p><p>用户代理字符串包含关于浏览器很多信息，浏览器、平台、操作系统、版本、渲染引擎等。</p><h3 id="软件与硬件检测" tabindex="-1"><a class="header-anchor" href="#软件与硬件检测" aria-hidden="true">#</a> 软件与硬件检测</h3><p><code>浏览器提供了一些软件和硬件的信息</code>。</p><p>通过 screen 和 navigator 暴露出来。利用这些 API，可以获取操作系统、浏览器、硬件、设备位置、电池状态等信息。</p><h2 id="第-14-章-dom" tabindex="-1"><a class="header-anchor" href="#第-14-章-dom" aria-hidden="true">#</a> 第 14 章 DOM</h2><h3 id="节点层级" tabindex="-1"><a class="header-anchor" href="#节点层级" aria-hidden="true">#</a> 节点层级</h3><h4 id="node-类型" tabindex="-1"><a class="header-anchor" href="#node-类型" aria-hidden="true">#</a> Node 类型</h4><p>在DOM中，<code>Node</code> 是一个表示文档中的节点的基本接口，它是所有节点类型的基类。<code>Node</code> 接口定义了一些通用的属性和方法，这些属性和方法被所有节点类型所继承。</p><ol><li><p><strong><code>Node.nodeName</code>：</strong> 返回节点的名称。</p></li><li><p><strong><code>Node.nodeType</code>：</strong> 返回节点的类型，以数字表示。</p><ul><li><code>1</code> 表示元素节点</li><li><code>2</code> 表示属性节点</li><li><code>3</code> 表示文本节点</li><li><code>8</code> 表示注释节点</li><li>等等...</li></ul></li><li><p><strong><code>Node.nodeValue</code>：</strong> 返回或设置节点的值，具体的含义和用法取决于节点的类型。</p></li><li><p><strong><code>Node.parentNode</code>：</strong> 返回节点的父节点。</p></li><li><p><strong><code>Node.childNodes</code>：</strong> 返回一个包含节点所有子节点的 NodeList。</p></li><li><p><strong><code>Node.firstChild</code>：</strong> 返回节点的第一个子节点。</p></li><li><p><strong><code>Node.lastChild</code>：</strong> 返回节点的最后一个子节点。</p></li><li><p><strong><code>Node.previousSibling</code>：</strong> 返回节点的前一个同级节点。</p></li><li><p><strong><code>Node.nextSibling</code>：</strong> 返回节点的后一个同级节点。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 添加元素节点到父元素</span>
<span class="token keyword">const</span> parentElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;parentElementId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在父元素的特定位置插入元素节点</span>
<span class="token keyword">const</span> referenceElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;referenceElementId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElement<span class="token punctuation">,</span> referenceElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 替换节点</span>
<span class="token keyword">const</span> parentElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;parentElementId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> oldChild <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;oldChildId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newChild <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parentElement<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newChild<span class="token punctuation">,</span> oldChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除节点</span>
<span class="token keyword">const</span> elementToRemove <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;elementToRemove&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elementToRemove<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elementToRemove<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 复制节点</span>
<span class="token keyword">const</span> originalElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;originalElementId&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> clonedElement <span class="token operator">=</span> originalElement<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="document-类型" tabindex="-1"><a class="header-anchor" href="#document-类型" aria-hidden="true">#</a> Document 类型</h4><p>Document 类型是 JS 中表示<strong>文档节点的类型</strong>。</p><p>在浏览器中，document 是 HTMLDocument 的实例，表示整个 HTML 页面。</p><p><strong>Document 类型的节点有以下特征：</strong></p><ul><li><code>nodeType</code> 等于 9</li><li><code>nodeName</code> 值为 &#39;#document&#39;</li><li><code>nodeValue</code> 值为 null</li><li><code>parentNode</code> 值为 null</li><li><code>ownerDocument</code> 值为 null</li><li><code>子节点</code>可以是 DocumentType(最多一个)、Element（最多一个）、ProcessingInstruction 或 Comment 类型。</li></ul><p>document 对象可用于<code>获取关于页面的信息以及操纵其外观和底层结构</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>documentElement <span class="token comment">// 取得对&lt;html&gt;的引用</span>
document<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 取得对&lt;html&gt;的引用</span>
document<span class="token punctuation">.</span>firstChild <span class="token comment">// 取得对&lt;html&gt;的引用</span>

document<span class="token punctuation">.</span>body <span class="token comment">// 取的对&lt;body&gt;的引用</span>
document<span class="token punctuation">.</span>doctype <span class="token comment">// 取的对&lt;!doctype&gt;的引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有主流浏览器都支持 document.documentElement、document.body。</p><p><strong>文档信息：</strong></p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>document.title // 文档标题，可设置
document.URL // 完整 URL
document.domain // 域名，可设置（限制）
document.referrer // 来源
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以通过设置合法的 document.domain 让两个页面之间通信。</strong></p><p><strong>定位元素：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="element-类型" tabindex="-1"><a class="header-anchor" href="#element-类型" aria-hidden="true">#</a> Element 类型</h4><p>Element 表示 XML 或 HTML 元素，对外暴露出访问元素标签名，子节点和属性的能力。</p><p><strong>Element 类型的节点具有以下特征：</strong></p><ul><li><code>nodeType</code> 等于 1</li><li><code>nodeName</code> 值为元素的标签名</li><li><code>nodeValue</code> 值为 null</li><li><code>parentNode</code> 值为 Document 或 Element 对象</li><li><code>子节点</code>可以是 Element、Text、Comment、ProcessingInstruction、CDATASection、EntityReference 类型。</li></ul><p><strong>操作属性：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取元素属性值</span>
<span class="token keyword">var</span> linkUrl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myLink&quot;</span><span class="token punctuation">)</span>

linkUrl<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置元素属性值</span>
linkUrl<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://www.newexample.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移除元素属性</span>
linkUrl<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;attributeName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>attributes:</strong></p><p><strong>Element 类型是唯一使用 attributes 属性的 DOM 节点类型。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> allAttributes <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">;</span>

<span class="token comment">// 遍历所有属性</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> allAttributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allAttributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> allAttributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="text-类型" tabindex="-1"><a class="header-anchor" href="#text-类型" aria-hidden="true">#</a> Text 类型</h4><p>Text 类型包含按字面解释的纯文本，也可能包含转义后的 HTML 字符，但不含 HTML 代码。</p><p><strong>Text 类型特征：</strong></p><ul><li><code>nodeType</code> 等于 3</li><li><code>nodeName</code> 值为 &#39;#text&#39;</li><li><code>nodeValue</code> 值为节点中包含的文本</li><li><code>parentNode</code> 值为 Element 对象</li><li><code>不支持子节点</code></li></ul><h4 id="comment-类型" tabindex="-1"><a class="header-anchor" href="#comment-类型" aria-hidden="true">#</a> Comment 类型</h4><p>DOM 中的注释通过 Comment 类型表示。</p><p><strong>Comment 类型的特征：</strong></p><ul><li><code>nodeType</code> 等于 8</li><li><code>nodeName</code> 值为 &#39;#comment&#39;</li><li><code>nodeValue</code> 值为注释的内容</li><li><code>parentNode</code> 值为 Document 或 Element 对象</li><li><code>不支持子节点</code></li></ul><h4 id="documenttype-类型" tabindex="-1"><a class="header-anchor" href="#documenttype-类型" aria-hidden="true">#</a> DocumentType 类型</h4><p>DocumentType 类型的节点包含文档的文档类型信息。</p><p><strong>DocumentType 特征：</strong></p><ul><li><code>nodeType</code> 等于 10</li><li><code>nodeName</code> 值为 文档类型的名称</li><li><code>nodeValue</code> 值为 null</li><li><code>parentNode</code> 值为 Document 对象</li><li><code>不支持子节点</code></li></ul><h4 id="documentfragment-类型" tabindex="-1"><a class="header-anchor" href="#documentfragment-类型" aria-hidden="true">#</a> DocumentFragment 类型</h4><p>DocumentFragment 类型是唯一一个在标记中没有对应表示的类型。</p><p><strong>DocumentFragment 特征：</strong></p><ul><li><code>nodeType</code> 等于 11</li><li><code>nodeName</code> 值为 &#39;#document-fragment&#39;</li><li><code>nodeValue</code> 值为 null</li><li><code>parentNode</code> 值为 null</li><li>子节点可以是 Element、Text、Comment、ProcessingInstruction、CDATASection、EntityReference 类型。</li></ul><h3 id="dom-编程" tabindex="-1"><a class="header-anchor" href="#dom-编程" aria-hidden="true">#</a> DOM 编程</h3><h4 id="动态脚本" tabindex="-1"><a class="header-anchor" href="#动态脚本" aria-hidden="true">#</a> 动态脚本</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>

    <span class="token comment">// 处理脚本加载完成的事件</span>
    script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Script loaded: &#39;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行回调函数（可选）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 将脚本添加到文档头部</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例</span>
<span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&#39;path/to/your/script.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在脚本加载完成后执行的操作</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Callback function executed.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mutationobserver-接口" tabindex="-1"><a class="header-anchor" href="#mutationobserver-接口" aria-hidden="true">#</a> MutationObserver 接口</h3><p><code>MutationObserver</code> 是 JavaScript 中的一个接口，它提供了一种异步观察DOM（文档对象模型）树变化的能力。使用 <code>MutationObserver</code> 可以监测对DOM的更改，例如元素的添加、删除、属性的修改等。</p><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h4><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>function observeChanges(targetNode, config, callback) {
  var observer = new MutationObserver(callback);
  observer.observe(targetNode, config);
  return observer;
}

function stopObserving(observer) {
  observer.disconnect();
}

// 示例1
var targetNode1 = document.getElementById(&#39;element1&#39;);
var config1 = { attributes: true, childList: true, subtree: true };
var observer1 = observeChanges(targetNode1, config1, myCallback1);

// 示例2
var targetNode2 = document.getElementById(&#39;element2&#39;);
var config2 = { attributes: true };
var observer2 = observeChanges(targetNode2, config2, myCallback2);

// 停止观察
stopObserving(observer1);
stopObserving(observer2);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> attributes 
changed&#39;<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 这行代码会触发变化事件</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
 observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// 这行代码不会触发变化事件</span>
 document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
 <span class="token comment">// Reattach </span>
 observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// 这行代码会触发变化事件</span>
 document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// &lt;body&gt; attributes changed </span>
<span class="token comment">// &lt;body&gt; attributes changed </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-17-章-事件" tabindex="-1"><a class="header-anchor" href="#第-17-章-事件" aria-hidden="true">#</a> 第 17 章 事件</h2><h3 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h3><p><code>事件流</code>描述了页面接收事件的顺序。结果非常有意思，IE 和 Netscape 开发团队提出了几乎完全相反的事件流方案。<code>IE 将支持事件冒泡流，而 Netscape Communicator 将支持事件捕获流</code>。</p><p>IE 事件流被称为<code>事件冒泡</code>，这是因为事件被定义为从最具体的元素（文档树中最深的节点）开始触发，然后向上传播至没有那么具体的元素（文档）。</p><p>所有现代浏览器都支持事件冒泡，只是在实现方式上会有一些变化。现代浏览器中的事件会一直冒泡到 window 对象。</p><p><code>事件捕获</code>的意思是最不具体的节点应该最先收到事件，而最具体的节点应该最后收到事件。事件捕获实际上是为了在事件到达最终目标前拦截事件。</p><p><code>事件捕获</code>得到了所有现代浏览器的支持。实际上，所有浏览器都是从 window 对象开始捕获事件，而 DOM2 Events规范规定的是从 document 开始。</p><p>DOM2 Events 规范规定事件流分为 3 个阶段：<code>事件捕获、到达目标和事件冒泡</code>。事件捕获最先发生，为提前拦截事件提供了可能。然后，实际的目标元素接收到事件。最后一个阶段是冒泡，最迟要在这个阶段响应事件。</p><h3 id="事件处理程序" tabindex="-1"><a class="header-anchor" href="#事件处理程序" aria-hidden="true">#</a> 事件处理程序</h3><p>为响应事件而调用的函数被称为<code>事件处理程序</code>（或事件监听器）。事件处理程序的名字以&quot;on&quot;开头，因此 click 事件的处理程序叫作 onclick，而 load 事件的处理程序叫作 onload。有很多方式可以指定事件处理程序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;myBtn&quot; </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 在事件处理程序里通过 this 可以访问元素的任何属性和方法。</span>

btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 移除事件处理程序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 事件名、事件处理函数和一个布尔值，</span>
<span class="token comment">// true 表示在捕获阶段调用事件处理程序，</span>
<span class="token comment">// false（默认值）表示在冒泡阶段调用事件处理程序。</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 其他代码</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有效果！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h3><p>在 DOM 中发生事件时，所有相关信息都会被收集并存储在一个名为 <code>event 的对象中</code>。这个对象包 含了一些基本信息，比如导致事件的元素、发生的事件类型，以及可能与特定事件相关的任何其他数据。 <code>所有浏览器都支持这个 event 对象</code>，尽管支持方式不同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// preventDefault()方法用于阻止特定事件的默认动作。</span>
<span class="token comment">// 比如，链接的默认行为就是在被单击时导航到 href 属性指定的 URL。</span>
<span class="token comment">// 如果想阻止这个导航行为，可以在 onclick 事件处理程序中取消</span>

<span class="token keyword">let</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myLink&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
link<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// stopPropagation()方法用于立即阻止事件流在 DOM 结构中传播，取消后续的事件捕获或冒泡。</span>
<span class="token comment">// 例如，直接添加到按钮的事件处理程序中调用 stopPropagation()，</span>
<span class="token comment">// 可以阻止 document.body 上注册的事件处理程序执行。</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Body clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// eventPhase 属性可用于确定事件流当前所处的阶段。</span>
<span class="token comment">// 如果在捕获阶段被调用，则eventPhase 等于 1；</span>
<span class="token comment">// 如果在目标上被调用，则 eventPhase 等于 2；</span>
<span class="token comment">// 如果在冒泡阶段被调用，则 eventPhase 等于 3。</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 </span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>eventPhase<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 </span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h3><p><strong>DOM3 Events 定义了如下事件类型：</strong></p><ul><li><code>用户界面事件</code>（UIEvent）：涉及与 BOM 交互的通用浏览器事件。</li><li><code>焦点事件</code>（FocusEvent）：在元素获得和失去焦点时触发。</li><li><code>鼠标事件</code>（MouseEvent）：使用鼠标在页面上执行某些操作时触发。</li><li><code>滚轮事件</code>（WheelEvent）：使用鼠标滚轮（或类似设备）时触发。</li><li><code>输入事件</code>（InputEvent）：向文档中输入文本时触发。</li><li><code>键盘事件</code>（KeyboardEvent）：使用键盘在页面上执行某些操作时触发。</li><li><code>合成事件</code>（CompositionEvent）：在使用某种 IME（Input Method Editor，输入法编辑器）输入 字符时触发。</li></ul><h4 id="用户界面事件" tabindex="-1"><a class="header-anchor" href="#用户界面事件" aria-hidden="true">#</a> 用户界面事件</h4><ul><li><code>load</code>：在 window 上当页面加载完成后触发，在窗套（<code>&lt;frameset&gt;</code>）上当所有窗格（<code>&lt;frame&gt;</code>）都加载完成后触发，在<code>&lt;img&gt;</code>元素上当图片加载完成后触发，在<code>&lt;object&gt;</code>元素上当相应对象加载完成后触发。</li><li><code>unload</code>：在 window 上当页面完全卸载后触发，在窗套上当所有窗格都卸载完成后触发，在 <code>&lt;object&gt;</code>元素上当相应对象卸载完成后触发。</li><li><code>abort</code>：在<code>&lt;object&gt;</code>元素上当相应对象加载完成前被用户提前终止下载时触发。</li><li><code>error</code>：在 window 上当 JavaScript 报错时触发，在<code>&lt;img&gt;</code>元素上当无法加载指定图片时触发，在<code>&lt;object&gt;</code>元素上当无法加载相应对象时触发，在窗套上当一个或多个窗格无法完成加载时触发。</li><li><code>select</code>：在文本框（<code>&lt;input&gt;</code>或 <code>textarea</code>）上当用户选择了一个或多个字符时触发。</li><li><code>resize</code>：在 window 或窗格上当窗口或窗格被缩放时触发。</li><li><code>scroll</code>：当用户滚动包含滚动条的元素时在元素上触发。<code>&lt;body&gt;</code>元素包含已加载页面的滚动条。</li></ul><h4 id="焦点事件" tabindex="-1"><a class="header-anchor" href="#焦点事件" aria-hidden="true">#</a> 焦点事件</h4><ul><li><code>blur</code>：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持。</li><li><code>focus</code>：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持。</li><li><code>focusin</code>：当元素获得焦点时触发。这个事件是 focus 的冒泡版。</li><li><code>focusout</code>：当元素失去焦点时触发。这个事件是 blur 的通用版。</li></ul><h4 id="鼠标和滚轮事件" tabindex="-1"><a class="header-anchor" href="#鼠标和滚轮事件" aria-hidden="true">#</a> 鼠标和滚轮事件</h4><ul><li><p><code>click</code>：在用户单击鼠标主键（通常是左键）或按键盘回车键时触发。这主要是基于无障碍的考 虑，让键盘和鼠标都可以触发 onclick 事件处理程序。</p></li><li><p><code>dblclick</code>：在用户双击鼠标主键（通常是左键）时触发。</p></li><li><p><code>mousedown</code>：在用户按下任意鼠标键时触发。这个事件不能通过键盘触发。</p></li><li><p><code>mouseenter</code>：在用户把鼠标光标从元素外部移到元素内部时触发。这个事件不冒泡，也不会在 光标经过后代元素时触发。</p></li><li><p><code>mouseleave</code>：在用户把鼠标光标从元素内部移到元素外部时触发。这个事件不冒泡，也不会在 光标经过后代元素时触发。</p></li><li><p><code>mousemove</code>：在鼠标光标在元素上移动时反复触发。这个事件不能通过键盘触发。</p></li><li><p><code>mouseout</code>：在用户把鼠标光标从一个元素移到另一个元素上时触发。移到的元素可以是原始元 素的外部元素，也可以是原始元素的子元素。这个事件不能通过键盘触发。</p></li><li><p><code>mouseover</code>：在用户把鼠标光标从元素外部移到元素内部时触发。这个事件不能通过键盘触发。</p></li><li><p><code>mouseup</code>：在用户释放鼠标键时触发。这个事件不能通过键盘触发。</p></li><li><p>当鼠标滚轮<code>向前滚动</code>时，<code>wheelDelta</code> 每次都是<code>+120</code>；</p></li><li><p>而当鼠标滚轮<code>向后滚动</code>时，<code>wheelDelta</code> 每次都是<code>–120</code></p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousewheel&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="键盘与输入事件" tabindex="-1"><a class="header-anchor" href="#键盘与输入事件" aria-hidden="true">#</a> 键盘与输入事件</h4><ul><li><p><code>keydown</code>，用户按下键盘上某个键时触发，而且持续按住会重复触发。</p></li><li><p><code>keyup</code>，用户释放键盘上某个键时触发。</p></li><li><p><strong>keyCode 和 key：</strong> <code>keyCode</code> 属性返回一个表示按下键的键码，而 <code>key</code> 属性返回一个表示按下的是哪个键的字符串。注意，<code>keyCode</code> 属性已经逐渐被 <code>key</code> 属性替代，因为 <code>key</code> 提供了更多的信息。</p></li><li><p><strong>shiftKey、ctrlKey、altKey、metaKey：</strong> 这些属性表示是否同时按下了 Shift、Ctrl、Alt 和 Meta（Command）键。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key pressed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key code:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Shift key pressed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ctrl key pressed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Alt key pressed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>altKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> textbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
textbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;textInput&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>inputMethod<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>event.inputMethod值：</strong></p><ul><li>0，表示浏览器不能确定是什么输入手段；</li><li>1，表示键盘；</li><li>2，表示粘贴；</li><li>3，表示拖放操作；</li><li>4，表示 IME；</li><li>5，表示表单选项；</li><li>6，表示手写（如使用手写笔）；</li><li>7，表示语音；</li><li>8，表示组合方式；</li><li>9，表示脚本。</li></ul><h4 id="合成事件" tabindex="-1"><a class="header-anchor" href="#合成事件" aria-hidden="true">#</a> 合成事件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> textbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
textbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;compositionstart&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
textbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;compositionupdate&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
textbox<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;compositionend&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="html5-事件" tabindex="-1"><a class="header-anchor" href="#html5-事件" aria-hidden="true">#</a> HTML5 事件</h4><p><strong>contextmenu 事件</strong>：是在用户右键点击页面元素时触发的事件。当用户右键点击页面的某个元素时，浏览器会触发 <code>contextmenu</code> 事件，通常会显示浏览器的上下文菜单（context menu）。开发者可以通过监听这个事件来执行特定的操作或者自定义右键菜单。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myDiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;contextmenu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">let</span> menu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myMenu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        menu<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span> 
        menu<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span> 
        menu<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">&quot;visible&quot;</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myMenu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">&quot;hidden&quot;</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>beforeunload 事件</strong>：是在用户准备离开页面之前触发的事件。这个事件通常用于提示用户保存未保存的修改或执行其他清理操作，因为用户关闭页面时可能会丢失一些数据。</p><p>当用户关闭标签、关闭浏览器、输入新的 URL 或进行其他导致页面卸载的操作时，<code>beforeunload</code> 事件会被触发。在这个事件中，你可以显示一个确认消息，询问用户是否确定要离开页面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;beforeunload&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;I&#39;m really going to miss you if you go.&quot;</span><span class="token punctuation">;</span> 
    event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> message<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> message<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>DOMContentLoaded 事件</strong>：是在 HTML 文档解析完成并且所有的 DOM 树构建完成后触发的事件。这一时刻是在浏览器加载页面的过程中相对较早的阶段。</p><p><code>DOMContentLoaded</code> 不等待样式表、图像以及其他资源的加载完成，而是在 DOM 可以被操作和访问之时触发。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在DOM准备就绪后执行的代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded event fired&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在这里可以执行需要在页面加载后立即进行的操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么使用 <code>DOMContentLoaded</code> 事件？</strong></p><ol><li><strong>提早执行 JavaScript：</strong> 使用 <code>DOMContentLoaded</code> 允许在页面的 DOM 结构完全构建之后立即执行 JavaScript 代码。这有助于避免在 DOM 不完全构建时尝试访问或修改 DOM 元素，从而提高代码的可靠性。</li><li><strong>不等待资源加载：</strong> 相较于 <code>load</code> 事件，<code>DOMContentLoaded</code> 不需要等待页面上所有的资源（如图像、样式表）加载完成。这使得它更早触发，有助于提高页面加载性能。</li><li><strong>交互性能：</strong> 在 <code>DOMContentLoaded</code> 时执行一些初始化脚本，可以提高页面的初始交互性能，因为用户不需要等待所有资源加载完成。</li></ol><p><strong>readystatechange 事件：</strong> 是在 <code>Document</code> 对象的 <code>readyState</code> 属性发生变化时触发的事件。<code>readyState</code> 表示文档加载的当前状态，而 <code>readystatechange</code> 事件则在这个状态发生变化时提供通知。</p><p><strong><code>readyState</code> 属性的可能值：</strong></p><ul><li>uninitialized：对象存在并尚未初始化。</li><li>loading：对象正在加载数据。</li><li>loaded：对象已经加载完数据。</li><li>interactive：对象可以交互，但尚未加载完成。</li><li>complete：对象加载完成。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> document<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready state changed:&#39;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">&#39;complete&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在文档完全加载后执行的代码</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Document is fully loaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>pageshow</code> 和 <code>pagehide</code> 事件</strong>：是 HTML Living Standard 规范中定义的事件，用于通知开发者有关页面显示和隐藏的状态。</p><p><code>pageshow</code> 事件在页面显示时触发。这可能发生在页面初次加载、前进/后退导致的页面重新显示，或者在浏览器中重新加载页面时。这个事件提供了一种方式来检测页面是否从浏览器的缓存中加载，以及是否是新加载的页面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pageshow&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Page is shown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Persisted: &#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否从缓存加载</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pagehide</code> 事件在页面即将被隐藏时触发。这可能发生在页面被关闭、导航离开当前页面或刷新页面时。与 <code>pageshow</code> 事件一样，<code>pagehide</code> 事件也提供了一个属性来检测页面是否将被缓存。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pagehide&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Page is about to be hidden&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Persisted: &#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否被缓存</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>hashchange</code> 事件</strong>：是在 URL 中的片段标识符（hash，即 URL 中的 <code>#</code> 及其后的部分）发生变化时触发的事件。这个事件通常与使用锚点链接或前端路由时相关。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hash changed:&#39;</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么使用 <code>hashchange</code> 事件？</strong></p><ol><li><strong>前端路由：</strong> 在单页面应用程序（SPA）中，常常使用锚点链接或者路由库实现前端路由。<code>hashchange</code> 事件是实现这一机制的关键。</li><li><strong>历史记录管理：</strong> 通过监听 <code>hashchange</code> 事件，你可以实现对页面历史记录的管理，包括前进和后退操作。</li><li><strong>深链接：</strong> 使用片段标识符作为状态的一部分可以创建具有深链接的 Web 应用程序，使用户可以通过书签或直接输入 URL 来访问特定的应用程序状态。</li></ol><h3 id="内存与性能" tabindex="-1"><a class="header-anchor" href="#内存与性能" aria-hidden="true">#</a> 内存与性能</h3><h4 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托" aria-hidden="true">#</a> 事件委托</h4><p>“过多事件处理程序”的解决方案是使用<code>事件委托</code>。事件委托利用事件冒泡，可以只使用一个事件处理程序来管理一种类型的事件。</p><p><strong>事件委托具有如下优点：</strong></p><ul><li>document 对象随时可用，任何时候都可以给它添加事件处理程序（不用等待 DOMContentLoaded 或 load 事件）。这意味着只要页面渲染出可点击的元素，就可以无延迟地起作用。</li><li>节省花在设置页面事件处理程序上的时间。只指定一个事件处理程序既可以节省 DOM 引用，也 可以节省时间。</li><li>减少整个页面所需的内存，提升整体性能。</li></ul><p><strong>最适合使用事件委托的事件包括：</strong> click、mousedown、mouseup、keydown 和 keypress。</p><p>mouseover 和 mouseout 事件冒泡，但很难适当处理，且经常需要计算元素位置（因为 mouseout 会在光标从一个元素移动到它的一个后代节点以及移出元素之外时触发）。</p><h4 id="删除事件处理程序" tabindex="-1"><a class="header-anchor" href="#删除事件处理程序" aria-hidden="true">#</a> 删除事件处理程序</h4><p>应该及时删除不用的事件处理程序。</p><p>onload 事件处理程序中做了什么，最好在 onunload 事件处理程序中恢复。</p><p><strong>通过属性赋值添加的事件处理程序：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过属性赋值添加事件处理程序</span>
<span class="token keyword">function</span> <span class="token function">myEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event handled!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加事件处理程序</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> myEventHandler<span class="token punctuation">;</span>

<span class="token comment">// 删除事件处理程序</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 <code>addEventListener</code> 添加的事件处理程序：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 addEventListener 添加事件处理程序</span>
<span class="token keyword">function</span> <span class="token function">myEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event handled!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加事件处理程序</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> myEventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除事件处理程序</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> myEventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>围绕着使用事件，需要考虑内存与性能问题。例如：</strong></p><ul><li>最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢；</li><li>利用事件冒泡，事件委托可以解决限制事件处理程序数量的问题；</li><li>最好在页面卸载之前删除所有事件处理程序。</li></ul><h3 id="模拟事件" tabindex="-1"><a class="header-anchor" href="#模拟事件" aria-hidden="true">#</a> 模拟事件</h3><p>模拟事件的方法可以通过 <code>Event</code> 对象和 <code>dispatchEvent</code> 方法来实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取按钮元素</span>
<span class="token keyword">var</span> myButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myButton&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建事件对象</span>
<span class="token keyword">var</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加事件监听器</span>
myButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 模拟触发点击事件</span>
myButton<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>clickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-18-章-动画与-canvas-图形" tabindex="-1"><a class="header-anchor" href="#第-18-章-动画与-canvas-图形" aria-hidden="true">#</a> 第 18 章 动画与 Canvas 图形</h2><h3 id="使用-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#使用-requestanimationframe" aria-hidden="true">#</a> 使用 requestAnimationFrame</h3><p>一般计算机显示器的屏幕刷新率都是 <code>60Hz</code>，基本上意味着每秒需要重绘 <code>60 次</code>。大多数浏览器会限制重绘频率，使其不超出屏幕的刷新率，这是因为超过刷新率，用户也感知不到。</p><p>因此，实现平滑动画最佳的重绘间隔为 <code>1000 毫秒/60</code>，大约 <code>17 毫秒</code>。以这个速度重绘可以实现最平滑的动画，因为这已经是浏览器的极限了。如果同时运行多个动画，可能需要加以限流，以免 17 毫秒的重绘间隔过快，导致动画过早运行完。</p><p><code>requestAnimationFrame()</code> 用以通知浏览器某些 JS 代码要执行动画了。这样浏览器就可以在运行某些代码后进行适当的优化。目前所有浏览器都支持这个方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> requestID <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">let</span> enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">expensiveOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Invoked at&#39;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token comment">// 节流</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
        requestID <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>expensiveOperation<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 返回一个请求 ID，可以用于来取消重绘任务</span>
window<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>requestID<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本的画布功能" tabindex="-1"><a class="header-anchor" href="#基本的画布功能" aria-hidden="true">#</a> 基本的画布功能</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 确保浏览器支持&lt;canvas&gt; </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 取得图像的数据 URI </span>
    <span class="token keyword">let</span> imgURI <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">&quot;image/png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 显示图片</span>
    <span class="token keyword">let</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    image<span class="token punctuation">.</span>src <span class="token operator">=</span> imgURI<span class="token punctuation">;</span> 
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2d-绘图上下文" tabindex="-1"><a class="header-anchor" href="#_2d-绘图上下文" aria-hidden="true">#</a> 2D 绘图上下文</h3><p><code>2D 绘图上下文</code>提供了绘制 2D 图形的方法，包括矩形、弧形和路径。</p><p>2D 上下文的<code>坐标原点(0, 0)</code>在 <code>&lt;canvas&gt;</code> 元素的左上角。所有坐标值都相对于该点计算，<code>因此 x 坐标向右增长，y 坐标向下增长</code>。</p><p>默认情况下，width 和 height 表示两个方向上像素的最大值。</p><h4 id="填充和描边" tabindex="-1"><a class="header-anchor" href="#填充和描边" aria-hidden="true">#</a> 填充和描边</h4><p><code>填充 fillStyle</code>以指定样式（颜色、渐变或图像）自动填充形状，而<code>描边 strokeStyle</code>只为图形边界着色。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 确保浏览器支持&lt;canvas&gt; </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#0000ff&quot;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绘制矩形" tabindex="-1"><a class="header-anchor" href="#绘制矩形" aria-hidden="true">#</a> 绘制矩形</h4><p><code>矩形</code>是唯一一个可以直接在 2D 绘图上下文中绘制的形状。</p><p>与绘制矩形相关的方法有 3 个：<code>fillRect()、strokeRect()和 clearRect()</code>。这些方法都接收 4 个参数：<code>矩形 x 坐标、矩形 y 坐标、矩形宽度和矩形高度</code>。这几个参数的单位都是像素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 确保浏览器支持&lt;canvas&gt; </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 绘制红色矩形</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 绘制半透明蓝色矩形</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;rgba(0,0,255,0.5)&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token comment">// 在前两个矩形重叠的区域擦除一个矩形区域</span>
    context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    
    <span class="token comment">// 绘制红色轮廓的矩形</span>
    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 绘制半透明蓝色轮廓的矩形</span>
    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;rgba(0,0,255,0.5)&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绘制路径" tabindex="-1"><a class="header-anchor" href="#绘制路径" aria-hidden="true">#</a> 绘制路径</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 开始绘制新路径</span>
<span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 以(x, y)为圆心，以 radius 为半径绘制一条弧线，</span>
<span class="token comment">// 起始角度 startAngle，结束角度为 endAngle（都是弧度）。</span>
<span class="token comment">// counterclockwise 表示是否逆时针计算起始角度和结束角度（默认为顺时针）。</span>
<span class="token function">arc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> startAngle<span class="token punctuation">,</span> endAngle<span class="token punctuation">,</span> counterclockwise<span class="token punctuation">)</span>

<span class="token comment">// 以给定半径 radius，经由(x1, y1)绘制一条从上一点到(x2, y2)的弧线。</span>
<span class="token function">arcTo</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> radius<span class="token punctuation">)</span>

<span class="token comment">// 以(c1x, c1y)和(c2x, c2y)为控制点，绘制一条从上一点到(x, y)的弧线（三次贝塞尔曲线）。</span>
<span class="token function">bezierCurveTo</span><span class="token punctuation">(</span>c1x<span class="token punctuation">,</span> c1y<span class="token punctuation">,</span> c2x<span class="token punctuation">,</span> c2y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment">// 绘制一条从上一点到(x, y)的直线。</span>
<span class="token function">lineTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment">// 不绘制线条，只把绘制光标移动到(x, y)</span>
<span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment">// 以(cx, cy)为控制点，绘制一条从上一点到(x, y)的弧线（二次贝塞尔曲线）。</span>
<span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment">// 以给定宽度和高度在坐标点(x, y)绘制一个矩形。</span>
<span class="token comment">// 这个方法与 strokeRect()和 fillRect()的区别在于，</span>
<span class="token comment">// 它创建的是一条路径，而不是独立的图形。</span>
<span class="token function">rect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绘制文本" tabindex="-1"><a class="header-anchor" href="#绘制文本" aria-hidden="true">#</a> 绘制文本</h4><ul><li><code>font</code>：以 CSS 语法指定的字体样式、大小、字体族等，比如&quot;10px Arial&quot;。</li><li><code>textAlign</code>：指定文本的对齐方式，可能的值包括&quot;start&quot;、&quot;end&quot;、&quot;left&quot;、&quot;right&quot;和 &quot;center&quot;。推荐使用<code>&quot;start&quot;和&quot;end&quot;</code>，不使用&quot;left&quot;和&quot;right&quot;，因为前者无论在从左到右书写的语言还是从右到左书写的语言中含义都更明确。</li><li><code>textBaseLine</code> ：指定文本的基线，可能的值包括<code>&quot;top&quot;、&quot;hanging&quot;、&quot;middle&quot;、&quot;alphabetic&quot;、&quot;ideographic&quot;和&quot;bottom&quot;</code>。</li></ul><h4 id="变换" tabindex="-1"><a class="header-anchor" href="#变换" aria-hidden="true">#</a> 变换</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 围绕原点把图像旋转 angle 弧度</span>
<span class="token function">rotate</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>

<span class="token comment">// 通过在 x 轴乘以 scaleX、在 y 轴乘以 scaleY 来缩放图像。</span>
<span class="token comment">// scaleX 和 scaleY 的默认值都是 1.0。</span>
<span class="token function">scale</span><span class="token punctuation">(</span>scaleX<span class="token punctuation">,</span> scaleY<span class="token punctuation">)</span>

<span class="token comment">// 把原点移动到(x, y)。执行这个操作后，坐标(0, 0)就会变成(x, y)。</span>
<span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment">// 像下面这样通过矩阵乘法直接修改矩阵。</span>
<span class="token comment">// m1_1 m1_2 dx </span>
<span class="token comment">// m2_1 m2_2 dy </span>
<span class="token comment">// 0 0 1 </span>
<span class="token function">transform</span><span class="token punctuation">(</span>m1_1<span class="token punctuation">,</span> m1_2<span class="token punctuation">,</span> m2_1<span class="token punctuation">,</span> m2_2<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span> 

<span class="token comment">// 把矩阵重置为默认值，再以传入的参数调用 transform()。</span>
<span class="token function">setTransform</span><span class="token punctuation">(</span>m1_1<span class="token punctuation">,</span> m1_2<span class="token punctuation">,</span> m2_1<span class="token punctuation">,</span> m2_2<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 确保浏览器支持&lt;canvas&gt; </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 创建路径</span>
    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 绘制外圆</span>
    context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 绘制内圆</span>
    context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">194</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token comment">// 1号方法</span>
    <span class="token comment">// 绘制分针</span>
    <span class="token comment">// context.moveTo(100, 100); </span>
    <span class="token comment">// context.lineTo(100, 15); </span>
    <span class="token comment">// 绘制时针</span>
    <span class="token comment">// context.moveTo(100, 100); </span>
    <span class="token comment">// context.lineTo(35, 100);  </span>
    
    <span class="token comment">// 2号方法</span>
    <span class="token comment">// 移动原点到表盘中心</span>
    context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 旋转表针</span>
    context<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 绘制分针</span>
    context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 绘制时针</span>
    context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    
    <span class="token comment">// 描画路径</span>
    context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    context<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">&quot;bold 14px Arial&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">&quot;middle&quot;</span><span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">&quot;12&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绘制图像" tabindex="-1"><a class="header-anchor" href="#绘制图像" aria-hidden="true">#</a> 绘制图像</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 要绘制的图像、源图像 x 坐标、源图像 y 坐标、源图像宽度、源图像高度</span>
<span class="token comment">// 目标区域 x 坐标、目标区域 y 坐标、目标区域宽度和目标区域高度</span>
context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="阴影" tabindex="-1"><a class="header-anchor" href="#阴影" aria-hidden="true">#</a> 阴影</h4><ul><li><code>shadowColor</code>：CSS 颜色值，表示要绘制的阴影颜色，默认为黑色。</li><li><code>shadowOffsetX</code>：阴影相对于形状或路径的 x 坐标的偏移量，默认为 0。</li><li><code>shadowOffsetY</code>：阴影相对于形状或路径的 y 坐标的偏移量，默认为 0。</li><li><code>shadowBlur</code>：像素，表示阴影的模糊量。默认值为 0，表示不模糊。</li></ul><h4 id="渐变" tabindex="-1"><a class="header-anchor" href="#渐变" aria-hidden="true">#</a> 渐变</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建线性渐变对象 (x0, y0, x1, y1)</span>
<span class="token keyword">let</span> gradient <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 



<span class="token comment">// 径向渐变 (x0, y0, r0, x1, y1, r1)</span>
<span class="token keyword">let</span> gradient <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 绘制红色矩形</span>
context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#ff0000&quot;</span><span class="token punctuation">;</span> 
context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 绘制渐变矩形</span>
context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span> 
context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图案" tabindex="-1"><a class="header-anchor" href="#图案" aria-hidden="true">#</a> 图案</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 Canvas 元素</span>
<span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;imagePatternCanvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建图像对象</span>
<span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;path/to/your/image.jpg&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 图像加载完成后创建图像图案</span>
img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &#39;repeat&#39;, &#39;repeat-x&#39;, &#39;repeat-y&#39;, &#39;no-repeat&#39;</span>
    <span class="token keyword">var</span> pattern <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&#39;repeat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token comment">// 使用图案填充矩形</span>
    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pattern<span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图像数据" tabindex="-1"><a class="header-anchor" href="#图像数据" aria-hidden="true">#</a> 图像数据</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 确保浏览器支持&lt;canvas&gt; </span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        image <span class="token operator">=</span> document<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        imageData<span class="token punctuation">,</span> data<span class="token punctuation">,</span> 
        i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> average<span class="token punctuation">,</span> 
        red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> alpha<span class="token punctuation">;</span> 
    <span class="token comment">// 绘制图像</span>
    context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 取得图像数据</span>
    imageData <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    data <span class="token operator">=</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">=</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        red <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
        green <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        blue <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        alpha <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 取得 RGB 平均值</span>
        average <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>red <span class="token operator">+</span> green <span class="token operator">+</span> blue<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
        <span class="token comment">// 设置颜色，不管透明度</span>
        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> average<span class="token punctuation">;</span> 
        data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> average<span class="token punctuation">;</span> 
        data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> average<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 将修改后的数据写回 ImageData 并应用到画布上显示出来</span>
    imageData<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> 
    context<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="合成" tabindex="-1"><a class="header-anchor" href="#合成" aria-hidden="true">#</a> 合成</h4><p>在 Canvas 中，你可以使用<code>合成操作</code>来控制绘制的图形之间的混合方式。<code>合成操作</code>允许你通过不同的合成模式来控制图形的显示效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 Canvas 元素</span>
<span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;globalCompositeModeCanvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 绘制一个红色矩形</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置全局合成模式</span>
ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">&#39;destination-over&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 绘制一个蓝色矩形，根据合成模式绘制在前一个矩形的后面</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码，首先绘制了一个红色的矩形，然后设置了全局合成模式为 <code>&#39;destination-over&#39;</code>，接着绘制了一个蓝色的矩形，根据合成模式，蓝色矩形被绘制在前一个红色矩形的后面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 Canvas 元素</span>
<span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;compositeOperationsCanvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 绘制一个红色矩形</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置透明度</span>
ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>

<span class="token comment">// 绘制一个蓝色矩形，根据透明度产生混合效果</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码，使用 <code>globalAlpha</code> 设置了透明度，然后绘制了一个蓝色的矩形，产生了透明度混合的效果。</p><h3 id="webgl-上下文" tabindex="-1"><a class="header-anchor" href="#webgl-上下文" aria-hidden="true">#</a> WebGL 上下文</h3><p>WebGL 是画布的 3D 上下文。</p><p>WebGL 是以 OpenGL ES 2.0 为基础的。要使用 WebGL 最好熟悉 OpenGL ES 2.0，因为很多概念可以照搬过来。</p><p>https://learnopengl-cn.github.io/ https://learnwebgl.brown37.net/</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>WebGL Simple Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myCanvas<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取 Canvas 元素</span>
      <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myCanvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 获取 webgl</span>
      <span class="token keyword">var</span> gl <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;webgl&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Unable to initialize WebGL. Your browser may not support it.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> vertexShaderSrc <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        attribute vec4 a_Position;
        void main() {
          gl_Position = a_Position;
        }
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> fragmentShaderSrc <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        void main() {
          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
        }
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

      <span class="token comment">// 渲染器生成处理</span>
      <span class="token comment">// 创建顶点渲染器</span>
      <span class="token keyword">const</span> vertexShader <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createShader</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">VERTEX_SHADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">shaderSource</span><span class="token punctuation">(</span>vertexShader<span class="token punctuation">,</span> vertexShaderSrc<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">compileShader</span><span class="token punctuation">(</span>vertexShader<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 创建片元渲染器</span>
      <span class="token keyword">const</span> fragmentShader <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createShader</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">FRAGMENT_SHADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">shaderSource</span><span class="token punctuation">(</span>fragmentShader<span class="token punctuation">,</span> fragmentShaderSrc<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">compileShader</span><span class="token punctuation">(</span>fragmentShader<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 创建程序对象</span>
      <span class="token keyword">const</span> program <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">attachShader</span><span class="token punctuation">(</span>program<span class="token punctuation">,</span> vertexShader<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">attachShader</span><span class="token punctuation">(</span>program<span class="token punctuation">,</span> fragmentShader<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">linkProgram</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">useProgram</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span>program <span class="token operator">=</span> program<span class="token punctuation">;</span>

      <span class="token comment">// 顶点数据</span>
      <span class="token comment">// prettier-ignore</span>
      <span class="token keyword">const</span> vertices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 第一个点</span>
        <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 第二个点</span>
        <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 第三个点</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 创建缓存对象</span>
      <span class="token keyword">const</span> vertexBuffer <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 绑定缓存对象到上下文</span>
      gl<span class="token punctuation">.</span><span class="token function">bindBuffer</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">ARRAY_BUFFER</span><span class="token punctuation">,</span> vertexBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 向缓存区写入数据</span>
      gl<span class="token punctuation">.</span><span class="token function">bufferData</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">ARRAY_BUFFER</span><span class="token punctuation">,</span> vertices<span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">STATIC_DRAW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 获取 a_Position 变量地址</span>
      <span class="token keyword">const</span> a_Position <span class="token operator">=</span> gl<span class="token punctuation">.</span><span class="token function">getAttribLocation</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span>program<span class="token punctuation">,</span> <span class="token string">&quot;a_Position&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将缓冲区对象分配给 a_Position 变量</span>
      gl<span class="token punctuation">.</span><span class="token function">vertexAttribPointer</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> gl<span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 允许访问缓存区</span>
      gl<span class="token punctuation">.</span><span class="token function">enableVertexAttribArray</span><span class="token punctuation">(</span>a_Position<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 绘制</span>
      <span class="token comment">// 清空画布，并指定颜色</span>
      gl<span class="token punctuation">.</span><span class="token function">clearColor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      gl<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">COLOR_BUFFER_BIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 绘制三角形</span>
      gl<span class="token punctuation">.</span><span class="token function">drawArrays</span><span class="token punctuation">(</span>gl<span class="token punctuation">.</span><span class="token constant">TRIANGLES</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da384e0623c04dbd9f5dd565121e7007~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1088&amp;h=1024&amp;s=32120&amp;e=png&amp;b=000000" alt="image.png"></p><h2 id="第-25-章-客户端存储" tabindex="-1"><a class="header-anchor" href="#第-25-章-客户端存储" aria-hidden="true">#</a> 第 25 章 客户端存储</h2><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><p><code>Cookies</code> 是存储在用户计算机上的小型文本文件，由网站使用以存储有关用户的信息。</p><p>它们通常包含有关用户和网站之间状态的信息，用于跟踪用户、记录登录状态、存储购物车内容等。</p><p>Cookies 是 HTTP 的一部分，由浏览器自动处理，每个 Cookie 都与一个特定的域相关联。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个 Cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;username=John Doe; expires=Thu, 18 Dec 2022 12:00:00 UTC; path=/&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 读取所有 Cookie</span>
<span class="token keyword">var</span> allCookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>

<span class="token comment">// 读取特定的 Cookie</span>
<span class="token keyword">var</span> usernameCookie <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cookie<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一些常见的 Cookies 限制：</strong></p><ol><li><strong>同源策略：</strong> 浏览器遵循同源策略，即一个网站下设置的 Cookie 一般不会被其他网站访问。这是为了保护用户的隐私和防止跨站点请求伪造（CSRF）攻击。</li><li><strong>域限制：</strong> Cookie 受同源策略的限制，但可以通过设置 <code>domain</code> 属性来使 Cookie 在主域和其子域之间共享。然而，该域名必须包含在当前页面的域名中，而不是其他域名。</li><li><strong>路径限制：</strong> Cookie 可以通过设置 <code>path</code> 属性指定其有效路径。只有在该路径及其子路径下的页面才能访问该 Cookie。</li><li><strong>安全限制：</strong> 设置 <code>Secure</code> 属性的 Cookie 只能通过 HTTPS 连接传输。这是为了保护敏感信息，确保它在传输过程中不容易被窃听。</li><li><strong>Cookie 数量和大小限制：</strong> 不同浏览器对于每个域名下可以存储的 Cookie 数量和总大小有限制。超过这些限制可能会导致一些 Cookie 被丢弃。大约限制为 4KB。</li><li><strong>过期时间限制：</strong> 如果不设置过期时间，Cookie 默认是会话级别的，将在用户关闭浏览器时失效。可以通过设置 <code>expires</code> 属性或 <code>max-age</code> 属性来指定 Cookie 的过期时间。</li><li><strong>第三方 Cookie：</strong> 浏览器通常会限制第三方 Cookie 的存储和访问，以减少跟踪用户的能力。一些浏览器对第三方 Cookie 的处理方式可能有所不同。</li></ol><p><strong>Cookie 属性：</strong></p><ul><li><strong>Name-Value Pair（名称-值对）：</strong> 每个 Cookie 都有一个名称和一个相应的值。</li><li><strong>Expires（过期时间）：</strong> Cookie 的过期时间，过了这个时间后，浏览器会自动删除该 Cookie。</li><li><strong>Domain（域）：</strong> Cookie 关联的域。只有在该域及其子域下才能访问该 Cookie。</li><li><strong>Path（路径）：</strong> Cookie 的有效路径。只有在指定路径下的页面才能访问该 Cookie。</li><li><strong>Secure：</strong> 表示此 Cookie 只能通过 HTTPS 连接传输。</li><li><strong>HttpOnly：</strong> 如果设置了 <code>HttpOnly</code> 属性，那么该 Cookie 将无法通过 JavaScript 访问。这有助于防止一些跨站脚本攻击。</li><li><strong>SameSite：</strong> 用于防止跨站点请求伪造攻击。<code>SameSite</code> 属性可以设置为 <code>&quot;Strict&quot;</code>、<code>&quot;Lax&quot;</code> 或 <code>null</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">CookieUtil</span> <span class="token punctuation">{</span> 
    <span class="token keyword">static</span> <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> cookieName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> 
            cookieStart <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cookieName<span class="token punctuation">)</span><span class="token punctuation">,</span> 
            cookieValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieStart <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">let</span> cookieEnd <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">,</span> cookieStart<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieEnd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
                cookieEnd <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
            cookieValue <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>cookieStart 
        <span class="token operator">+</span> cookieName<span class="token punctuation">.</span>length<span class="token punctuation">,</span> cookieEnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">return</span> cookieValue<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">static</span> <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> cookieText <span class="token operator">=</span> 
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expires <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>expires<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>domain<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>secure<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            cookieText <span class="token operator">+=</span> <span class="token string">&quot;; secure&quot;</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> cookieText<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">static</span> <span class="token function">unset</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        CookieUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 


<span class="token comment">// 设置 cookie </span>
CookieUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
CookieUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Professional JavaScript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 读取 cookie </span>
<span class="token function">alert</span><span class="token punctuation">(</span>CookieUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Nicholas&quot; </span>
<span class="token function">alert</span><span class="token punctuation">(</span>CookieUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Professional JavaScript&quot; </span>
<span class="token comment">// 删除 cookie </span>
CookieUtil<span class="token punctuation">.</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
CookieUtil<span class="token punctuation">.</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 设置有路径、域和过期时间的 cookie </span>
CookieUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/books/projs/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www.wrox.com&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;January 1, 2010&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 删除刚刚设置的 cookie </span>
CookieUtil<span class="token punctuation">.</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/books/projs/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www.wrox.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 设置安全 cookie </span>
CookieUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>子 cookies：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SubCookieUtil</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取得一个子 cookie 的值</span>
    <span class="token keyword">static</span> <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> subName<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> subCookies <span class="token operator">=</span> SubCookieUtil<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span> subCookies <span class="token operator">?</span> subCookies<span class="token punctuation">[</span>subName<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">// 取得所有子 cookie</span>
    <span class="token keyword">static</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> cookieName <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> 
            cookieStart <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cookieName<span class="token punctuation">)</span><span class="token punctuation">,</span> 
            cookieValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> 
            cookieEnd<span class="token punctuation">,</span> 
            subCookies<span class="token punctuation">,</span> 
            parts<span class="token punctuation">,</span> 
            result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieStart <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            cookieEnd <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">,</span> cookieStart<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieEnd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                cookieEnd <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>length<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
            cookieValue <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>cookieStart <span class="token operator">+</span> cookieName<span class="token punctuation">.</span>length<span class="token punctuation">,</span> cookieEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieValue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                subCookies <span class="token operator">=</span> cookieValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> subCookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                    parts <span class="token operator">=</span> subCookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                    result<span class="token punctuation">[</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token punctuation">}</span> 
                <span class="token keyword">return</span> result<span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> subName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> subcookies <span class="token operator">=</span> SubCookieUtil<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
        subcookies<span class="token punctuation">[</span>subName<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span> 
        SubCookieUtil<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> subcookies<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">static</span> <span class="token function">setAll</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> subcookies<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> cookieText <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> 
            subcookieParts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
            subName<span class="token punctuation">;</span> 
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span>subName <span class="token keyword">in</span> subcookies<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>subName<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> subcookies<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>subName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    subcookieParts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;\${encodeURIComponent(subName)}=\${encodeURIComponent(subcookies[subName])}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieParts<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            cookieText <span class="token operator">+=</span> subcookieParts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>expires <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>expires<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>domain<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>secure<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                cookieText <span class="token operator">+=</span> <span class="token string">&quot;; secure&quot;</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
            cookieText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> cookieText<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token function">unset</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> subName<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">let</span> subcookies <span class="token operator">=</span> SubCookieUtil<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subcookies<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">delete</span> subcookies<span class="token punctuation">[</span>subName<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 删除</span>
            SubCookieUtil<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> subcookies<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
     <span class="token punctuation">}</span>
     
    <span class="token keyword">static</span> <span class="token function">unsetAll</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        SubCookieUtil<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="web-storage" tabindex="-1"><a class="header-anchor" href="#web-storage" aria-hidden="true">#</a> Web Storage</h3><p>Web Storage 的第 2 版定义了两个对象：<code>localStorage 和 sessionStorage</code>。</p><p><code>localStorage 是永久存储机制，sessionStorage 是跨会话的存储机制</code>。</p><p>这两种浏览器存储 API 提供了在浏览器中不受页面刷新影响而存储数据的两种方式。</p><h4 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage：</h4><ul><li><strong>长期存储：</strong> <code>localStorage</code> 中的数据是永久性的，除非用户手动清除浏览器缓存或网站清除自己的数据，否则数据将一直保存在本地。</li><li><strong>大小限制：</strong> 通常允许存储的数据大小为 5MB。</li><li><strong>作用域：</strong> 存储在 <code>localStorage</code> 中的数据对于相同域名的所有页面都是共享的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 存储数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取数据</span>
<span class="token keyword">var</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 清空所有数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage：</h4><ul><li><strong>临时存储：</strong> <code>sessionStorage</code> 中的数据在用户会话结束时被清除，关闭浏览器窗口或标签页会终止用户会话。</li><li><strong>大小限制：</strong> 通常允许存储的数据大小也为 5MB。</li><li><strong>作用域：</strong> 存储在 <code>sessionStorage</code> 中的数据仅对于打开的窗口或标签页是有效的，不同窗口之间不共享数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 存储数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取数据</span>
<span class="token keyword">var</span> value <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 清空所有数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb" aria-hidden="true">#</a> IndexedDB</h3><p><code>IndexedDB</code>（Indexed Database）是一个在浏览器中提供的低级别的客户端存储数据库，用于存储大量结构化数据。IndexedDB 是一个 <code>NoSQL 数据库</code>，它使用<code>对象存储空间来存储和检索数据</code>。相较于 Web Storage，IndexedDB 更适用于<code>存储大量数据和需要进行复杂查询的场景</code>。</p><p>IndexedDB 的设计几乎完全是<code>异步的</code>。为此，大多数操作以请求的形式执行，这些请求会异步执行，产生成功的结果或错误。绝大多数 IndexedDB 操作要求添加 onerror 和 onsuccess 事件处理程序来确定输出。</p><h4 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h4><p>IndexedDB 是类似于 MySQL 或 Web SQL Database 的数据库。与传统数据库最大的区别在于，IndexedDB <code>使用对象存储而不是表格保存数据</code>。IndexedDB 数据库就是在一个公共命名空间下的一组对象存储，类似于 NoSQL 风格的实现。</p><h4 id="对象存储" tabindex="-1"><a class="header-anchor" href="#对象存储" aria-hidden="true">#</a> 对象存储</h4><p>建立了数据库连接之后，下一步就是使用对象存储。</p><h4 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h4><p>创建了对象存储之后，剩下的所有操作都是通过事务完成的。事务要通过调用数据库对象的transaction()方法创建。任何时候，只要想要读取或修改数据，都要通过事务把所有修改操作组织起来。</p><h4 id="插入对象" tabindex="-1"><a class="header-anchor" href="#插入对象" aria-hidden="true">#</a> 插入对象</h4><p>拿到了对象存储的引用后，就可以使用 add()或 put()写入数据了。</p><p>这两个方法都接收一个参数，即要存储的对象，并把对象保存到对象存储。</p><p>这两个方法只在对象存储中已存在同名的键时有区别。这种情况下，add()会导致错误，而 put()会简单地重写该对象。更简单地说，可以把 add()想象成插入新值，而把 put()想象为更新值。</p><h4 id="通过游标查询" tabindex="-1"><a class="header-anchor" href="#通过游标查询" aria-hidden="true">#</a> 通过游标查询</h4><p>使用事务可以通过一个已知键取得一条记录。如果想取得多条数据，则需要在事务中创建一个<code>游标</code>。</p><p><code>游标</code>是一个指向结果集的指针。与传统数据库查询不同，游标不会事先收集所有结果。相反，游标指向第一个结果，并在接到指令前不会主动查找下一条数据。</p><p>需要在对象存储上调用 openCursor()方法创建游标。</p><h4 id="键范围" tabindex="-1"><a class="header-anchor" href="#键范围" aria-hidden="true">#</a> 键范围</h4><p>使用游标会给人一种不太理想的感觉，因为获取数据的方式受到了限制。使用<code>键范围</code>（key range）可以让游标更容易管理。键范围对应 IDBKeyRange 的实例。</p><h4 id="并发问题" tabindex="-1"><a class="header-anchor" href="#并发问题" aria-hidden="true">#</a> 并发问题</h4><p>IndexedDB 虽然是网页中的异步 API，但仍存在并发问题。如果两个不同的浏览器标签页同时打开了同一个网页，则有可能出现一个网页尝试升级数据库而另一个尚未就绪的情形。有问题的操作是设置数据库为新版本，<code>而版本变化只能在浏览器只有一个标签页使用数据库时才能完成</code>。</p><p>第一次打开数据库时，添加 onversionchange 事件处理程序非常重要。另一个同源标签页将数据库打开到新版本时，将执行此回调。对这个事件最好的回应是立即关闭数据库，以便完成版本升级。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> request<span class="token punctuation">,</span> database<span class="token punctuation">;</span> 
request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    database <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> 
    database<span class="token punctuation">.</span><span class="token function-variable function">onversionchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> database<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应该在每次成功打开数据库后都指定 onversionchange 事件处理程序。记住，onversionchange 有可能会被其他标签页触发。</p><p>通过始终都指定这些事件处理程序，可以保证 Web 应用程序能够更好地处理与 IndexedDB 相关的并发问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打开数据库</span>
<span class="token keyword">var</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;myDatabase&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 数据库升级事件</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>

    <span class="token comment">// 创建对象存储空间</span>
    <span class="token keyword">var</span> objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&#39;id&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加索引</span>
    objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&#39;nameIndex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 打开数据库成功事件</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Database opened successfully&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加数据</span>
    <span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> objectStore <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> addRequest <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    addRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Data added successfully&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 读取数据</span>
        <span class="token keyword">var</span> getTransaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;readonly&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> getObjectStore <span class="token operator">=</span> getTransaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> getRequest <span class="token operator">=</span> getObjectStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        getRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> retrievedData <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Retrieved data:&#39;</span><span class="token punctuation">,</span> retrievedData<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 删除数据</span>
            <span class="token keyword">var</span> deleteTransaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> deleteObjectStore <span class="token operator">=</span> deleteTransaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;myObjectStore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">var</span> deleteRequest <span class="token operator">=</span> deleteObjectStore<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            deleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Data deleted successfully&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 打开数据库失败事件</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Database error: &#39;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,249))])}const b=o(u,[["render",d],["__file","js.html.vue"]]);export{b as default};
