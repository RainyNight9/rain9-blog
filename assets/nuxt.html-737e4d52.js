import{_ as n,o as s,c as e,e as t}from"./app-f5876168.js";const i={};function l(r,a){return s(),e("div",null,a[0]||(a[0]=[t(`<h1 id="nuxt" tabindex="-1"><a class="header-anchor" href="#nuxt" aria-hidden="true">#</a> nuxt</h1><h2 id="seo" tabindex="-1"><a class="header-anchor" href="#seo" aria-hidden="true">#</a> SEO</h2><p>通过了解各类搜索引擎如何抓取互联网页面、如何进行索引以及如何确定其对某一特定关键词的搜索结果排名等技术，来对网页内容进行相关的优化，使其符合用户浏览习惯，在不损害用户体验的情况下提高搜索引擎排名，从而提高网站访问量，最终提升的销售能力或宣传能力的技术。</p><ul><li>SEO：搜索引擎优化（Search Engine Optimization）, 通过各种技术（手段）来确保，我们的 Web 内容被搜索引擎最大化收录，最大化提高权重，最终带来更多流量。</li><li>非常明显，SPA 程序不利于 SEO</li></ul><p>SEO解决方案：<strong>提前将页面和数据进行整合</strong></p><ul><li>前端：采用 SSR</li><li>后端：页面静态化 （freemarker 、thymeleaf、velocity）</li></ul><h2 id="nuxt-js-和纯-vue-项目对比" tabindex="-1"><a class="header-anchor" href="#nuxt-js-和纯-vue-项目对比" aria-hidden="true">#</a> Nuxt.js 和纯 Vue 项目对比</h2><h3 id="_1-build-后目标产物不同" tabindex="-1"><a class="header-anchor" href="#_1-build-后目标产物不同" aria-hidden="true">#</a> 1. build 后目标产物不同</h3><ul><li>vue: dist</li><li>nuxt: .nuxt</li></ul><h3 id="_2-网页渲染流程" tabindex="-1"><a class="header-anchor" href="#_2-网页渲染流程" aria-hidden="true">#</a> 2. 网页渲染流程</h3><ul><li>vue: 客户端渲染，先下载 js 后，通过 ajax 来渲染页面；</li><li>nuxt： 服务端渲染，可以做到服务端拼接好 html 后直接返回，首屏可以做到无需发起 ajax 请求；</li></ul><h3 id="_3-部署流程" tabindex="-1"><a class="header-anchor" href="#_3-部署流程" aria-hidden="true">#</a> 3. 部署流程</h3><ul><li><p>vue： 只需部署 dist 目录到服务器，没有服务端，需要用 nginx 等做 Web 服务器；</p></li><li><p>nuxt： 需要部署几乎所有文件到服务器（除 node_modules，.git），自带服务端，需要pm2管理（部署时需要 reload pm2），若要求用域名，则需要 nginx 做代理。</p></li><li><p>本地运行 npm run build 打包，然后把 .nuxt、static、nuxt.config.js、package.json、package-lock.json 上传到服务器,上传好后，运行 npm install 安装依赖，最后运行 npm run start 启动项目。</p></li><li><p>另外一种方法在服务器上打包上传整个项目到服务器上，当然像 node_modules、.idea 之类的除外，接着依次运行：npm install|npm run build|npm run start</p></li></ul><h3 id="_4-项目入口" tabindex="-1"><a class="header-anchor" href="#_4-项目入口" aria-hidden="true">#</a> 4. 项目入口</h3><ul><li>vue: /src/main.js，在 main.js 可以做一些全局注册的初始化工作；</li><li>nuxt: 没有 main.js 入口文件，项目初始化的操作需要通过 nuxt.config.js 进行配置指定。</li></ul><h2 id="如何设置页面客户端渲染" tabindex="-1"><a class="header-anchor" href="#如何设置页面客户端渲染" aria-hidden="true">#</a> 如何设置页面客户端渲染</h2><ul><li>场景一：关闭项目所有页面的ssr 对于不需要索引或用户经常访问的高度交互式web应用程序，可以在nuxt.config.ts中使用Nuxt启用仅客户端渲染：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">ssr</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>场景二：仅对个别页面关闭ssr 使用路由规则：从 Nuxt 3 开始随着公测 rc. 12 版本发布，支持路由规则和混合渲染。 使用路由规则，您可以为一组 nuxt 路由定义规则，改变呈现模式或分配基于路由的缓存策略。 <ul><li>redirect - 重定向。</li><li>ssr - 禁用应用程序部分的服务器端渲染，并使<code>ssr: false</code>使它们仅用于spa。</li><li>cors - 自动添加带有<code>cors: true</code>的 cors 报头-你可以通过用 headers 覆盖自定义输出</li><li>headers - 为站点的各个部分添加特定的标题</li><li>static and swr - static 支持单个(按需)构建; swr 启用静态构建，该构建持续一个可配置的TTL。 配置ssr示例:</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routeRules<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;/admin/**&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> ssr<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果确实使用<code>ssr:false</code>，还应该在/src目录新增app文件夹，文件夹下建立spa-loading-template.html文件（如果没有使用本文中的/src目录的配置，要在根目录下新增app文件夹），html文件中包含一些我们想用来渲染加载页面的HTML。</p></blockquote>`,21)]))}const o=n(i,[["render",l],["__file","nuxt.html.vue"]]);export{o as default};
