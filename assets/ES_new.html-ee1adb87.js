import{_ as o,r as c,o as l,c as i,e as t,a as s,b as a,d as e}from"./app-f5876168.js";const u={},r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_expressions",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",target:"_blank",rel:"noopener noreferrer"};function f(h,n){const p=c("ExternalLinkIcon");return l(),i("div",null,[n[36]||(n[36]=t(`<h1 id="面试官问-了解哪些最新的-es-新特性-——这样回答更好" tabindex="-1"><a class="header-anchor" href="#面试官问-了解哪些最新的-es-新特性-——这样回答更好" aria-hidden="true">#</a> 面试官问：了解哪些最新的 ES 新特性？——这样回答更好！</h1><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h2><ol><li><strong>帮助大家答好这个问题，答出能给自己加分的答案。</strong></li><li><strong>真正帮助大家在实际工作中运用新特性，收获成长。</strong></li></ol><h2 id="为什么会有这个问题" tabindex="-1"><a class="header-anchor" href="#为什么会有这个问题" aria-hidden="true">#</a> 为什么会有这个问题？</h2><p><strong>首先要明白，面试官为什么会问这个问题？</strong></p><p>这背后其实是希望了解：</p><ul><li>你是否关注技术前沿，跟随行业趋势。</li><li>你是否能够将新特性运用到实际工作中，为团队和项目带来价值。</li></ul><p>具体来说，了解和使用最新的 ECMAScript（ES）特性对前端开发者有以下几个显著好处：</p><h3 id="_1-提高开发效率" tabindex="-1"><a class="header-anchor" href="#_1-提高开发效率" aria-hidden="true">#</a> 1. 提高开发效率</h3><ul><li><strong>语法更简洁</strong>：如 <code>箭头函数</code>、<code>模板字符串</code>、<code>解构赋值</code> 等，大幅减少代码量，提升可读性和可维护性。</li><li><strong>功能更强大</strong>：例如可选链（<code>?.</code>）和空值合并操作符（<code>??</code>），简化了对深层对象属性的安全访问，减少冗余代码。</li></ul><h3 id="_2-提升代码性能" tabindex="-1"><a class="header-anchor" href="#_2-提升代码性能" aria-hidden="true">#</a> 2. 提升代码性能</h3><ul><li>新特性通常经过引擎优化，可以更高效地运行。 <ul><li><strong>异步操作</strong>：<code>Async/Await</code> 替代回调函数，避免“回调地狱”，更自然地管理异步操作。</li><li><strong>迭代器与生成器</strong>：流式处理大规模数据，节省内存。</li></ul></li></ul><h3 id="_3-解决复杂场景" tabindex="-1"><a class="header-anchor" href="#_3-解决复杂场景" aria-hidden="true">#</a> 3. 解决复杂场景</h3><ul><li><strong>大规模数据处理</strong>：<code>Map</code>、<code>Set</code> 和 <code>WeakMap</code> 等数据结构在处理复杂数据时效率更高。</li><li><strong>高级编程模式</strong>：如类的私有字段和方法（<code>#field</code>）、动态导入（<code>import()</code>）、模块化等特性，提升了代码封装性。</li></ul><h3 id="_4-更好地支持现代浏览器" tabindex="-1"><a class="header-anchor" href="#_4-更好地支持现代浏览器" aria-hidden="true">#</a> 4. 更好地支持现代浏览器</h3><ul><li>最新浏览器基本上支持 ES 的大多数新特性，无需额外的 polyfill 或转译，提升了代码的兼容性。</li><li>比如，使用模块化（<code>import/export</code>）可以直接加载模块，无需复杂的脚本管理工具。</li></ul><h3 id="_5-提高团队协作效率" tabindex="-1"><a class="header-anchor" href="#_5-提高团队协作效率" aria-hidden="true">#</a> 5. 提高团队协作效率</h3><ul><li>使用最新语言特性可以减少代码风格分歧，让团队更容易理解代码意图。 <ul><li><strong>默认参数</strong>减少无意义的条件判断。</li><li><code>Promise.allSettled</code> 高效处理多个异步任务的结果。</li></ul></li></ul><h3 id="_6-保持行业竞争力" tabindex="-1"><a class="header-anchor" href="#_6-保持行业竞争力" aria-hidden="true">#</a> 6. 保持行业竞争力</h3><ul><li>前端技术迭代迅速，熟悉最新 ES 特性能够帮助开发者跟上技术趋势，增强行业竞争力。</li><li>现代开发框架（如 React、Vue、Svelte）和工具链（如 Webpack、Vite、Babel、ESLint）也高度依赖这些特性。</li></ul><p>了解这些，希望可以真正的在实际应用中有所积淀，才能在面试回答中，游刃有余。</p><h2 id="答题思路" tabindex="-1"><a class="header-anchor" href="#答题思路" aria-hidden="true">#</a> 答题思路</h2><p>在回答面试官关于“<strong>了解哪些最新的 ES 新特性</strong>”这一问题时，以下几个策略可以帮助你展现专业性和实际应用能力：</p><h3 id="_1-结构清晰-突出重点" tabindex="-1"><a class="header-anchor" href="#_1-结构清晰-突出重点" aria-hidden="true">#</a> 1. 结构清晰，突出重点</h3><p>先概括性地回答“对 ECMAScript 的更新较为熟悉，特别是从 ES2021 到最近 ES2024 的新特性，并在项目中有实际应用。”<br> 然后按照<strong>时间倒序</strong>，挑选出一些你熟悉且常用的特性进行介绍。（突显问题的最新字眼）</p><h3 id="_2-挑选常见且有实际应用价值的特性" tabindex="-1"><a class="header-anchor" href="#_2-挑选常见且有实际应用价值的特性" aria-hidden="true">#</a> 2. 挑选常见且有实际应用价值的特性</h3><p>下文整理了一些时间倒序排列的 ES 新特性，可以根据你的熟悉程度和实际使用经验选择性回答。可能面试官会拓展，选择某一个的时候，尽量深入一点，自身也尽量围绕可能的扩展来回答。</p><h3 id="_3-强调实际项目中的应用" tabindex="-1"><a class="header-anchor" href="#_3-强调实际项目中的应用" aria-hidden="true">#</a> 3. 强调实际项目中的应用</h3><p>不仅仅是列举特性，而是结合项目经验说明这些特性如何帮助解决实际问题。</p><p>以下列举的例子做参考，自己也可以依据自身情况，得出适合自己的回答：</p><ul><li><strong>“在处理异步接口调用时，我主要使用了 ES2017 的 <code>async/await</code>，极大地优化了回调地狱的问题。”</strong></li><li><strong>“ES2021 的逻辑赋值运算符在状态管理中非常有用，比如条件赋值 Redux store 的默认值。”</strong></li><li>......</li></ul><h3 id="_4-展示学习态度和广度" tabindex="-1"><a class="header-anchor" href="#_4-展示学习态度和广度" aria-hidden="true">#</a> 4. 展示学习态度和广度</h3><p>如果时间允许，可以提到你学习新特性的方式，比如：</p><ul><li>关注 TC39 提案进展，了解即将标准化的功能。</li><li>经常使用 Babel、Vite 等工具测试提案阶段的特性。</li></ul><h3 id="_5-避免-踩坑" tabindex="-1"><a class="header-anchor" href="#_5-避免-踩坑" aria-hidden="true">#</a> 5. 避免“踩坑”</h3><ul><li>如果不熟悉某个特性，坦诚承认：“对这个特性了解不多，但我愿意快速学习并尝试使用。”</li><li>不要只背诵特性，而是注重描述实际应用场景。</li></ul><h3 id="示例回答" tabindex="-1"><a class="header-anchor" href="#示例回答" aria-hidden="true">#</a> 示例回答</h3><p>我对 ECMAScript 的更新一直有关注，并在项目中应用了许多新特性。</p><p>例如：</p><ul><li>ES2021 的逻辑赋值运算符（<code>&amp;&amp;=</code>, <code>||=</code>, <code>??=</code>）简化了 Redux 的状态更新逻辑；</li><li>ES2020 的可选链和空值合并操作符则优化了嵌套属性的访问，减少了手写的空值判断代码。</li><li>此外，我也在研究 ES2024 的 JSON 模块特性，可以直接 <code>import</code> JSON 文件到代码中，这对管理配置文件非常实用。</li><li>......</li></ul><p>这样的回答不仅展现了对语言特性的了解，还体现了实际开发经验和学习能力。</p><h2 id="es-特性整理" tabindex="-1"><a class="header-anchor" href="#es-特性整理" aria-hidden="true">#</a> ES 特性整理</h2><h3 id="es2024-es15" tabindex="-1"><a class="header-anchor" href="#es2024-es15" aria-hidden="true">#</a> ES2024 (ES15)</h3><ol><li><p><strong>Symbol.prototype.description</strong><br> 新增对符号的描述字段的访问支持，可以更轻松获取 Symbol 的描述信息。</p></li><li><p><strong>Array.prototype.toSorted</strong><br> 提供非破坏性排序方法，返回排序后的新数组而不改变原数组。</p></li><li><p><strong>RegExp V flag</strong><br> 引入“v”标志来支持 Unicode 正则表达式模式匹配和更复杂的匹配。</p></li><li><p><strong>Iterator Helpers</strong><br> 为迭代器对象添加常用工具方法，如 <code>map</code>、<code>filter</code>、<code>take</code> 等，提高对流式数据处理的支持。</p></li><li><p><strong>JSON 模块（Import JSON）</strong><br> 可以直接通过 <code>import</code> 导入 JSON 文件，无需额外配置工具。<br><em>示例</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">&#39;./data.json&#39;</span> <span class="token keyword">assert</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>应用</em>：用在配置文件或静态数据加载中，避免手动解析 JSON。</p></li><li><p><strong>Object.groupBy()</strong></p><p>用于根据回调函数返回的字符串值对可迭代对象（如数组）的对象元素进行分组。它返回一个对象，其中每个组名称作为键，相应的元素数组作为值。返回的对象和原始对象中的元素是相同的。即，如果更改元素的内部结构，它将反映在原始对象和返回的对象中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> persons <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Kane&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;Rambo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">callbackFunc</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;senior&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">17</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;adult&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;kid&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>persons<span class="token punctuation">,</span> callbackFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Kids: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token keyword">of</span> result<span class="token punctuation">.</span>kid<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> y<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> result2 <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>persons<span class="token punctuation">,</span> callbackFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Kids2: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> result2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;kid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Temporal API</strong></p><p>是一种用于处理日期和时间的现代 API，用于取代原始的 Date API。它提供了一种更全面且用户友好的方式来处理日期和时间操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Temporal<span class="token punctuation">.</span>PlainDate
Temporal<span class="token punctuation">.</span>PlainTime
Temporal<span class="token punctuation">.</span>PlainDateTime
Temporal<span class="token punctuation">.</span>PlainYearMonth
Temporal<span class="token punctuation">.</span>PlainMonthDay
Temporal<span class="token punctuation">.</span>ZonedDateTime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Promise withResolvers</strong></p><p>是一个静态方法工厂，返回一个包含新 Promise 的对象以及两个函数，一个用于解析，另一个用于拒绝。这两个函数对应于初始代码片段中所示的传递给 Promise() 构造函数的执行器的两个参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> promise<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">}</span> <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">withResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;Success&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="es2023-es14" tabindex="-1"><a class="header-anchor" href="#es2023-es14" aria-hidden="true">#</a> ES2023 (ES14)</h3><ol><li><p><strong>Array.prototype.findLast &amp; Array.prototype.findLastIndex</strong><br> 两个的数组新方法，用于从最后一个元素搜索数组元素。它们的功能与<strong>find()</strong> 和<strong>findIndex()</strong> 类似，但搜索从数组末尾开始。这些方法可在<strong>Array</strong>和<strong>TypedArray</strong>原型上使用。此功能通过消除手动数组反转的过程，为逆序搜索提供了一种有效的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isOdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Hashbang 支持</strong><br> 在脚本开头使用 <code>#!</code> 来支持直接在脚本中定义解释器。 （也称为 shebang）语法已支持在可执行脚本的开头使用一系列字符 <code>(#!)</code> 来定义要运行的程序的解释器。换句话说，此语法有助于告诉操作系统在执行脚本时使用哪个解释器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world from hashbang syntax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Symbol.prototype.isWellKnownSymbol</strong><br> 判断 Symbol 是否为“知名符号”。</p></li><li><p><strong>Change Array by Copy</strong><br> 非破坏性数组方法。<strong>toReversed()</strong>  、 <strong>toSorted()</strong>  、 <strong>toSpliced</strong>和<strong>with()</strong> 方法，这些方法返回新的数组副本而不是改变原始数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

 <span class="token comment">// toReversed</span>
 <span class="token keyword">const</span> reversedArray <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 4, 2, 3, 1]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 2, 4, 5]</span>

 <span class="token comment">// toSorted</span>
 <span class="token keyword">const</span> sortedArray <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 2, 4, 5]</span>

 <span class="token comment">// toSpliced</span>
 <span class="token keyword">const</span> splicedArray <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>splicedArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 5]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 2, 4, 5]</span>

 <span class="token comment">// with</span>
 <span class="token keyword">const</span> replaceWithArray <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>replaceWithArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 10, 4, 5]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 2, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Symbols 作为 weakmap keys</strong></p><p>在 ES2023 之前，<code>WeakMap</code> 仅限于允许对象作为键，因为对象是唯一的且无法重新创建。由于 <code>Symbols</code> 是 ECMAScript 中唯一允许唯一值的基元，因此 WeakMap API 已使用符号作为键进行扩展，而不仅仅是使用对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> weak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> objKey <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

weak<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>objKey<span class="token punctuation">,</span> <span class="token string">&quot;ES2023&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weak<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>objKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ES2023</span>

<span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
weak<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;ES2023&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weak<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ES2023</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="es2022-es13" tabindex="-1"><a class="header-anchor" href="#es2022-es13" aria-hidden="true">#</a> ES2022 (ES13)</h3><ol><li><p><strong>Top-Level Await</strong><br> 在模块的顶层支持使用 <code>await</code>，简化异步操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">import</span> posts <span class="token keyword">from</span> <span class="token string">&#39;./posts&#39;</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> <span class="token function-variable function">getPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> posts<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 
 <span class="token keyword">let</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>动态依赖路径：</strong>  当您拥有依赖于运行时值的依赖项的动态路径时，await 有助于在运行时加载或导入消息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./messages-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>language<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>依赖回退：</strong>  如果导入的模块加载失败，则加载后备模块用于加载依赖项。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> lodash<span class="token punctuation">;</span>
 <span class="token keyword">try</span> <span class="token punctuation">{</span>
   lodash <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;https://first.domain.com/lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
   lodash <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;https://second.domain.com/lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>资源初始化：</strong>  此功能可用于使用数据库初始化应用程序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> dbConnector<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dbUtils.js&#39;</span>
<span class="token comment">//connect to database</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> dbConnector<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  connection<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>RegExp Match Indices</strong><br> 在正则匹配结果中返回每个匹配的索引范围。附加信息包括 RegExp 中匹配的开始和结束索引以及在输入字符串中使用<code>\\d</code>标志。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> regexPatter <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Jack</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">&#39;Authos: Jack, Alexander and Jacky&#39;</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>input<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexPatter<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// [&#39;Jack&#39;, index: 8, input: &#39;Authos: Jack, Alex and Jacky&#39;, groups: undefined]</span>
 
 <span class="token comment">// \\d</span>
  <span class="token keyword">const</span> regexPatter <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(Jack)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gd</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token string">&#39;Authos: Jack, Alexander and Jacky&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>input<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexPatter<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">// [&#39;Jack&#39;, &#39;Jack&#39;, index: 8, input: &#39;Authos: Jack, Alexander and Jacky&#39;, groups: undefined, indices: Array(2)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>class</code> 公共实例字段 &amp; 私有字段（<code>#field</code>）静态字段（static）</strong><br> 实现类的更强封装性，使用私有字段保护数据。<br><em>示例</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  #privateField <span class="token operator">=</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">;</span>
  publicField <span class="token operator">=</span> <span class="token string">&#39;visible&#39;</span><span class="token punctuation">;</span>
  
  <span class="token keyword">static</span> #employerName<span class="token operator">=</span><span class="token string">&quot;Github&quot;</span>

  <span class="token keyword">static</span> <span class="token function">#getEmployerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> #employerName
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>应用</em>：在模块化开发中保护内部状态。</p></li><li><p><strong>Array .at()</strong></p><p><code>.at()</code>方法用于通过传递负索引值来访问数组或字符串元素。即，它允许从数组末尾或字符串访问值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Error Cause</strong></p><p><code>cause</code>属性作为额外参数添加到 Error() 构造函数中，允许将错误链接起来，类似于错误链中类似 Java 的堆栈跟踪。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">processUserData</span><span class="token punctuation">(</span><span class="token parameter">arrayData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> arrayData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token keyword">try</span> <span class="token punctuation">{</span>
         <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> json<span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
           <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Data processing failed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
           <span class="token punctuation">{</span><span class="token literal-property property">cause</span><span class="token operator">:</span> err<span class="token punctuation">}</span>
         <span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>hasOwn</strong></p><p>新的<code>Object.hasOwn()</code>方法是 <code>Object.prototype.hasOwnProperty</code> 的替换或改进版本。它是一个静态方法，如果指定对象将指定的属性作为其自己的属性，则返回 true。如果该属性是继承的或不存在，则该方法返回 false。</p><p><strong>当<code>hasOwnProperty</code>被覆盖时：</strong></p><p>在某些情况下，您需要在对象上定义自定义的 <code>hasOwnProperty</code> 。当你尝试应用<code>hasOwnProperty</code>来确定是否拥有自己的属性时，它会抛出错误，如下例所示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span> 
  <span class="token function-variable function">hasOwnProperty</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token comment">// throws a TypeError</span>

user<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 create(null) 函数创建一个对象：</strong></p><p>如果您借助 create(null) 函数创建新对象，则新创建的对象不会继承自 Object.prototype。所以它没有 hasOwnProperty 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws a TypeError</span>

user<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="es2021-es12" tabindex="-1"><a class="header-anchor" href="#es2021-es12" aria-hidden="true">#</a> ES2021 (ES12)</h3><ol><li><p><strong>String.prototype.replaceAll</strong><br> 提供全局字符串替换功能，避免手动正则表达式。</p><p>用于将某个字符串的所有出现位置替换为另一个字符串值。早些时候，如果不使用正则表达式，就不可能替换子字符串的所有实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10101010&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;01010101&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111</span>

<span class="token comment">// replaceAll</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10101010&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;01010101&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Promise.any</strong><br> 返回第一个完成的 Promise（无论是否成功），更适合处理多个异步任务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;Resolves after 100ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;Resolves after 200ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">,</span> promise3<span class="token punctuation">]</span><span class="token punctuation">;</span>

 Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resolves after 100ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有任何承诺得到解决，那么它会抛出<code>AggregateError</code>异常。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
       Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Error 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Error 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Error 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Output: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>output<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>errors<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token comment">// Error: Error1,Error2,Error3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>逻辑赋值运算符</strong><br> 引入 <code>&amp;&amp;=</code>、<code>||=</code> 和 <code>??=</code> 运算符，简化常见逻辑操作。</p></li><li><p><strong>WeakRefs</strong><br> 引入弱引用和垃圾回收通知机制，提升对资源管理的控制。</p><p><strong>WeakRef</strong> 提供了两项新功能</p><ul><li>使用 WeakRef 类创建对对象的弱引用</li><li>在对象被垃圾收集后，使用 FinalizationRegistry 类运行用户定义的终结器</li></ul><p>WeakRef 对一个对象的引用，如果它是内存中该对象的唯一引用，则不会阻止垃圾回收。当我们不想将对象永远保留在内存中时（例如，WebSocket），它很有用。弱引用的主要用途是实现到大型对象的缓存或映射，对于很少使用的对象，您不需要将其保留在内存中。</p><p>在 ES12 之前，WeakMap 和 WeakSet 是 JavaScript 中弱引用对象的唯一方法。而 ES12 中的 WeakRef 提供了实际的弱引用，从而为了解对象的生命周期提供了一个窗口。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> ‘Sudheer’<span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output: {name: “Sudheer”, age: 35}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output: Sudheer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>FinalizationRegistry</strong></p><p>允许您在对象被垃圾收集时请求回调。它用作清理回调。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Create new FinalizationRegistry:</span>
 <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token comment">// Create new object:</span>
   <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

 <span class="token comment">// Register finalizer for the &quot;obj&quot; as first argument and value for callback function as second argument:</span>
   reg<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;obj has been garbage-collected.&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 完成回调不会在垃圾收集事件侦听器后立即运行，因此不要将其用于重要的逻辑或指标。</p></li><li><p><strong>逻辑赋值运算符（<code>&amp;&amp;=</code>, <code>||=</code>, <code>??=</code>）</strong><br> 逻辑赋值运算符将逻辑运算（&amp;&amp;、|| 或 ??）与赋值相结合。它们对于为变量分配默认值非常有用。 <em>示例</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 x <span class="token operator">&amp;&amp;=</span> y<span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
name <span class="token operator">||=</span> <span class="token string">&#39;Default&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 如果 name 是 false，赋值 &#39;Default&#39;</span>

 <span class="token keyword">let</span> x<span class="token punctuation">;</span>
 <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 x <span class="token operator">??=</span> y<span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Numeric Separators</strong></p><p>数字分隔符通过使用下划线 (_) 提供数字之间的分隔，有助于在 JavaScript 中读取大数字（或数字文字）。换句话说，通过在数字组之间创建视觉分隔，数字文字更具可读性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 _ 数字分隔符使十亿和一万亿变得更易读</span>
<span class="token keyword">const</span> billion <span class="token operator">=</span> <span class="token number">1000_000_000</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>billion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000000000</span>

<span class="token keyword">const</span> trillion <span class="token operator">=</span> <span class="token number">1000_000_000_000n</span><span class="token punctuation">;</span> <span class="token comment">// BigInt number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trillion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000000000000</span>

<span class="token comment">// 也可用于二进制和十六进制文字</span>
<span class="token keyword">const</span> binaryLiteral <span class="token operator">=</span> <span class="token number">0b1010_1010</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binaryLiteral<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hexLiteral <span class="token operator">=</span> <span class="token number">0xFF_FF_FF_FF</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hexLiteral<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="es2020-es11" tabindex="-1"><a class="header-anchor" href="#es2020-es11" aria-hidden="true">#</a> ES2020 (ES11)</h3>`,51)),s("ol",null,[n[33]||(n[33]=t(`<li><p><strong>BigInt</strong></p><p>在早期的 JavaScript 版本中，使用 Number 类型存在限制。即，您无法安全地表示大于 pow(2, 53) 的整数值。</p><p>在 ES2020 中，<code>BigInt</code>被引入作为<strong>第七种基本类型</strong>来表示大于 pow(2, 53) - 1（或 9007199254740991 或 Number.MAX_SAFE_INTEGER）的整数（任意精度的整数）。</p><p>这是通过将<code>n</code>附加到整数文字的末尾或通过调用函数 BigInt() 创建的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. Current number system</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 9007199254740992</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 9007199254740992</span>

<span class="token comment">// 2. BigInt representation</span>
<span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">9007199254740991n</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bigIntConstructorRep <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740991n</span>
<span class="token keyword">const</span> bigIntStringRep <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&quot;9007199254740991&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9007199254740991n</span>

<span class="token comment">// 3. Typeof usage</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token comment">// bigint</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// bigint</span>

<span class="token comment">// 4. Operators</span>

<span class="token keyword">const</span> previousMaxNum <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>previousMaxNum <span class="token operator">+</span> <span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740993n (this was not possible before)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>previousMaxNum <span class="token operator">-</span><span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9007199254740990n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>previousMaxNum <span class="token operator">*</span> <span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18014398509481982n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>previousMaxNum <span class="token operator">%</span> <span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>previousMaxNum <span class="token operator">/</span> <span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4503599627370495n</span>

<span class="token comment">// 5. comparison</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">===</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Dynamic Import</strong><br> 动态加载模块，通过 <code>import()</code> 实现异步模块加载。</p><p><code>dynamic import</code>以有条件或按需加载模块。由于它返回所请求模块的模块命名空间对象的承诺，因此现在可以使用 async/await 将模块解析或导入分配给变量，如下所示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">const</span> moduleSpecifier <span class="token operator">=</span> <span class="token string">&#39;./message.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span>moduleSpecifier<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    module<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, default export</span>
    module<span class="token punctuation">.</span><span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Bye, named export</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;loading error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> moduleSpecifier <span class="token operator">=</span> <span class="token string">&#39;./message.js&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> messageModule <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>moduleSpecifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
  messageModule<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, default export</span>
  messageModule<span class="token punctuation">.</span><span class="token function">sayGoodBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Bye, named export</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入的模块同时显示默认导出和命名导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Hello, default export&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sayGoodBye</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Bye, named export&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 动态导入不需要<code>type=&quot;module&quot;</code>的脚本</p></li>`,2)),s("li",null,[n[8]||(n[8]=s("p",null,[s("strong",null,"Nullish Coalescing Operator (??)"),s("br"),a(" 提供更安全的空值判断操作符。")],-1)),s("p",null,[n[2]||(n[2]=s("strong",null,"空值合并运算符",-1)),n[3]||(n[3]=a("（ ")),n[4]||(n[4]=s("strong",null,[s("code",null,"??")],-1)),n[5]||(n[5]=a(" ）是一个逻辑运算符，当左侧的操作数为 ")),s("a",r,[n[0]||(n[0]=s("code",null,"null",-1)),e(p)]),n[6]||(n[6]=a(" 或者 ")),s("a",k,[n[1]||(n[1]=s("code",null,"undefined",-1)),e(p)]),n[7]||(n[7]=a(" 时，返回其右侧操作数，否则返回左侧操作数。"))]),n[9]||(n[9]=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&#39;default string&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: &quot;default string&quot;</span>

<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">42</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s("li",null,[n[18]||(n[18]=s("p",null,[s("strong",null,"Optional Chaining (?.)"),s("br"),a(" 优化深层属性访问，避免手动检查每个层级。")],-1)),s("p",null,[n[13]||(n[13]=s("strong",null,[a("可选链运算符（"),s("code",null,"?."),a("）")],-1)),n[14]||(n[14]=a("  用于访问对象的属性或调用函数。如果使用此运算符访问的对象或调用的函数是 ")),s("a",d,[n[10]||(n[10]=s("code",null,"undefined",-1)),e(p)]),n[15]||(n[15]=a(" 或 ")),s("a",m,[n[11]||(n[11]=s("code",null,"null",-1)),e(p)]),n[16]||(n[16]=a("，则表达式会短路并计算为 ")),s("a",v,[n[12]||(n[12]=s("code",null,"undefined",-1)),e(p)]),n[17]||(n[17]=a("，而不是抛出错误。"))]),n[19]||(n[19]=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> adventurer <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cat</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Dinah&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dogName <span class="token operator">=</span> adventurer<span class="token punctuation">.</span>dog<span class="token operator">?.</span>name<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dogName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: undefined</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adventurer<span class="token punctuation">.</span>someNonExistentMethod<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s("li",null,[n[23]||(n[23]=s("p",null,[s("strong",null,"Promise.allSettled"),s("br"),a(" 等待所有 Promise 结果（成功或失败）完成后返回。")],-1)),s("p",null,[n[21]||(n[21]=a("静态方法将一个 Promise 可迭代对象作为输入，并返回一个单独的 ")),s("a",b,[n[20]||(n[20]=s("code",null,"Promise",-1)),e(p)]),n[22]||(n[22]=a("。当所有输入的 Promise 都已敲定时（包括传入空的可迭代对象时），返回的 Promise 将被兑现，并带有描述每个 Promise 结果的对象数组。"))]),n[24]||(n[24]=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  results<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Expected output:</span>
<span class="token comment">// &quot;fulfilled&quot;</span>
<span class="token comment">// &quot;rejected&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),n[34]||(n[34]=t(`<li><p><strong>可选链（<code>?.</code>）</strong><br> 访问嵌套对象属性时避免 <code>undefined</code> 或 <code>null</code> 错误。<br><em>示例</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">profile</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token operator">?.</span>profile<span class="token operator">?.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1)),s("li",null,[n[31]||(n[31]=s("p",null,[s("strong",null,"String matchAll")],-1)),s("p",null,[n[27]||(n[27]=s("strong",null,[s("code",null,"matchAll()")],-1)),n[28]||(n[28]=a("  方法返回一个迭代器，该迭代器包含了检索字符串与")),s("a",g,[n[25]||(n[25]=a("正则表达式")),e(p)]),n[29]||(n[29]=a("进行匹配的所有结果（包括")),s("a",y,[n[26]||(n[26]=a("捕获组")),e(p)]),n[30]||(n[30]=a("）。"))]),n[32]||(n[32]=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">t(e)(st(\\d?))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;test1test2&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: Array [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),n[35]||(n[35]=t(`<li><p><strong>globalThis</strong></p><p>在 ES2020 之前，仅仅为了访问全局对象就需要在不同的JavaScript环境（跨平台）中编写不同的语法。对于开发人员来说这确实是一个困难时期，因为你需要在浏览器端使用<code>window, self, or frames</code> ，在 Nodejs 上使用<code>global</code> ，在 Web Workers 端<code>self</code> 。</p><p>另一方面， <code>this</code>关键字可以在非严格模式的函数内部使用，但在严格模式下它会给出 undefined 。如果您将<code>Function(&#39;return this&#39;)()</code>视为上述环境的解决方案，那么对于启用 CSP 的环境（其中 eval() 被禁用），它将失败。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getGlobal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> self<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> window<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> global<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;unable to locate global object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> globals <span class="token operator">=</span> <span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> globals<span class="token punctuation">.</span>setTimeout <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no setTimeout in this environment or runtime&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// globalThis</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> globalThis<span class="token punctuation">.</span>setTimeout <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no setTimeout in this environment or runtime&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值，类似于全局对象（global object）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">canMakeHTTPRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> globalThis<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">canMakeHTTPRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output (in a browser): true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>i<wbr>mport.meta</strong></p><p><code>i<wbr>mport.meta</code>对象是由 ECMAScript 实现使用 null 原型创建的，用于获取有关 JavaScript 模块的上下文特定元数据。假设您正在尝试从脚本加载<code>my-module</code> ，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;my-module.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { url: &quot;file:///home/user/my-module.js&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 记住<code>import</code>并不是真正的对象，但<code>i<wbr>mport.meta</code>是作为可扩展的对象提供的，并且其属性是可写的、可配置的和可枚举的。</p></li><li><p><strong>for..in order</strong></p><p>在 ES2020 之前，规范没有指定 (a in b) 的运行顺序。尽管大多数 javascript 引擎/浏览器按照定义的顺序循环访问对象的属性，但并非所有情况都是如此。这已在 ES2020 中正式标准化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;b&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;c&#39;</span><span class="token operator">:</span> <span class="token number">4</span>
<span class="token punctuation">}</span>


<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a b c</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3))]),n[37]||(n[37]=t(`<h3 id="es2019-es10" tabindex="-1"><a class="header-anchor" href="#es2019-es10" aria-hidden="true">#</a> ES2019 (ES10)</h3><ol><li><p><strong>Array.prototype.flat &amp; flatMap</strong><br> 提供数组扁平化操作及映射后扁平化的功能。</p><p><code>flat()</code>方法，将嵌套数组“展平”到顶层数组中。该方法的功能类似于Lodash的<code>_.flattenDepth()</code>函数。此方法接受一个可选参数，该参数指定嵌套数组应展平的级别数，默认嵌套级别为 1。</p><p><strong>注意：</strong> 如果数组中有任何空槽，它们将被丢弃。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> numberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> charArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> flattenedArrOneLevel <span class="token operator">=</span> numberArray<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> flattenedArrTwoLevel <span class="token operator">=</span> numberArray<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> flattenedCharArrOneLevel <span class="token operator">=</span> charArray<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flattenedArrOneLevel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, [3], 4, 5, 6]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flattenedArrTwoLevel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flattenedCharArrOneLevel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<strong>flatMap()</strong> 方法将<code>map()</code>和<code>flat()</code>合并为一个方法。它首先使用给定函数的返回值创建一个新数组，然后连接该数组的所有子数组元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numberArray1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberArray1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [10, 20, 30, 40, 50]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Object.fromEntries</strong><br> 将键值对列表转换为对象的快捷方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Object to Array: </span>
 <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;b&#39;</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;c&#39;</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ [&#39;a&#39;, &#39;1&#39;], [&#39;b&#39;, &#39;2&#39;], [&#39;c&#39;, &#39;3&#39;] ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Array to Object: </span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: &quot;1&quot;, b: &quot;2&quot;, c: &quot;3&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法使用的常见情况之一是使用 URL 的查询参数，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> paramsString <span class="token operator">=</span> <span class="token string">&#39;param1=foo&amp;param2=baz&#39;</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>paramsString<span class="token punctuation">)</span><span class="token punctuation">;</span>

 Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    
 <span class="token comment">// =&gt; {param1: &quot;foo&quot;, param2: &quot;baz&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>String.trimStart &amp; trimEnd</strong><br> 去除字符串两端多余空格的便捷方法。</p><p>为了与padStart/padEnd保持一致，ES2019提供了标准函数<code>trimStart</code>和<code>trimEnd</code>来修剪字符串开头和结尾的空格。然而，为了网络兼容性（避免任何损坏）， <code>trimLeft</code>和<code>trimRight</code>将分别是<code>trimStart</code>和<code>trimEnd</code>的别名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">//Prior ES2019</span>
 <span class="token keyword">let</span> messageOne <span class="token operator">=</span> <span class="token string">&quot;   Hello World!!    &quot;</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>messageOne<span class="token punctuation">.</span><span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello World!!</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>messageOne<span class="token punctuation">.</span><span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   Hello World!!</span>

 <span class="token comment">//With ES2019</span>
 <span class="token keyword">let</span> messageTwo <span class="token operator">=</span> <span class="token string">&quot;   Hello World!!    &quot;</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>messageTwo<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello World!!</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>messageTwo<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   Hello World!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Optional Catch Binding</strong><br><code>catch</code> 块中捕获变量为可选项，允许忽略错误对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// With binding parameter(&lt;ES9)</span>
 <span class="token keyword">try</span> <span class="token punctuation">{</span>
   ···
 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   ···
 <span class="token punctuation">}</span>
 <span class="token comment">// Without binding parameter(ES9)</span>
 <span class="token keyword">try</span> <span class="token punctuation">{</span>
   ···
 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
   ···
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Symbol description</strong></p><p>ES2019 引入了只读描述属性来检索包含符号描述的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;one&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unefined</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Symbol.iterator&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>JSON Improvements</strong></p><p><strong>JSON Superset</strong></p><p>在 ES2019 之前，ECMAScript 声称 JSON 是 JSON.parse 的子集，但事实并非如此。因为与 JSON 字符串不同，ECMAScript 字符串文字不能包含字符<code>U+2028</code> （行分隔符）和<code>U+2029</code> （段落分隔符）。如果您仍然使用这些字符，则会出现语法错误。作为解决方法，您必须使用转义序列将它们放入字符串中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;\\u2028&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而 JSON 字符串可以同时包含 U+2028 和 U+2029 而不会产生错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;\\u2028&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ES2019 中取消了此限制。这简化了规范，无需针对 ECMAScript 字符串文字和 JSON 字符串文字制定单独的规则。</p><p><strong>格式良好的 JSON.Stringify()：</strong>  在 ES2019 之前，如果输入中存在任何单独代理，则使用 JSON.stringify 方法返回未形成的 Unicode 字符串（格式错误的 Unicode 字符串）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;\\uD800&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&quot;�&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而在 ES2019 中，JSON.stringify 输出单独代理的转义序列，使其输出有效的 Unicode 并可以用 UTF-8 表示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;\\uD800&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&quot;\\ud800&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Function.toString()</strong></p><p>函数有一个名为<code>toString()</code>的实例方法，它返回一个字符串来表示函数代码。以前版本的 ECMAScript 删除了函数代码中的空格、换行和注释，但在 ES2020 中保留了原始源代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> msg <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token comment">//Print message</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// function sayHello(message) {</span>
<span class="token comment">//       let msg = message;</span>
<span class="token comment">//       //Print message</span>
<span class="token comment">//       console.log(\`Hello, \${msg}\`);</span>
<span class="token comment">//   }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="es2018-es9" tabindex="-1"><a class="header-anchor" href="#es2018-es9" aria-hidden="true">#</a> ES2018 (ES9)</h3><ol><li><strong>Asynchronous Iteration</strong><br> 支持异步迭代协议，用于处理异步数据流。</li><li><strong>Promise.prototype.finally</strong><br> 为 Promise 增加 <code>finally</code> 方法，便于清理操作。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://somesite.com/users&#39;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       isLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Finished loading!!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Rest/Spread Properties</strong><br> 支持对象的解构与扩展操作符。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">myfunc1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>x <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, { b: 2, c: 3, d:4 }</span>
 <span class="token punctuation">}</span>
 <span class="token function">myfunc1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
   <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
   <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
   <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myNewObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>myObject<span class="token punctuation">,</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2, c: 3, d: 4, e: 5 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>RegExp 的增强</strong><ul><li>新增 <code>s</code> 修饰符（dotAll 模式）。</li><li>支持命名捕获组和反向引用。</li><li>支持后行断言。</li></ul></li></ol><h3 id="es2017-es8" tabindex="-1"><a class="header-anchor" href="#es2017-es8" aria-hidden="true">#</a> ES2017 (ES8)</h3><ol><li><p><strong>SharedArrayBuffer 和 Atomics</strong><br> 增强对共享内存和多线程操作的支持。</p><p>Atomics 是一个全局对象，它提供作为静态方法执行的原子操作。它们与 SharedArrayBuffer（固定长度二进制数据缓冲区）对象一起使用。这些方法的主要用例是，</p><p><strong>原子操作：</strong> 当内存共享时，多个线程可以在内存中读写相同的数据。因此存在数据丢失的可能性。但原子操作可确保写入和读取可预测的值、操作在下一个操作开始之前完成并且操作不会中断。</p><p>它提供了静态方法，例如 add、or、and、xor、load、store、isLockFree 等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sharedMemory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedArrayBuffer</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sharedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>sharedMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>
sharedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

Atomics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>

Atomics<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

Atomics<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4</span>

Atomics<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>

Atomics<span class="token punctuation">.</span><span class="token function">xor</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

Atomics<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

Atomics<span class="token punctuation">.</span><span class="token function">compareExchange</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

Atomics<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Atomics<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>

Atomics<span class="token punctuation">.</span><span class="token function">isLockFree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>等待通知：</strong>  <code>wait()</code>和<code>notify()</code>方法都提供了等待直到某个条件变为真的方法，并且通常用作阻塞结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义共享内存和数组</span>
<span class="token keyword">const</span> sharedMemory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedArrayBuffer</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sharedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span>sharedMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取线程正在睡眠并等待位置 0，该位置预计为 10。</span>
<span class="token comment">// 在该值被写入线程覆盖后，您可以观察到不同的值。</span>
Atomics<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>

<span class="token comment">// 现在写入线程存储一个新值（例如，100）并通知等待线程，</span>
Atomics<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Atomics<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>sharedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>String.prototype.padStart &amp; padEnd</strong><br> 增加字符串补全功能。</p><p><strong>padStart()：</strong> 使用此方法，填充应用于字符串的左侧或开头。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例如，出于安全原因，您可能只想显示信用卡号的最后四位数字，</span>
<span class="token keyword">const</span> cardNumber <span class="token operator">=</span> <span class="token string">&#39;01234567891234&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lastFourDigits <span class="token operator">=</span> cardNumber<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> maskedCardNumber <span class="token operator">=</span> lastFourDigits<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>cardNumber<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>maskedCardNumber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// expected output: &quot;**********1234&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>padEnd()：</strong> 使用此方法，填充应用于字符串的右侧或结尾侧。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> label1 <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> label2 <span class="token operator">=</span> <span class="token string">&quot;Phone Number&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span>
<span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token string">&quot;(222)-333-3456&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>label1 <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> value1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Name:                     John</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>label2 <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Phone Number: (222)-333-3456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>Async/Await</code></strong><br> 使异步操作写法更像同步代码，提升代码可读性。<br><em>示例</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Object values</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> countries <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token constant">IN</span><span class="token operator">:</span> <span class="token string">&#39;India&#39;</span><span class="token punctuation">,</span>
   <span class="token constant">SG</span><span class="token operator">:</span> <span class="token string">&#39;Singapore&#39;</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>
 Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span> <span class="token comment">// [&#39;India&#39;, &#39;Singapore&#39;]</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;India&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Singapore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;India&#39;, &#39;Singapore&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token string">&#39;India&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;I&#39;, &#39;n&#39;, &#39;d&#39;, &#39;i&#39;, &#39;a&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Object entries</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> countries <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token constant">IN</span><span class="token operator">:</span> <span class="token string">&#39;India&#39;</span><span class="token punctuation">,</span>
 <span class="token constant">SG</span><span class="token operator">:</span> <span class="token string">&#39;Singapore&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span> 
<span class="token comment">// [[&quot;IN&quot;, &quot;India&quot;], [&quot;SG&quot;, &quot;Singapore&quot;]]</span>


<span class="token keyword">const</span> countriesArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;India&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Singapore&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>countriesArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [ [&#39;0&#39;, &#39;India&#39;], [&#39;1&#39;, &#39;Singapore&#39;]]</span>

<span class="token keyword">const</span> country <span class="token operator">=</span> <span class="token string">&#39;India&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [[&quot;0&quot;, &quot;I&quot;], [&quot;1&quot;, &quot;n&quot;], [&quot;2&quot;, &quot;d&quot;], [&quot;3&quot;, &quot;i&quot;], [&quot;4&quot;, &quot;a&quot;]]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [], an empty array for any primitive type because it won&#39;t have any own properties</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Object property descriptors</strong></p><p><code>Object.getOwnPropertyDescriptors()</code> 方法返回给定对象的所有自己的属性描述符。</p><ul><li><strong>value：</strong> 与属性关联的值（仅限数据描述符）。</li><li><strong>writable:</strong>  true 当且仅当与属性关联的值可以更改时</li><li><strong>get：</strong> 充当属性的 getter 的函数。</li><li><strong>set：</strong> 充当属性设置器的函数。</li><li><strong>configurable：</strong> 当且仅当该属性描述符的类型可以更改或删除时为 true。</li><li><strong>enumerable:</strong> 当且仅当该属性在属性枚举期间出现时才为 true。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> profile <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">42</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> descriptors <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  {age: {configurable: true, enumerable: true, writable: true }}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>尾随逗号</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 参数定义和函数调用中允许使用尾随逗号</span>
 <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// declaration</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invocation</span>

<span class="token comment">// 但如果函数参数定义或函数调用只包含逗号，则会抛出语法错误</span>
 <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// SyntaxError: missing formal parameter</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no args&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: expected expression, got &#39;,&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong>  Rest 参数和 JSON 中不允许使用尾随逗号。</p></li></ol><h3 id="es2016-es7" tabindex="-1"><a class="header-anchor" href="#es2016-es7" aria-hidden="true">#</a> ES2016 (ES7)</h3><ol><li><p><strong>Array.prototype.includes</strong><br> 数组中支持更直观的元素存在性检查。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Found an element&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Array.prototype.includes()</code>比<code>Array.prototype.indexOf()</code>方法更好地处理 NaN 和 Undefined 值。即，如果数组包含 NaN 和 Undefined 值，则在搜索 NaN 和 Undefined 时， <code>indexOf()</code>不会返回正确的索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一方面， <code>includes</code>方法能够找到这些元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>指数操作符（</strong> ）**<br> 使用 <code>**</code> 代替 <code>Math.pow</code>，提高数学操作的可读性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Prior ES7</span>
<span class="token keyword">const</span> <span class="token function-variable function">cube</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cube</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span>

<span class="token comment">//Using ES7</span>
<span class="token keyword">const</span> <span class="token function-variable function">cube1</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cube1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="es2015-es6" tabindex="-1"><a class="header-anchor" href="#es2015-es6" aria-hidden="true">#</a> ES2015 (ES6)</h3><ol><li><p><strong>Let &amp; Const</strong><br> 新增块级作用域变量声明方式。</p></li><li><p><strong>Arrow Functions</strong><br> 引入箭头函数，简化函数表达式语法。</p></li><li><p><strong>Template Literals</strong><br> 提供模板字符串</p></li><li><p><strong>Classes</strong></p><p>同时可以使用 <code>extend</code> 关键字来使用继承</p></li><li><p><strong>对象解构</strong></p></li><li><p><strong>扩展运算符</strong></p></li><li><p><strong>Modules</strong></p></li><li><p><strong>Set</strong></p><p>Set 是一个内置对象，用于存储任何类型的唯一值的集合。</p></li><li><p><strong>Weakset</strong></p></li><li><p><strong>Map</strong></p></li><li><p><strong>Weakmap</strong></p></li><li><p><strong>Symbols</strong></p></li><li><p><strong>Proxies</strong></p></li><li><p><strong>Promises</strong></p></li><li><p><strong>Reflect</strong></p></li><li><p><strong>Array.find()和Array.findIndex()</strong></p></li></ol>`,10))])}const j=o(u,[["render",f],["__file","ES_new.html.vue"]]);export{j as default};
